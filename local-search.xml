<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MVC 和 MVVM 有什么区别</title>
    <link href="/2023/06/01/MVC%20%E5%92%8C%20MVVM%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/06/01/MVC%20%E5%92%8C%20MVVM%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>MVC 原理</p><ul><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ul><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202306011123725.png"></p><p>MVVM 直接对标 Vue 即可</p><ul><li>View 即 Vue template</li><li>Model 即 Vue data</li><li>VM 即 Vue 其他核心功能，负责 View 和 Model 通讯</li></ul><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202306011123755.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202306011124042.png"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MVC</tag>
      
      <tag>MVVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFC</title>
    <link href="/2023/03/05/BFC/"/>
    <url>/2023/03/05/BFC/</url>
    
    <content type="html"><![CDATA[<h1 id="BFC-的理解"><a href="#BFC-的理解" class="headerlink" title="BFC 的理解"></a>BFC 的理解</h1><p>块级格式化上下文，它是指一个独立的<strong>块级渲染区域</strong>，只有 Block-level BOX 参与，该区域拥有套渲染规则来约束块级盒子的布局，且与区域外部无关。</p><h1 id="从一个现象开始说起"><a href="#从一个现象开始说起" class="headerlink" title="从一个现象开始说起"></a>从一个现象开始说起</h1><ul><li>一个盒子不设置 height,当内容子元素都浮动时，无法撑起自身</li><li>这个盒子没有形成 BFC</li></ul><h1 id="如何创建-BFC"><a href="#如何创建-BFC" class="headerlink" title="如何创建 BFC"></a>如何创建 BFC</h1><ul><li>float 的值不是 none</li><li>position 的值不是 static 或者 relative</li><li>display 的值是 inline-block,flex,或者 inline-flex</li><li>overflow:hidden</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* bfc1 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* float: left; */</span></span><br><span class="language-css">        <span class="hljs-comment">/* bfc2 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* position: absolute; */</span></span><br><span class="language-css">        <span class="hljs-comment">/* bfc3 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* display: inline-block; */</span></span><br><span class="language-css">        <span class="hljs-comment">/* bfc4 */</span></span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.son</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: aliceblue;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="BFC-的其他作用"><a href="#BFC-的其他作用" class="headerlink" title="BFC 的其他作用"></a>BFC 的其他作用</h1><ul><li>BFC 可以取消盒子的 margin 塌陷</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: antiquewhite;</span><br><span class="language-css">        <span class="hljs-comment">/* overflow: hidden; */</span></span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.son</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: aliceblue;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>BFC 可以阻止元素被浮动元素覆盖</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.son</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: aliceblue;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.son-last</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="language-css">        <span class="hljs-comment">/* 可以阻止元素被浮动元素覆盖 */</span></span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son-last&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>BFC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css属性转换成驼峰式</title>
    <link href="/2023/02/24/css%E5%B1%9E%E6%80%A7%E8%BD%AC%E6%8D%A2%E6%88%90%E9%A9%BC%E5%B3%B0%E5%BC%8F/"/>
    <url>/2023/02/24/css%E5%B1%9E%E6%80%A7%E8%BD%AC%E6%8D%A2%E6%88%90%E9%A9%BC%E5%B3%B0%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convertToCamelCase</span>(<span class="hljs-params">cssProperty</span>) &#123;<br>  <span class="hljs-keyword">if</span> (cssProperty[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;-&quot;</span>) &#123;<br>    <span class="hljs-comment">// slice不会修改原数组，但是splice会</span><br>    cssProperty = cssProperty.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> cssProperty.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-([a-z])/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">match, letter</span>) &#123;<br>    <span class="hljs-comment">// 匹配到（）里面的</span><br>    <span class="hljs-keyword">return</span> letter.<span class="hljs-title function_">toUpperCase</span>();<br>  &#125;);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">convertToCamelCase</span>(<span class="hljs-string">&quot;font-size&quot;</span>)); <span class="hljs-comment">// 输出：fontSize</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">convertToCamelCase</span>(<span class="hljs-string">&quot;-webkit-text-stroke&quot;</span>)); <span class="hljs-comment">// 输出：webkitTextStroke</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react18+eslint+prettier 配置</title>
    <link href="/2023/01/02/react18+eslint+prettier%20%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/01/02/react18+eslint+prettier%20%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">create-react-app.<span class="hljs-property">cmd</span> react18 --template typescript<br></code></pre></td></tr></table></figure><h1 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h1><p>安装 craco</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install @craco/craco -D<br></code></pre></td></tr></table></figure><p>新建 craco.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">dir</span>) =&gt; path.<span class="hljs-title function_">resolve</span>(__dirname, dir);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 配置别名</span><br>  <span class="hljs-attr">webpack</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src&quot;</span>),<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>加入红框中的两段<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021525411.png"><br>package.json 修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco start&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco build&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco test&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021528612.png"><br>便可以使用别名了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/App&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="代码规范设置"><a href="#代码规范设置" class="headerlink" title="代码规范设置"></a>代码规范设置</h1><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h2><p>新建.editorconfig</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># https://editorconfig.org</span><br><span class="hljs-string">root</span> <span class="hljs-string">=</span> <span class="hljs-literal">true</span><br><br>[<span class="hljs-string">*</span>]<br><span class="hljs-string">charset</span> <span class="hljs-string">=</span> <span class="hljs-string">utf-8</span><br><span class="hljs-string">end_of_line</span> <span class="hljs-string">=</span> <span class="hljs-string">lf</span><br><span class="hljs-string">indent_size</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><br><span class="hljs-string">indent_style</span> <span class="hljs-string">=</span> <span class="hljs-string">space</span><br><span class="hljs-string">insert_final_newline</span> <span class="hljs-string">=</span> <span class="hljs-literal">true</span><br><span class="hljs-string">max_line_length</span> <span class="hljs-string">=</span> <span class="hljs-number">80</span><br><span class="hljs-string">trim_trailing_whitespace</span> <span class="hljs-string">=</span> <span class="hljs-literal">true</span><br><br>[<span class="hljs-string">*.md</span>]<br><span class="hljs-string">max_line_length</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><br><span class="hljs-string">trim_trailing_whitespace</span> <span class="hljs-string">=</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>安装插件<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021530202.png"></p><h2 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h2><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> prettier -D<br></code></pre></td></tr></table></figure><p>安装 vscode 中的插件<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021532032.png"><br>新建.prettierrc</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml">&#123;<br>  <span class="hljs-attr">&quot;useTabs&quot;:</span> <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;tabWidth&quot;:</span> <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">&quot;printWidth&quot;:</span> <span class="hljs-number">80</span>,<br>  <span class="hljs-attr">&quot;singleQuote&quot;:</span> <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;trailingComma&quot;:</span> <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-attr">&quot;semi&quot;:</span> <span class="hljs-literal">false</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>新建.prettierignore，排除不需要检测的文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">/build/*</span><br><span class="hljs-string">.local</span><br><span class="hljs-string">.output.js</span><br><span class="hljs-string">/node_modules/**</span><br><br><span class="hljs-string">**/*.svg</span><br><span class="hljs-string">**/*.sh</span><br><br><span class="hljs-string">/public/*</span><br></code></pre></td></tr></table></figure><p>可以使用 npm run prettier ，直接格式化代码<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021535045.png"></p><p>设置成 vscode 默认的格式化<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021536503.png"></p><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>安装</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i eslint -D<br></code></pre></td></tr></table></figure><p>配置<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021539691.png"><br>之后变会自动生成一个配置文件</p><p>添加下面的两行，保证 module.export 不会报错。然后 eslint 和 prettier 的标准保持一致<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021540471.png"><br>打开 vsocode 的设置，可以添加这两行<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021542779.png"></p><p>安装插件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>eslint-plugin-prettier eslint-<span class="hljs-built_in">config</span>-prettier -D<br></code></pre></td></tr></table></figure><p>当不满足标准的时候，就会报错<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202301021543934.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>eslint</tag>
      
      <tag>prettier</tag>
      
      <tag>craco</tag>
      
      <tag>editorconfig</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>minio 经典错误</title>
    <link href="/2022/12/22/minio%20%E7%BB%8F%E5%85%B8%E9%94%99%E8%AF%AF/"/>
    <url>/2022/12/22/minio%20%E7%BB%8F%E5%85%B8%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="minio-：The-difference-between-the-request-time-and-the-server‘s-time-is-too-large"><a href="#minio-：The-difference-between-the-request-time-and-the-server‘s-time-is-too-large" class="headerlink" title="minio ：The difference between the request time and the server‘s time is too large."></a>minio ：The difference between the request time and the server‘s time is too large.</h1><blockquote><p>系统时区与硬件时区不一致导致的<br>使用时间服务器上的时间同步的方法</p></blockquote><p>先下载</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> ntp ntpdate<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>oss</tag>
      
      <tag>minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hololens2 单眼显示问题</title>
    <link href="/2022/08/22/Hololens2%20%E5%8D%95%E7%9C%BC%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/22/Hololens2%20%E5%8D%95%E7%9C%BC%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="法1：使用mrtk自带的shader"><a href="#法1：使用mrtk自带的shader" class="headerlink" title="法1：使用mrtk自带的shader"></a>法1：使用mrtk自带的shader</h1><p>使用MRTK中自带的shader<br><img src="https://img-blog.csdnimg.cn/eb23ebfb6ee6489ab7b5803a9e1bbb76.png" alt="请添加图片描述"></p><h1 id="法2：自定义shader"><a href="#法2：自定义shader" class="headerlink" title="法2：自定义shader"></a>法2：自定义shader</h1><ul><li><p>a2v 中添加 UNITY_VERTEX_INPUT_INSTANCE_ID</p></li><li><p>v2f 中添加 UNITY_VERTEX_OUTPUT_STEREO</p></li><li><p>vert 中添加 </p><p>​UNITY_SETUP_INSTANCE_ID(v); &#x2F;&#x2F;Insert<br>​        UNITY_INITIALIZE_OUTPUT(v2f, o); &#x2F;&#x2F;Insert<br>​        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o); &#x2F;&#x2F;Insert</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash">Shader <span class="hljs-string">&quot;JaffHan/Wireframe&quot;</span> &#123;<br>Properties &#123;<br>        _Color(<span class="hljs-string">&quot;Color&quot;</span>,Color)=(1.0,1.0,1.0,1.0)<br>        _EdgeColor(<span class="hljs-string">&quot;Edge Color&quot;</span>,Color)=(1.0,1.0,1.0,1.0)<br>        _Width(<span class="hljs-string">&quot;Width&quot;</span>,Range(0,1))=0.2<br>    &#125;<br>SubShader &#123;<br><br>    Pass &#123;<br>    CGPROGRAM<br>    <span class="hljs-comment">#pragma vertex vert</span><br>    <span class="hljs-comment">#pragma fragment frag</span><br>    <span class="hljs-comment">#pragma target 3.0</span><br>    <span class="hljs-comment">#include &quot;UnityCG.cginc&quot;</span><br>    <br><br>    struct a2v &#123;<br>        half4 uv : TEXCOORD0 ;<br>        half4 vertex : POSITION ;<br>        UNITY_VERTEX_INPUT_INSTANCE_ID //Insert<br>    &#125;;<br><br>    struct v2f&#123;<br>        half4 pos : SV_POSITION ;<br>        half4 uv : TEXCOORD0  ;<br>        UNITY_VERTEX_OUTPUT_STEREO //Insert<br>    &#125;;<br>    fixed4 _Color;<br>    fixed4 _EdgeColor;<br>    <span class="hljs-built_in">float</span> _Width;<br>    <br>    v2f vert(a2v v)<br>    &#123;<br>        v2f o;<br>        UNITY_SETUP_INSTANCE_ID(v); //Insert<br>        UNITY_INITIALIZE_OUTPUT(v2f, o); //Insert<br>        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o); //Insert<br>        o.uv = v.uv;<br>        o.pos=UnityObjectToClipPos(v.vertex);<br>        <span class="hljs-built_in">return</span> o;<br>    &#125;<br><br><br>    fixed4 frag(v2f i) : COLOR<br>    &#123;<br>        fixed4 col;<br>        <span class="hljs-built_in">float</span> lx = step(_Width, i.uv.x);<br>        <span class="hljs-built_in">float</span> ly = step(_Width, i.uv.y);<br>        <span class="hljs-built_in">float</span> hx = step(i.uv.x, 1.0 - _Width);<br>        <span class="hljs-built_in">float</span> hy = step(i.uv.y, 1.0 - _Width);<br>        col = lerp(_EdgeColor, _Color, lx*ly*hx*hy);<br>        <span class="hljs-built_in">return</span> col;<br>    &#125;<br>    ENDCG<br>    &#125;<br>&#125; <br>    FallBack <span class="hljs-string">&quot;Diffuse&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hololens2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hololens2</tag>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hololens2 开发常见问题</title>
    <link href="/2022/05/09/Hololens2%20%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/09/Hololens2%20%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="1-未能使用-通用身份验证…"><a href="#1-未能使用-通用身份验证…" class="headerlink" title="1 未能使用 通用身份验证….."></a>1 未能使用 通用身份验证…..</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/1aca0d2ca0fa80215d3040db01bf26e8.png" alt="image.png"></p><h3 id="解决办法-大概率是usb连接未装"><a href="#解决办法-大概率是usb连接未装" class="headerlink" title="解决办法 (大概率是usb连接未装)"></a>解决办法 (大概率是usb连接未装)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e9fe54810bab322d1b7d6b758f122f2a.png" alt="image.png"></p><h2 id="2-缺少pdb"><a href="#2-缺少pdb" class="headerlink" title="2 缺少pdb"></a>2 缺少pdb</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/ce7f02749d5c640755fb0e0a28995f2b.png" alt="image.png"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>….. 至今不知道</p><h2 id="3-模型位置显示不正确的问题"><a href="#3-模型位置显示不正确的问题" class="headerlink" title="3 模型位置显示不正确的问题"></a>3 模型位置显示不正确的问题</h2><ul><li>1、Vuforia识别图上传时必须与实际打印的识别图的size一致。比如实际尺寸是10cm，那么上传时的width应该设置为0.1（Unity以米为单位）。</li><li>2、ARcamera 的 position 必须设置为（0，0，0）。<br>其他的关于模型不显示的问题，要么是显示了但不在识别码上，所以你看不到。要么就是你发布到Hololens的流程有问题，可能是某个选项忘记勾选了。</li></ul><h2 id="4-模型出现后，不消失"><a href="#4-模型出现后，不消失" class="headerlink" title="4 模型出现后，不消失"></a>4 模型出现后，不消失</h2><p>做此处的修改，此处为ImageTarget中自带的脚本<br><img src="https://img-blog.csdnimg.cn/img_convert/ec3735a097b9f2348c2712d936e328e2.png" alt="image.png"></p><h2 id="5-部署的时候出现-找不到-SDK“WindowsMobile-Version-x3D-10-0-18362-0”。"><a href="#5-部署的时候出现-找不到-SDK“WindowsMobile-Version-x3D-10-0-18362-0”。" class="headerlink" title="5 部署的时候出现:找不到 SDK“WindowsMobile, Version&#x3D;10.0.18362.0”。"></a>5 部署的时候出现:找不到 SDK“WindowsMobile, Version&#x3D;10.0.18362.0”。</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/5d027cc7d783086b44c19203a05ce533.png" alt="image.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/272c6141d1ddabc0f4cbc88929d9ad6f.png" alt="image.png"></p><h2 id="6-打包后只出现左眼的问题"><a href="#6-打包后只出现左眼的问题" class="headerlink" title="6 打包后只出现左眼的问题"></a>6 打包后只出现左眼的问题</h2><p>在使用Hololens 2显示自己编写的Shader时，上传会出现只有左眼能看到，但是右眼看不到的问题。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/063afb276030b5b9d7c94a225bdc1299.png" alt="image.png"></p><h2 id="7-openxr中hololens灰色"><a href="#7-openxr中hololens灰色" class="headerlink" title="7.openxr中hololens灰色"></a>7.openxr中hololens灰色</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/8d6bbba05d76f08d1ebe439a7a151ca8.png" alt="image.png"></p><p>重新装一下openxr ,大概率直接没装或者一不小心被你删除了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f844e21513b0260e33f70f73c5042371.png" alt="image.png"></p><h2 id="8-激活-Windows-应用商店应用“Template3D-pzq3xp76mxafg-App”失败，错误为“拒绝访问”"><a href="#8-激活-Windows-应用商店应用“Template3D-pzq3xp76mxafg-App”失败，错误为“拒绝访问”" class="headerlink" title="8 激活 Windows 应用商店应用“Template3D_pzq3xp76mxafg!App”失败，错误为“拒绝访问”"></a>8 激活 Windows 应用商店应用“Template3D_pzq3xp76mxafg!App”失败，错误为“拒绝访问”</h2><p>hololens 没解锁，息屏了</p><h2 id="9-读取本地文件失败"><a href="#9-读取本地文件失败" class="headerlink" title="9 读取本地文件失败"></a>9 读取本地文件失败</h2><p>从我目前了解的情况看，貌似只支持在hololens2那几个文件夹中读取</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f0aca104e35036f06cea73cdcb124af0.png" alt="2adbf16298a6c3ba4d5ed56877b2f9b.png"><br>打勾权限</p><p><img src="https://img-blog.csdnimg.cn/img_convert/94247777b2b42f0ac6c4a458685ad6fe.png" alt="cbe3ffdc37f021d5e5a53d29019fee3.png"></p><h2 id="json解析"><a href="#json解析" class="headerlink" title="json解析"></a>json解析</h2><p>使用simplejson</p>]]></content>
    
    
    <categories>
      
      <category>hololens2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hololens2</tag>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>photon pun2 设置中国区</title>
    <link href="/2022/05/09/photon%20pun2%20%E8%AE%BE%E7%BD%AE%E4%B8%AD%E5%9B%BD%E5%8C%BA/"/>
    <url>/2022/05/09/photon%20pun2%20%E8%AE%BE%E7%BD%AE%E4%B8%AD%E5%9B%BD%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="photon-网址"><a href="#photon-网址" class="headerlink" title="photon 网址"></a>photon 网址</h1><blockquote><p><a href="https://dashboard.photonengine.com/zh-CN">https://dashboard.photonengine.com/zh-CN</a></p></blockquote><p>先创建一个app，这里的appid等等会用到</p><h1 id="中国区"><a href="#中国区" class="headerlink" title="中国区"></a>中国区</h1><blockquote><p><a href="https://vibrantlink.com/">https://vibrantlink.com/</a></p></blockquote><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>访问中国区官网<br><img src="https://img-blog.csdnimg.cn/b9f969e416a64e9cba78ddc29a1ff3e4.png" alt="在这里插入图片描述"><br>填写信息，填写之前复制的appid，一般两个工作日<br><img src="https://img-blog.csdnimg.cn/2862745f18c14acab7f8e67e916e1ffb.png" alt="在这里插入图片描述"><br>从unity商店中导入pun2<br><img src="https://img-blog.csdnimg.cn/4270a71d9e474ca7b277016cece51170.png" alt="在这里插入图片描述"></p><h1 id="修改信息"><a href="#修改信息" class="headerlink" title="修改信息"></a>修改信息</h1><p>填写appid（邮件回复的id）<br><img src="https://img-blog.csdnimg.cn/2119ceeb2a5b4543a3b5ab276173e99b.png" alt="在这里插入图片描述"><br>搜索LoadBalancingClient.cs<br><img src="https://img-blog.csdnimg.cn/5ba4e80917e543c5b05321a085cbdb56.png" alt="在这里插入图片描述"></p><p>修改 NameServerHost， 由 ns.exitgames.io 改为 ns.photonengine.cn;<br><img src="https://img-blog.csdnimg.cn/e27dc1c9705d45d9a34acd2760142746.png" alt="在这里插入图片描述"><br> PhotonServerSettings 的 Fixed Region 设置为 cn;<br><img src="https://img-blog.csdnimg.cn/9242ecd02fd24b2a818ab96e4bfff7b5.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/43e2789663054234aafb4b814f22cdff.png" alt="在这里插入图片描述"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>可以将配置文件的日志打开，载入自带的demo<br><img src="https://img-blog.csdnimg.cn/000c74a18cd846509213834b7a7672e4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3d791f6937474fc892adc2487cad7dca.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>pun2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot时间格式化</title>
    <link href="/2021/08/13/SpringBoot%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/2021/08/13/SpringBoot%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h1><blockquote><p>java8推出了LocalDateTime 所以不太推荐使用Date了</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">spring.jackson.date-format</span> <span class="hljs-string">=yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss</span><br><span class="hljs-string">spring.jackson.time-zone=GMT+8</span><br></code></pre></td></tr></table></figure><h1 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">jackson:</span><br>      <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss</span><br>      <span class="hljs-attr">time-zone:</span> <span class="hljs-string">GMT+8</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.shoukailiang.community.edu.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shoukailiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/6 16:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalDateTimeSerializerConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.jackson.date-format&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String pattern;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LocalDateTimeSerializer <span class="hljs-title function_">localDateTimeDeserializer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(pattern));<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="hljs-title function_">jackson2ObjectMapperBuilderCustomizer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> builder -&gt; builder.serializerByType(LocalDateTime.class, localDateTimeDeserializer());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CyclicBarrier知识点提要</title>
    <link href="/2021/08/13/CyclicBarrier%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8F%90%E8%A6%81/"/>
    <url>/2021/08/13/CyclicBarrier%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8F%90%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<h1 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>和CountDownLatch相反，需要集齐七颗龙珠，召唤神龙。也就是做加法，开始是0，加到某个值的时候就执行</p><p>CyclicBarrier的字面意思就是可循环（cyclic）使用的屏障（Barrier）。它要求做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await方法</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>集齐7个龙珠，召唤神龙的Demo，我们需要首先创建CyclicBarrier</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 定义一个循环屏障，参数1：需要累加的值，参数2 需要执行的方法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cyclicBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">7</span>, () -&gt; &#123;<br>  System.out.println(<span class="hljs-string">&quot;召唤神龙许愿---------------&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后同时编写七个线程，进行龙珠收集，但一个线程收集到了的时候，我们需要让他执行await方法，等待到7个线程全部执行完毕后，我们就执行原来定义好的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 收集到 第&quot;</span> + temp + <span class="hljs-string">&quot;颗龙珠&quot;</span>);<br>​<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 先到的被阻塞，等全部线程完成后，才能执行方法</span><br>            cyclicBarrier.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;, String.valueOf(i)).start();<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br>​<br><span class="hljs-keyword">import</span> java.util.concurrent.BrokenBarrierException;<br><span class="hljs-keyword">import</span> java.util.concurrent.CyclicBarrier;<br>​<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shoukailiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/7 18:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CyclicBarrierDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cyclicBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">7</span>, () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;召唤神龙许愿---------------&quot;</span>);<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 收集到第&quot;</span> + temp + <span class="hljs-string">&quot;颗龙珠&quot;</span>);<br>​<br>                <span class="hljs-keyword">try</span> &#123;<br>                    cyclicBarrier.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br>​<br></code></pre></td></tr></table></figure><p>\</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>CyclicBarrier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ForkJoin知识点提要</title>
    <link href="/2021/08/13/ForkJoin%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8F%90%E8%A6%81/"/>
    <url>/2021/08/13/ForkJoin%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8F%90%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<p>一句话总结:把大任务拆分为小任务</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031248820.png" alt="image.png"></p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p>1加到10_0000_0000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shoukailiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/8 17:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkJoinDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Long&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Long start;<br>    <span class="hljs-keyword">private</span> Long end;<br><br>    <span class="hljs-comment">// 临界值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Long</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ForkJoinDemo</span><span class="hljs-params">(Long start, Long end)</span> &#123;<br>        <span class="hljs-built_in">this</span>.start = start;<br>        <span class="hljs-built_in">this</span>.end = end;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Long <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> ((end-start)&lt;temp)&#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">Long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++) &#123;<br>                sum += i;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// forkjoin 递归</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> (start + end) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 中间值</span><br>            <span class="hljs-type">ForkJoinDemo</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(start, middle);<br>            task1.fork(); <span class="hljs-comment">// 拆分任务，把任务压入线程队列</span><br>            <span class="hljs-type">ForkJoinDemo</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(middle+<span class="hljs-number">1</span>, end);<br>            task2.fork(); <span class="hljs-comment">// 拆分任务，把任务压入线程队列</span><br>            <span class="hljs-keyword">return</span> task1.join() + task2.join();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三种方法对比测试"><a href="#三种方法对比测试" class="headerlink" title="三种方法对比测试"></a>三种方法对比测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFork</span>&#123;<br>    <span class="hljs-comment">// 循环计算</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>; i &lt;= <span class="hljs-number">10_0000_0000</span>; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum+<span class="hljs-string">&quot; 时间：&quot;</span>+(end-start));<br>    &#125;<br>    <span class="hljs-comment">//ForkJoin</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">forkJoinPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>();<br>        <span class="hljs-type">ForkJoinDemo</span> <span class="hljs-variable">forkJoinDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(<span class="hljs-number">0L</span>, <span class="hljs-number">10_0000_0000L</span>);<br>        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(forkJoinDemo);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">sum</span>  <span class="hljs-operator">=</span> submit.get();<span class="hljs-comment">// 获得结果</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum+<span class="hljs-string">&quot; 时间：&quot;</span>+(end-start));<br>    &#125;<br>    <span class="hljs-comment">// 并行流</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">// Stream并行流 ()  (]</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> LongStream<br>                .rangeClosed(<span class="hljs-number">0L</span>, <span class="hljs-number">10_0000_0000L</span>) <span class="hljs-comment">// 计算范围(,]</span><br>                .parallel() <span class="hljs-comment">// 并行计算</span><br>                .reduce(<span class="hljs-number">0</span>, Long::sum); <span class="hljs-comment">// 输出结果</span><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+<span class="hljs-string">&quot;时间：&quot;</span>+(end-start));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>         test1();<br>         test2();<br>         test3();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">sum</span><span class="hljs-operator">=</span><span class="hljs-number">500000000500000000</span> 时间：<span class="hljs-number">6776</span><br><span class="hljs-attribute">sum</span><span class="hljs-operator">=</span><span class="hljs-number">500000000500000000</span> 时间：<span class="hljs-number">5497</span><br><span class="hljs-attribute">sum</span><span class="hljs-operator">=</span><span class="hljs-number">500000000500000000</span> 时间：<span class="hljs-number">79</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>高并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hololens2调用深度相机和前置摄像头</title>
    <link href="/2021/08/04/hololens2%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E7%9B%B8%E6%9C%BA%E5%92%8C%E5%89%8D%E7%BD%AE%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    <url>/2021/08/04/hololens2%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E7%9B%B8%E6%9C%BA%E5%92%8C%E5%89%8D%E7%BD%AE%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://github.com/microsoft/HoloLens2ForCV">microsoft&#x2F;HoloLens2ForCV: Sample code and documentation for using the Microsoft HoloLens 2 for Computer Vision research. (github.com)</a></p><p>此为官方demo<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031247846.png" alt="image.png"></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031247626.png" alt="image.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/scy261983626/article/details/108685000">Hololens2初入——调用深度相机和前置摄像头的Demo_scy261983626的博客-CSDN博客</a><br><a href="https://blog.csdn.net/scy261983626/article/details/116381193">Hololens2初入——解决HL真机到PC图像传输的实时性问题_scy261983626的博客-CSDN博客</a><br><a href="https://blog.csdn.net/scy261983626/article/details/116381193">Hololens2初入——解决HL真机到PC图像传输的实时性问题_scy261983626的博客-CSDN博客</a><br><a href="https://blog.csdn.net/scy261983626/article/details/115255799">Hololens2 初入——获取彩色和深度图像数据流，并传递到程序中（不是网页浏览）_scy261983626的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>hololens2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hololens2</tag>
      
      <tag>unity</tag>
      
      <tag>深度相机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdk11 发现不能用var</title>
    <link href="/2021/08/04/jdk11%20%E5%8F%91%E7%8E%B0%E4%B8%8D%E8%83%BD%E7%94%A8var/"/>
    <url>/2021/08/04/jdk11%20%E5%8F%91%E7%8E%B0%E4%B8%8D%E8%83%BD%E7%94%A8var/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031243327.png" alt="image.png"></p><h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031243862.png" alt="image.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031243053.png" alt="image.png"></p><h1 id="springBoot设置了还出错"><a href="#springBoot设置了还出错" class="headerlink" title="springBoot设置了还出错"></a>springBoot设置了还出错</h1><p>重新clean一遍</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 子线程调用主线程</title>
    <link href="/2021/08/04/Unity%20%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%BB%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/08/04/Unity%20%E5%AD%90%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%BB%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>在Unity中，子线程是无法调用Unity主线程的API的，因为unity不允许这么干。例如在线程中使用gameObject.setActive(false).</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031241251.png" alt="image.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/107698641">https://zhuanlan.zhihu.com/p/107698641</a></p>]]></content>
    
    
    <categories>
      
      <category>unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openfeign bug记录</title>
    <link href="/2021/08/03/openfeign%20bug%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/08/03/openfeign%20bug%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>第二次遇到了…..记录一下</p></blockquote><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031238980.png" alt="image.png"><br>看了下目录结构</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031238005.png" alt="image.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031239832.png" alt="image.png"><br>将主类和edu同层此就好了</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031239719.png" alt="image.png"><br>…….太僵硬了</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>openfeign</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea中tomcat乱码</title>
    <link href="/2021/08/03/idea%E4%B8%ADtomcat%E4%B9%B1%E7%A0%81/"/>
    <url>/2021/08/03/idea%E4%B8%ADtomcat%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>在springmvc中，idea中tomcat乱码</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031235794.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-Dfile.encoding=utf-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031236082.png" alt="image.png"></p><ul><li><h4 id="HELP-gt-Edit-Custom-VM-OPtions中加-Dfile-encoding-x3D-utf-8-重启idea"><a href="#HELP-gt-Edit-Custom-VM-OPtions中加-Dfile-encoding-x3D-utf-8-重启idea" class="headerlink" title="HELP-&gt;Edit Custom VM OPtions中加 -Dfile.encoding&#x3D;utf-8 重启idea"></a>HELP-&gt;Edit Custom VM OPtions中加 -Dfile.encoding&#x3D;utf-8 重启idea</h4></li><li><h4 id="把Tomcat中-server-xml：在-标签中添加-URIEncoding-x3D-“UTF-8”"><a href="#把Tomcat中-server-xml：在-标签中添加-URIEncoding-x3D-“UTF-8”" class="headerlink" title="把Tomcat中 server.xml：在 标签中添加 URIEncoding&#x3D;“UTF-8”"></a>把Tomcat中 server.xml：在 标签中添加 URIEncoding&#x3D;“UTF-8”</h4></li></ul><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202212031236967.png" alt="image.png"><br>然后重启电脑，可以解决乱码问题</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装mysql，redis</title>
    <link href="/2021/08/03/docker%E5%AE%89%E8%A3%85mysql%EF%BC%8Credis/"/>
    <url>/2021/08/03/docker%E5%AE%89%E8%A3%85mysql%EF%BC%8Credis/</url>
    
    <content type="html"><![CDATA[<blockquote><p>以centos7为例</p></blockquote><h1 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1.卸载旧版本</span><br> yum remove docker \<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">                  docker-client \</span><br><span class="language-bash">&gt;                   docker-client-latest \</span><br><span class="language-bash">&gt;                   docker-common \</span><br><span class="language-bash">&gt;                   docker-latest \</span><br><span class="language-bash">&gt;                   docker-latest-logrotate \</span><br><span class="language-bash">&gt;                   docker-logrotate \</span><br><span class="language-bash">&gt;                   docker-engine</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.需要的安装包</span><br>yum install -y yum-utils<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.设置镜像的仓库</span><br>yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">上述方法默认是从国外的，不推荐</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">推荐使用国内的</span><br>yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更新软件包索引</span><br>yum makecache fast<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4.安装docker docker-ce 社区版 而ee是企业版</span><br>yum install docker-ce docker-ce-cli containerd.io # 这里我们使用社区版即可<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5.启动docker</span><br>systemctl start docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">6.使用docker version 查看是否安装成功</span><br>docker version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">7.测试</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><h1 id="mysql8的安装"><a href="#mysql8的安装" class="headerlink" title="mysql8的安装"></a>mysql8的安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search mysql<br>docker pull mysql<br>docker images<br>cd /opt<br>mkdir mysql_docker<br>cd mysql_docker<br>echo $PWD<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282232851.png" alt="image.png"></p><blockquote><p>运行</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --name mysqlserver -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/conf:/</span>etc<span class="hljs-regexp">/mysql/</span>conf.d -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/logs:/</span>logs -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/my</span>sql -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> -d -i -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> mysql:latest<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282232479.png" alt="image.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282232582.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mysqlserver bash<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282233033.png" alt="image.png"></p><h2 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">use mysql;<br><br>select host,user from user;<br><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br><br>flush privileges;<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282233302.png" alt="image.png"></p><h1 id="mysql-5-7"><a href="#mysql-5-7" class="headerlink" title="mysql 5.7"></a>mysql 5.7</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>创建实例并启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行</span><br>sudo docker run -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> --name mysql \<br>-v <span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/log:/</span>var<span class="hljs-regexp">/log/my</span>sql \<br>-v <span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/my</span>sql \<br>-v <span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/conf:/</span>etc/mysql \<br>-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> \<br>-d mysql:<span class="hljs-number">5.7</span><br><span class="hljs-comment">####</span><br>-v 将对应文件挂载到主机<br>-e 初始化对应<br>-p 容器端口映射到主机的端口<br></code></pre></td></tr></table></figure><p>MySQL 配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/conf/my</span>.cnf 创建&amp;修改该文件<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[client]<br><span class="hljs-keyword">default</span>-<span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>=utf8<br>[mysql]<br><span class="hljs-keyword">default</span>-<span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>=utf8<br>[mysqld]<br>init_connect=<span class="hljs-string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8&#x27;</span><br><span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>-<span class="hljs-keyword">server</span>=utf8<br><span class="hljs-keyword">collation</span>-<span class="hljs-keyword">server</span>=utf8_unicode_ci<br>skip-<span class="hljs-type">character</span>-<span class="hljs-keyword">set</span>-client-handshake<br>skip-<span class="hljs-type">name</span>-resolve<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282233544.png" alt="image.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282234220.png" alt="image.png"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker restart mysql</span><br></code></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>下载镜像文件<br>docker pull redis<br>docker pull redis:6.0<br>创建实例并启动<br> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/mydata/</span>redis/conf<br>touch <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/conf/</span>redis.conf<br></code></pre></td></tr></table></figure></p><p>启动 同时 映射到对应文件夹,后面 \ 代表换行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> --name redis \<br>-v <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/data:/</span>data \<br>-v <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/conf/</span>redis.conf:<span class="hljs-regexp">/etc/</span>redis/redis.conf \<br>-d redis redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>6.0</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> --name redis6.<span class="hljs-number">0</span> \<br>-v <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/data:/</span>data \<br>-v <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/conf/</span>redis.conf:<span class="hljs-regexp">/etc/</span>redis/redis.conf \<br>-d redis:<span class="hljs-number">6.0</span> redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">使用 redis 镜像执行 redis-<span class="hljs-keyword">cli</span> 命令连接<br>docker exec -it redis redis-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>持久化 默认 appendonly on 没有开启</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/conf/</span>redis.conf<br></code></pre></td></tr></table></figure><p>插入下面内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">appendonly</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282234311.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>redis</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vs配置openGL</title>
    <link href="/2021/05/17/vs%E9%85%8D%E7%BD%AEopenGL/"/>
    <url>/2021/05/17/vs%E9%85%8D%E7%BD%AEopenGL/</url>
    
    <content type="html"><![CDATA[<h1 id="安装vs"><a href="#安装vs" class="headerlink" title="安装vs"></a>安装vs</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282227704.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282227677.png" alt="在这里插入图片描述"></p><h1 id="glew"><a href="#glew" class="headerlink" title="glew"></a>glew</h1><p>下载地址：<a href="http://glew.sourceforge.net/">http://glew.sourceforge.net/</a><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282227589.png" alt="在这里插入图片描述"></p><h1 id="glfw"><a href="#glfw" class="headerlink" title="glfw"></a>glfw</h1><p>下载地址：<a href="https://www.glfw.org/">https://www.glfw.org/</a><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282228558.png" alt="在这里插入图片描述"></p><h1 id="新建一个空白项目"><a href="#新建一个空白项目" class="headerlink" title="新建一个空白项目"></a>新建一个空白项目</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282228685.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282228239.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282229921.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282229145.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282230556.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282230537.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282230265.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vs配置openGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot常见问题</title>
    <link href="/2021/04/22/springboot%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/22/springboot%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Method-annotated-with-Bean-is-called-directly-Use-dependency-injection-instead"><a href="#Method-annotated-with-Bean-is-called-directly-Use-dependency-injection-instead" class="headerlink" title="Method annotated with @Bean is called directly. Use dependency injection instead."></a>Method annotated with @Bean is called directly. Use dependency injection instead.</h1><p>未添加@Configuration注解，导致@Bean之间相互调用出错</p><p>因此把类名上面增加@Configuration注解即可解决。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spingboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea 自用快捷键</title>
    <link href="/2021/04/21/idea%20%E8%87%AA%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/04/21/idea%20%E8%87%AA%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>ctrl+alt+b当前接口的实现类有哪些</p><p>ctrl+h打开当前类的实现类窗口</p><p>Ctrl+Alt+M选中代码抽取为一个方法</p><p>Ctrl+单击方法或类，进入到父类中</p><p>Ctrl+Alt+单击方法或类，进入到子类中</p><p>双击Shift键，框中直接搜你想搜的类或者方法</p><p>搜索本项目中的方法或者配置信息中的内容Ctrl+ Shift+ F（注意会和qq快捷键冲突）</p><p>Ctrl+N输入要搜索的类，想搜索的类包括在jar里面，需要勾选“include non—project itms”选项，就可以搜索出来</p><p>Intellij idea中查看当前类中所有方法 ctrl+7</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue前后端分离-设置请求代理</title>
    <link href="/2021/04/20/vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%90%86/"/>
    <url>/2021/04/20/vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>      <span class="hljs-attr">port</span>: <span class="hljs-number">6001</span>, <span class="hljs-comment">// 端口号，如果端口号被占用，会自动提升1</span><br>      <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-comment">//主机名</span><br>      <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//协议</span><br>      <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//启动服务时自动打开浏览器访问</span><br>      <span class="hljs-attr">proxy</span>: &#123; <span class="hljs-comment">// 开发环境代理配置</span><br>          <span class="hljs-string">&quot;/dev-api&quot;</span> :&#123;  <span class="hljs-comment">// &#x27;/dev-api&#x27;: &#123;</span><br>              <span class="hljs-comment">// 目标服务器地址</span><br>              <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>              <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启代理服务器，</span><br>              <span class="hljs-attr">pathRewrite</span>: &#123;<br>                  <span class="hljs-string">&#x27;^dev-api&#x27;</span> :<span class="hljs-string">&#x27;&#x27;</span><br>              &#125;<br>          &#125;<br>      &#125;<br>  &#125;,<br><br>  <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭格式检查</span><br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 打包时不会生成 .map 文件，加快打包速度 </span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="安装请求库"><a href="#安装请求库" class="headerlink" title="安装请求库"></a>安装请求库</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install axios --save<br></code></pre></td></tr></table></figure><h2 id="request-js工具类"><a href="#request-js工具类" class="headerlink" title="request.js工具类"></a>request.js工具类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;/dev-api&quot;</span>, <br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span> <span class="hljs-comment">// request timeout</span><br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br><br><span class="hljs-comment">// 响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123; <br>    <span class="hljs-comment">// 正常响应</span><br>    <span class="hljs-keyword">const</span> res = response.<span class="hljs-property">data</span><br>    <span class="hljs-keyword">return</span> res<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 响应异常</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure><h2 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/request&#x27;</span><br><br><br><span class="hljs-comment">// 查询用户名是否被注册</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserByUsername</span>(<span class="hljs-params">username</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/system/api/user/username/<span class="hljs-subst">$&#123;username&#125;</span>`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue父子组件通信-用.sync修饰符</title>
    <link href="/2021/04/19/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E7%94%A8.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2021/04/19/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E7%94%A8.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="原始方法"><a href="#原始方法" class="headerlink" title="原始方法"></a>原始方法</h1><blockquote><p>App.vue</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Father</span> <span class="hljs-attr">:age</span>=<span class="hljs-string">&quot;age&quot;</span> @<span class="hljs-attr">setage</span>=<span class="hljs-string">&quot;setAge&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Father.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">age</span>:<span class="hljs-string">&quot;18&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Father</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">setAge</span>(<span class="hljs-params">res</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = res;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><blockquote><p>Father.vue</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;&#123;age&#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Father&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">age</span>:<span class="hljs-title class_">String</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;setage&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h1 id="使用-sync修饰符"><a href="#使用-sync修饰符" class="headerlink" title="使用.sync修饰符"></a>使用.sync修饰符</h1><p>这里注意我们的事件名称被换成了update:age</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;&#123;age&#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Father&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">age</span>:<span class="hljs-title class_">String</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;update:age&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot集成swagger</title>
    <link href="/2021/04/19/springboot%E9%9B%86%E6%88%90swagger/"/>
    <url>/2021/04/19/springboot%E9%9B%86%E6%88%90swagger/</url>
    
    <content type="html"><![CDATA[<p>使用国人写的com.spring4all的方式</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spring4all<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="在启动类上增加注解"><a href="#在启动类上增加注解" class="headerlink" title="在启动类上增加注解"></a>在启动类上增加注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableSwagger2Doc</span><br></code></pre></td></tr></table></figure><h1 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#swagger配置</span><br><span class="hljs-attr">swagger:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">OSS服务</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">OSS基础服务API</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">$&#123;project.version&#125;</span><br>  <span class="hljs-attr">base-package:</span> <span class="hljs-string">com.shoukailiang.it_community</span><br>  <span class="hljs-attr">base-path:</span> <span class="hljs-string">/**</span><br>  <span class="hljs-attr">exclude-path:</span> <span class="hljs-string">/error</span><br>  <span class="hljs-attr">authorization:</span><br>    <span class="hljs-attr">key-name:</span> <span class="hljs-string">Authorization</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/a&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value =&quot;获取accesskey&quot; )</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">search</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AliyunProperties</span> <span class="hljs-variable">aliyunProperties</span> <span class="hljs-operator">=</span> articleProperties.getAliyun();<br>        <span class="hljs-keyword">return</span> aliyunProperties.getAccessKeyId();<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282216622.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot-configuration-processor</title>
    <link href="/2021/04/19/spring-boot-configuration-processor/"/>
    <url>/2021/04/19/spring-boot-configuration-processor/</url>
    
    <content type="html"><![CDATA[<p>spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="example"><a href="#example" class="headerlink" title="example"></a>example</h1><p>以阿里云配置为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 阿里云相关配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliyunProperties</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">// 阿里云地域端点</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <span class="hljs-keyword">private</span> String accessKeySecret;<br>    <span class="hljs-comment">// 存储空间名字</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br><br>    <span class="hljs-comment">// Bucket域名 访问文件时作为url前缀</span><br>    <span class="hljs-keyword">private</span> String bucketDomain;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;community.aliyun&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleProperties</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">// 会将 community.article.aliyun 绑定到 AliyunProperties 对象上。</span><br>    <span class="hljs-keyword">private</span> AliyunProperties aliyun;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#  阿里云配置</span><br><span class="hljs-attr">community:</span><br><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">endpoint:</span> <span class="hljs-string">https://oss-cn-hangzhou.aliyuncs.com</span> <span class="hljs-comment"># oss端点</span><br>  <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">ceshi</span><br>  <span class="hljs-attr">accessKeySecret:</span> <span class="hljs-string">ceshi</span><br>  <span class="hljs-attr">bucketName:</span> <span class="hljs-string">ceshi</span><br>  <span class="hljs-comment"># Bucket域名，访问文件时作为URL前缀，注意前面加上 https 和结尾加上</span><br>  <span class="hljs-attr">bucketDomain:</span> <span class="hljs-string">https://ceshi.oss-cn-hangzhou.aliyuncs.com/</span><br> <span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/ceshi</span><br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ArticleProperties articleProperties;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/a&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">search</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AliyunProperties</span> <span class="hljs-variable">aliyunProperties</span> <span class="hljs-operator">=</span> articleProperties.getAliyun();<br>        <span class="hljs-keyword">return</span> aliyunProperties.getAccessKeyId();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282215029.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决远程调用不自动带上访问令牌的拦截器</title>
    <link href="/2021/04/19/%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%B8%A6%E4%B8%8A%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2021/04/19/%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%B8%A6%E4%B8%8A%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决远程调用不自动带上访问令牌的拦截器</span><br><span class="hljs-comment"> * 使用 Feign进行远程调用时，先经过此拦截器，在此拦截器中将请求头带上访问令牌</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> &#123;<br>        <span class="hljs-comment">// 通过RequestContextHolder工具来获取请求相关变量</span><br>        <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span><br>                (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-keyword">if</span>(attributes != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 获取请求对象</span><br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> attributes.getRequest();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(HttpHeaders.AUTHORIZATION);<br>            <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(token)) &#123; <span class="hljs-comment">// Bearer xxx</span><br>                <span class="hljs-comment">// 在使用feign远程调用时，请求头就会带上访问令牌</span><br>                requestTemplate.header(HttpHeaders.AUTHORIZATION, token);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>拦截器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>logback日志</title>
    <link href="/2021/04/16/logback%E6%97%A5%E5%BF%97/"/>
    <url>/2021/04/16/logback%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;clr&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wex&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wEx&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志格式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stdout&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--nacos相关日志级别--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.alibaba.nacos.client&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;ERROR&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;stdout&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h1><p>logback有5种级别，分别是TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR，定义于ch.qos.logback.classic.Level类中。</p><p>Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.</p><p>Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.</p><p>Info:消息在粗粒度级别上突出强调应用程序的运行过程.</p><p>Warn:输出警告及warn以下级别的日志.</p><p>Error:输出错误信息日志.</p><p>此外OFF表示关闭全部日志，ALL表示开启全部日志。</p><p>级别等级<br>等级从低到高分别是TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享一个vue固钉组件</title>
    <link href="/2021/04/13/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AAvue%E5%9B%BA%E9%92%89%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/04/13/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AAvue%E5%9B%BA%E9%92%89%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>element 中没有vue固钉组件 ,而我发下ant-design-vue中做了相应的组件，总不能再element-ui的项目中再使用ant-design-vue吧，所以我抽离了组件出来。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;affix-placeholder&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;wrapStyle&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; affix: affixed &#125;&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styles&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">offset</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">onAffix</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Function</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>) &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">boundary</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">affixed</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">styles</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">affixedClientHeight</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">wrapStyle</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getScroll</span>(<span class="hljs-params">w, top</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> ret = w[<span class="hljs-string">`page<span class="hljs-subst">$&#123;top ? <span class="hljs-string">&quot;Y&quot;</span> : <span class="hljs-string">&quot;X&quot;</span>&#125;</span>Offset`</span>];</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> method = <span class="hljs-string">`scroll<span class="hljs-subst">$&#123;top ? <span class="hljs-string">&quot;Top&quot;</span> : <span class="hljs-string">&quot;Left&quot;</span>&#125;</span>`</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ret !== <span class="hljs-string">&quot;number&quot;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> d = w.<span class="hljs-property">document</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// ie6,7,8 standard mode</span></span></span><br><span class="language-javascript"><span class="language-xml">        ret = d.<span class="hljs-property">documentElement</span>[method];</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ret !== <span class="hljs-string">&quot;number&quot;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// quirks mode</span></span></span><br><span class="language-javascript"><span class="language-xml">          ret = d.<span class="hljs-property">body</span>[method];</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> ret;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getOffset</span>(<span class="hljs-params">element</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> rect = element.<span class="hljs-title function_">getBoundingClientRect</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> clientTop = element.<span class="hljs-property">clientTop</span> || body.<span class="hljs-property">clientTop</span> || <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> clientLeft = element.<span class="hljs-property">clientLeft</span> || body.<span class="hljs-property">clientLeft</span> || <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// const clientHeight = element.clientHeight || 0;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> scrollTop = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getScroll</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-literal">true</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> scrollLeft = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getScroll</span>(<span class="hljs-variable language_">window</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">top</span>: rect.<span class="hljs-property">bottom</span> + scrollTop - clientTop - <span class="hljs-variable language_">this</span>.<span class="hljs-property">affixedClientHeight</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">left</span>: rect.<span class="hljs-property">left</span> + scrollLeft - clientLeft,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleScroll</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> scrollTop = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getScroll</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-literal">true</span>) + <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsets</span>; <span class="hljs-comment">// handle setting offset</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> elementOffset = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getOffset</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">affixed</span> &amp;&amp; scrollTop &gt; elementOffset.<span class="hljs-property">top</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">affixed</span> = <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">styles</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">top</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.offsets&#125;</span>px`</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">left</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;elementOffset.left&#125;</span>px`</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">width</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.$el.offsetWidth&#125;</span>px`</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onAffix</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">affixed</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// if setting boundary</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">boundary</span> &amp;&amp; scrollTop &gt; elementOffset.<span class="hljs-property">top</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">boundary</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (el) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">const</span> boundaryOffset = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getOffset</span>(el);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (scrollTop + <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsets</span> &gt; boundaryOffset.<span class="hljs-property">top</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">const</span> top = scrollTop - boundaryOffset.<span class="hljs-property">top</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">styles</span>.<span class="hljs-property">top</span> = <span class="hljs-string">`-<span class="hljs-subst">$&#123;top&#125;</span>px`</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">affixed</span> &amp;&amp; scrollTop &lt; elementOffset.<span class="hljs-property">top</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">affixed</span> = <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">styles</span> = &#123;&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onAffix</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">affixed</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">affixed</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">boundary</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">boundary</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (el) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">const</span> boundaryOffset = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getOffset</span>(el);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (scrollTop + <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsets</span> &lt;= boundaryOffset.<span class="hljs-property">top</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">styles</span>.<span class="hljs-property">top</span> = <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">offsets</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">boundary</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">offset</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">affixedClientHeight</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientHeight</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">wrapStyle</span> = &#123; <span class="hljs-attr">height</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.affixedClientHeight&#125;</span>px`</span> &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleScroll</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleScroll</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleScroll</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleScroll</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> &gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.affix</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: fixed;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 固钉距离 80px --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">my-affix</span> <span class="hljs-attr">:offset</span>=<span class="hljs-string">&quot;80&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- parentClass 指定文章内容的父元素class值 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">my-directory</span> <span class="hljs-attr">parentClass</span>=<span class="hljs-string">&quot;article-content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">my-affix</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考  <a href="https://2x.antdv.com/components/affix-cn">https://2x.antdv.com/components/affix-cn</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享一个基于element-ui的目录树组件</title>
    <link href="/2021/04/11/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Eelement-ui%E7%9A%84%E7%9B%AE%E5%BD%95%E6%A0%91%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/04/11/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Eelement-ui%E7%9A%84%E7%9B%AE%E5%BD%95%E6%A0%91%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-card</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-card&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-divider</span>&gt;</span>目录<span class="hljs-tag">&lt;/<span class="hljs-name">el-divider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-tree</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 300px; overflow-y: scroll&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tree&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tree&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;directories&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">node-click</span>=<span class="hljs-string">&quot;goAnchor&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">highlight-current</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">default-expand-all</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:expand-on-click-node</span>=<span class="hljs-string">&quot;false&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">node-key</span>=<span class="hljs-string">&quot;id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">icon-class</span>=<span class="hljs-string">&quot;#fff&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">current-change</span>=<span class="hljs-string">&quot;check&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123; node, data &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;data.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-tree-node__label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        &#123;&#123; node.label &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-tree</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-card</span>&gt;</span></span><br>&lt;/template&gt;<br><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">parentClass</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 文章标题的父元素类名</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;article-content&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 挂载页面时，添加监听滚动条，</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 获取文章标题</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDirectories</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleScroll</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 退出页面时，应该取消监听</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleScroll</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">directories</span>: [], <span class="hljs-comment">// 所有h1 h2标题</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getDirectories</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 文章中所有的h1，h2标签</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> titleDomAll = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">`.<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.parentClass&#125;</span> h1, .<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.parentClass&#125;</span> h2`</span></span></span><br><span class="language-javascript"><span class="language-xml">      );</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 循环h1 ，h2标签</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = titleDomAll.<span class="hljs-property">length</span>; i &lt; len; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> el = titleDomAll[i]; <span class="hljs-comment">// 每个元素对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 封装目录对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> dir = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">tagName</span>: el.<span class="hljs-property">tagName</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;mxg-tree-&quot;</span> + i,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">label</span>: el.<span class="hljs-property">innerText</span>, <span class="hljs-comment">// 标签体内容</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">offsetTop</span>: el.<span class="hljs-property">offsetTop</span>, <span class="hljs-comment">//记录当前h1标签距离顶部偏移量，方便后面计算滚动距离。</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">children</span>: [], <span class="hljs-comment">// 存 h2</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (el.<span class="hljs-property">tagName</span> === <span class="hljs-string">&quot;H1&quot;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">directories</span>.<span class="hljs-title function_">push</span>(dir);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">continue</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 获取数组中当前的最后一个元素（h1）数据</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> lastH1 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">directories</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">directories</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 当前是 h2 标签，且上一个是 h1 标签，如果上一个不是 h1 则忽略它</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (el.<span class="hljs-property">tagName</span> === <span class="hljs-string">&quot;H2&quot;</span> &amp;&amp; lastH1 &amp;&amp; lastH1.<span class="hljs-property">tagName</span> === <span class="hljs-string">&quot;H1&quot;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 将 h2 将到 h1 的children中</span></span></span><br><span class="language-javascript"><span class="language-xml">          lastH1.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(dir);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">goAnchor</span>(<span class="hljs-params">data</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 跳转文章锚点位置</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> = data.<span class="hljs-property">offsetTop</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 每次滚动 滚动条调用此方法，标识当前所在的目录项为 isActive=true</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleScroll</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//当前滚动条到顶部距离</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> scrollTop = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 循环出所在目录节点高亮显示</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">directories</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dir, index</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 当前滚动距离大于某一目录项时，则高亮此节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (scrollTop &gt;= dir.<span class="hljs-property">offsetTop</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 设置高量节点</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">tree</span>.<span class="hljs-title function_">setCurrentKey</span>(dir.<span class="hljs-property">id</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 子节点, 以最后满足条件的为高亮节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        dir.<span class="hljs-property">children</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (scrollTop &gt;= child.<span class="hljs-property">offsetTop</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 设置高量节点</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">tree</span>.<span class="hljs-title function_">setCurrentKey</span>(child.<span class="hljs-property">id</span>);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 移动目录滚动条</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> nodeTop = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">tree</span>.<span class="hljs-title function_">getCurrentKey</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        ? <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">tree</span>.<span class="hljs-title function_">getCurrentKey</span>()).<span class="hljs-property">offsetTop</span></span></span><br><span class="language-javascript"><span class="language-xml">        : <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tree&quot;</span>).<span class="hljs-property">scrollTop</span> = nodeTop - <span class="hljs-number">100</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">check</span>(<span class="hljs-params">a, b</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//console.log(&quot;check&quot;, a, b);</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.el-card__body</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-comment">/* 点击后灰色背景色，移动它其他节点时去除这个灰色 */</span></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.el-tree-node</span><span class="hljs-selector-pseudo">:focus</span> &gt; <span class="hljs-selector-class">.el-tree-node__content</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.el-tree--highlight-current</span> <span class="hljs-selector-class">.el-tree-node</span><span class="hljs-selector-class">.is-current</span> &gt; <span class="hljs-selector-class">.el-tree-node__content</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f45154</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- parentClass 指定文章内容的父元素class值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-directory</span> <span class="hljs-attr">parentClass</span>=<span class="hljs-string">&quot;article-content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-directory</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282211706.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elementui</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始化springboot项目超时，解决https://start.spring.io连接不上的问题</title>
    <link href="/2021/04/04/%E5%88%9D%E5%A7%8B%E5%8C%96springboot%E9%A1%B9%E7%9B%AE%E8%B6%85%E6%97%B6/"/>
    <url>/2021/04/04/%E5%88%9D%E5%A7%8B%E5%8C%96springboot%E9%A1%B9%E7%9B%AE%E8%B6%85%E6%97%B6/</url>
    
    <content type="html"><![CDATA[<p>发现<a href="https://start.spring.io很不稳定,可以替换成阿里云的/">https://start.spring.io很不稳定，可以替换成阿里云的</a><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282209334.png" alt="在这里插入图片描述"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282209232.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公钥和私钥的生成</title>
    <link href="/2021/04/02/%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5%E7%9A%84%E7%94%9F%E6%88%90/"/>
    <url>/2021/04/02/%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5%E7%9A%84%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><p>对称加密算法需要两个密钥:公开密钥( publickey简称公钥)和私有密钥( privatekey简称私钥)。<br>公钥与私钥是一对,如果用私钥对数据进行加密,只有用对应的公钥才能解密。<br>jwt令牌生成采用非对称加密</p><h2 id="生成密钥证书"><a href="#生成密钥证书" class="headerlink" title="生成密钥证书"></a>生成密钥证书</h2><ul><li>公私钥对可以使用jdk的命令 keytodl来生成,首先来看下这个命令下有哪些参数<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282207906.png" alt="在这里插入图片描述"></li><li>生成密钥证书文件,每个证书包含公钥和私钥执行以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keytool -genkeypair -<span class="hljs-built_in">alias</span> oauth2 -keyalg RSA -keypass oauth2 -keystore oauth2.jks -storepass oauth2<br></code></pre></td></tr></table></figure><p>别名为 oauth2,秘钥算法为RSA,秘钥口令为 oauth2,秘钥库(文件)名称为 oauth2」ks,秘钥库(文件)口令为 oauth2。输入命令回车后,后面还问题需要<br>最后输入y表示确定.</p><h2 id="根据密钥证书获取公钥"><a href="#根据密钥证书获取公钥" class="headerlink" title="根据密钥证书获取公钥"></a>根据密钥证书获取公钥</h2><p>安装 OpenSSL<br>OpenSSL 是一个加解密工具包，可以使用 OpenSSL 来获取公钥<br>下载网址：<a href="http://slproweb.com/products/Win32OpenSSL.html">http://slproweb.com/products/Win32OpenSSL.html</a></p><p>一直下一步并配置环境变量<br>进入刚刚生成oauth2.jks 的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keytool -list -rfc --keystore oauth2.jks | openssl x509 -inform pem -pubkey<br></code></pre></td></tr></table></figure><p>并输入口令 oauth2 </p><p>就会生成对应的公钥<br>复制打印出来的公钥,注意:-BEGIN PUBLIC KEY-和- END PUBLIC<br>KEY 要带上</p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>公钥</tag>
      
      <tag>秘钥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>game101 作业0</title>
    <link href="/2021/03/29/game101%20%E4%BD%9C%E4%B8%9A0/"/>
    <url>/2021/03/29/game101%20%E4%BD%9C%E4%B8%9A0/</url>
    
    <content type="html"><![CDATA[<h1 id="作业0"><a href="#作业0" class="headerlink" title="作业0"></a>作业0</h1><blockquote><p>给定一个点P &#x3D;(2,1), 将该点绕原点先逆时针旋转45◦，再平移(1,2), 计算出变换后点的坐标（要求用齐次坐标进行计算）。</p></blockquote><p>注：math.h中定义了PI，使用该头文件中的PI可以在#include&lt;math.h&gt;前加上#define _USE_MATH_DEFINES</p><p>逆时针旋转45°，平移（1,2）根据所学，带入公式<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282206341.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;eigen3/Eigen/Core&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;eigen3/Eigen/Dense&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _USE_MATH_DEFINES</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 这里要用齐次坐标，所以变成了（2,1,1）</span><br>    <span class="hljs-function">Eigen::Vector3d <span class="hljs-title">skl</span><span class="hljs-params">(<span class="hljs-number">2.0f</span>,<span class="hljs-number">1.0f</span>,<span class="hljs-number">1.0f</span>)</span></span>;<br>    Eigen::Matrix3d rota;<br>    Eigen::Matrix3d tran;<br>    <span class="hljs-comment">// 弧度制</span><br>    <span class="hljs-type">double</span> theta = <span class="hljs-number">45</span>/<span class="hljs-number">180</span>*M_PI;<br>    rota&lt;&lt;<span class="hljs-built_in">cos</span>(theta),<span class="hljs-number">-1</span>*<span class="hljs-built_in">sin</span>(theta),<span class="hljs-number">0</span>,<br>           <span class="hljs-built_in">sin</span>(theta),<span class="hljs-built_in">cos</span>(theta),<span class="hljs-number">0</span>,<br>           <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br>    tran&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<br>          <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<br>          <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br>    skl = tran*rota*skl;<br>    cout&lt;&lt;skl&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>games101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学笔记一</title>
    <link href="/2021/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <url>/2021/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来自b栈- GAMES101-现代计算机图形学入门-闫令琪</p></blockquote><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p><img src="https://img-blog.csdnimg.cn/20210327105255171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021032711551363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210327115735545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210327115812599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210327120031919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021032712011225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210327120314979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210327125918475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210327130336915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>判断方向&#x3D;》右手螺旋定则，a叉乘b ,四指方向就是a-&gt;b,大拇指方向就是a叉乘b的方向。<br><img src="https://img-blog.csdnimg.cn/20210327130941540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210327131120644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210327131325545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>判断内外？<br><img src="https://img-blog.csdnimg.cn/20210327131539203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>AB叉乘AP是向外的，p在ab的左侧<br>BC叉乘BP也是向外的，p在bc的左侧<br>CA叉乘cp也是向外的，p在ca的左侧<br>那么p在三角形的内部</p><p><img src="https://img-blog.csdnimg.cn/20210327133240290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-2D线性变换"><a href="#1-2D线性变换" class="headerlink" title="1 2D线性变换"></a>1 2D线性变换</h4><p>我们将如下图所示的简单矩阵乘法定义为对向量( x , y ) ^T^ 的线性变换。</p><p><img src="https://img-blog.csdnimg.cn/20200328101945503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDY1NTA5,size_16,color_FFFFFF,t_70/resize,p_40" alt="Alt"></p><h5 id="1-1-缩放-scaling"><a href="#1-1-缩放-scaling" class="headerlink" title="1.1 缩放(scaling)"></a>1.1 缩放(scaling)</h5><p><img src="https://img-blog.csdnimg.cn/20210327224537725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210327224741788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-2-反射"><a href="#1-2-反射" class="headerlink" title="1.2 反射"></a>1.2 反射</h5><p><img src="https://img-blog.csdnimg.cn/20210327225054380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-3-剪切-shearing"><a href="#1-3-剪切-shearing" class="headerlink" title="1.3 剪切(shearing)"></a>1.3 剪切(shearing)</h5><p>shear变换直观理解就是把物体一边固定，然后拉另外一边，定义如下:</p><p><img src="https://img-blog.csdnimg.cn/20200328103919888.png" alt="img"><br><img src="https://img-blog.csdnimg.cn/20210327230342738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-4-旋转-rotation"><a href="#1-4-旋转-rotation" class="headerlink" title="1.4 旋转(rotation)"></a>1.4 旋转(rotation)</h5><p><img src="https://img-blog.csdnimg.cn/20210328112824984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>推导过程：<br><img src="https://img-blog.csdnimg.cn/2021032811435536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210328114532303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-5-平移"><a href="#1-5-平移" class="headerlink" title="1.5 平移"></a>1.5 平移</h4><p><img src="https://img-blog.csdnimg.cn/20210328120032543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210328120045557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>先应用线性变化，再平移</strong><br>因为平移变化不能表示成线性变化的形式，但是人们又想方便，于是引入了齐次坐标。<br><img src="https://img-blog.csdnimg.cn/20210328120534171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过增加一个数1，用来达到平移的效果。<br><img src="https://img-blog.csdnimg.cn/20210328123054645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210328130709133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在齐次坐标的表示下<br><img src="https://img-blog.csdnimg.cn/20210328130826563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用齐次坐标就可以把所有的变化写成统一的形式，代价就是引入了一个额外的数字</p><h4 id="1-6逆变换"><a href="#1-6逆变换" class="headerlink" title="1.6逆变换"></a>1.6逆变换</h4><p><img src="https://img-blog.csdnimg.cn/20210328131227489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-7合成变化"><a href="#1-7合成变化" class="headerlink" title="1.7合成变化"></a>1.7合成变化</h4><p><img src="https://img-blog.csdnimg.cn/20210328131607421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210328131620122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210328132219921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210328132547533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210328132604144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzUwNzI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>games101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阻塞队列</title>
    <link href="/2021/02/22/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    <url>/2021/02/22/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282159001.png" alt="在这里插入图片描述"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列就可以想成是一个数组，从一头进入，一头出去，排队买饭</p><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>BlockingQueue 阻塞队列，排队拥堵，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用大致如下图所示：</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282159099.png" alt="在这里插入图片描述"></p><p>线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素</p><ul><li><code>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞</code><ul><li>当蛋糕店的柜子空的时候，无法从柜子里面获取蛋糕</li></ul></li><li><code>当阻塞队列是满时，从队列中添加元素的操作将会被阻塞</code><ul><li>当蛋糕店的柜子满的时候，无法继续向柜子里面添加蛋糕了</li></ul></li></ul><p>也就是说 试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其它线程往空的队列插入新的元素</p><p>同理，试图往已经满的阻塞队列中添加新元素的线程，直到其它线程往满的队列中移除一个或多个元素，或者完全清空队列后，使队列重新变得空闲起来，并后续新增</p><h2 id="为什么要用？"><a href="#为什么要用？" class="headerlink" title="为什么要用？"></a>为什么要用？</h2><p>去海底捞吃饭，大厅满了，需要进候厅等待，但是这些等待的客户能够对商家带来利润，因此我们非常欢迎他们阻塞</p><p>在多线程领域：所谓的阻塞，在某些清空下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动唤醒</p><h3 id="为什么需要BlockingQueue"><a href="#为什么需要BlockingQueue" class="headerlink" title="为什么需要BlockingQueue"></a>为什么需要BlockingQueue</h3><p>好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都帮你一手包办了</p><p>在concurrent包发布以前，在多线程环境下，我们每个程序员都必须自己取控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p><p><strong>什么情况下我们会使用 阻塞队列?：多线程并发处理，线程池用的较多 ！</strong></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 你用过List集合类<br><br><span class="hljs-regexp">//</span> ArrayList集合类熟悉么？<br><br><span class="hljs-regexp">//</span> 还用过 CopyOnWriteList  和 BlockingQueue<br></code></pre></td></tr></table></figure><p>BlockingQueue阻塞队列是属于一个接口，底下有七个实现类</p><ul><li>ArrayBlockQueue：由数组结构组成的有界阻塞队列</li><li>LinkedBlockingQueue：由链表结构组成的有界（但是默认大小 Integer.MAX_VALUE）的阻塞队列<ul><li>有界，但是界限非常大，相当于无界，可以当成无界</li></ul></li><li>PriorityBlockQueue：支持优先级排序的无界阻塞队列</li><li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列</li><li>SynchronousQueue：不存储元素的阻塞队列，也即单个元素的队列<ul><li>生产一个，消费一个，不存储元素，不消费不生产</li></ul></li><li>LinkedTransferQueue：由链表结构组成的无界阻塞队列</li><li>LinkedBlockingDeque：由链表结构组成的双向阻塞队列</li></ul><p>这里需要掌握的是：ArrayBlockQueue、LinkedBlockingQueue、SynchronousQueue</p><h2 id="BlockingQueue核心方法"><a href="#BlockingQueue核心方法" class="headerlink" title="BlockingQueue核心方法"></a>BlockingQueue核心方法</h2><p><strong>四组API</strong></p><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，不抛出异常</th><th>阻塞 等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检测队首元素</td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table><table><thead><tr><th>抛出异常</th><th>当阻塞队列满时：在往队列中add插入元素会抛出 IIIegalStateException：Queue full 当阻塞队列空时：再往队列中remove移除元素，会抛出NoSuchException</th></tr></thead><tbody><tr><td>特殊性</td><td>插入方法，成功true，失败false 移除方法：成功返回出队列元素，队列没有就返回空</td></tr><tr><td>一直阻塞</td><td>当阻塞队列满时，生产者继续往队列里put元素，队列会一直阻塞生产线程直到put数据or响应中断退出， 当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用。</td></tr><tr><td>超时退出</td><td>当阻塞队列满时，队里会阻塞生产者线程一定时间，超过限时后生产者线程会退出</td></tr></tbody></table><h3 id="抛出异常组"><a href="#抛出异常组" class="headerlink" title="抛出异常组"></a>抛出异常组</h3><p>但执行add方法，向已经满的ArrayBlockingQueue中添加元素时候，会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 阻塞队列，需要填入默认值</span><br>BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br><br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;a&quot;</span>));<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;b&quot;</span>));<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;c&quot;</span>));<br><br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;XXX&quot;</span>));<br></code></pre></td></tr></table></figure><p>运行后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.IllegalStateException: Queue full<br>at java.util.AbstractQueue.add(AbstractQueue.java:<span class="hljs-number">98</span>)<br>at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:<span class="hljs-number">312</span>)<br>at com.moxi.interview.study.queue.BlockingQueueDemo.main(BlockingQueueDemo.java:<span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure><p>同时如果我们多取出元素的时候，也会抛出异常，我们假设只存储了3个值，但是取的时候，取了四次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 阻塞队列，需要填入默认值</span><br>BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;a&quot;</span>));<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;b&quot;</span>));<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;c&quot;</span>));<br><br>System.out.println(blockingQueue.remove());<br>System.out.println(blockingQueue.remove());<br>System.out.println(blockingQueue.remove());<br>System.out.println(blockingQueue.remove());<br></code></pre></td></tr></table></figure><p>那么出现异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br>a<br>b<br>c<br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.util.NoSuchElementException<br>at java.util.AbstractQueue.remove(AbstractQueue.java:<span class="hljs-number">117</span>)<br>at com.moxi.interview.study.queue.BlockingQueueDemo.main(BlockingQueueDemo.java:<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><h3 id="布尔类型组"><a href="#布尔类型组" class="headerlink" title="布尔类型组"></a>布尔类型组</h3><p>我们使用 offer的方法，添加元素时候，如果阻塞队列满了后，会返回false，否者返回true</p><p>同时在取的时候，如果队列已空，那么会返回null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BlockingQueue</span> <span class="hljs-variable">blockingQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>(<span class="hljs-number">3</span>);<br><br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;a&quot;</span>));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;b&quot;</span>));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;c&quot;</span>));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;d&quot;</span>));<br><br>System.out.println(blockingQueue.poll());<br>System.out.println(blockingQueue.poll());<br>System.out.println(blockingQueue.poll());<br>System.out.println(blockingQueue.poll());<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br>a<br>b<br>c<br><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h3 id="阻塞队列组"><a href="#阻塞队列组" class="headerlink" title="阻塞队列组"></a>阻塞队列组</h3><p>我们使用 put的方法，添加元素时候，如果阻塞队列满了后，添加消息的线程，会一直阻塞，直到队列元素减少，会被清空，才会唤醒</p><p>一般在消息中间件，比如RabbitMQ中会使用到，因为需要保证消息百分百不丢失，因此只有让它阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;a&quot;</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;b&quot;</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;c&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;================&quot;</span>);<br><br>blockingQueue.take();<br>blockingQueue.take();<br>blockingQueue.take();<br>blockingQueue.take();<br></code></pre></td></tr></table></figure><p>同时使用take取消息的时候，如果内容不存在的时候，也会被阻塞</p><h3 id="不见不散组"><a href="#不见不散组" class="headerlink" title="不见不散组"></a>不见不散组</h3><p>offer( ) ， poll 加时间</p><p>使用offer插入的时候，需要指定时间，如果2秒还没有插入，那么就放弃插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br></code></pre></td></tr></table></figure><p>同时取的时候也进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(blockingQueue.poll(<span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br>System.out.println(blockingQueue.poll(<span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br>System.out.println(blockingQueue.poll(<span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br>System.out.println(blockingQueue.poll(<span class="hljs-number">2L</span>, TimeUnit.SECONDS));<br></code></pre></td></tr></table></figure><p>如果2秒内取不出来，那么就返回null</p><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue没有容量，与其他BlockingQueue不同，SynchronousQueue是一个不存储的BlockingQueue，每一个put操作必须等待一个take操作，否者不能继续添加元素</p><p>下面我们测试SynchronousQueue添加元素的过程</p><p>首先我们创建了两个线程，一个线程用于生产，一个线程用于消费</p><p>生产的线程分别put了 A、B、C这三个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;();<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;       <br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t put A &quot;</span>);<br>        blockingQueue.put(<span class="hljs-string">&quot;A&quot;</span>);<br>       <br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t put B &quot;</span>);<br>        blockingQueue.put(<span class="hljs-string">&quot;B&quot;</span>);        <br>        <br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t put C &quot;</span>);<br>        blockingQueue.put(<span class="hljs-string">&quot;C&quot;</span>);        <br>        <br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br></code></pre></td></tr></table></figure><p>消费线程使用take，消费阻塞队列中的内容，并且每次消费前，都等待5秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        blockingQueue.take();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t take A &quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        blockingQueue.take();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t take B &quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        blockingQueue.take();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t take C &quot;</span>);<br><br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br></code></pre></td></tr></table></figure><p>最后结果输出为：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">t1</span> put A <br><span class="hljs-built_in">t2</span> take A <br><br><span class="hljs-number">5</span>秒后...<br><br><span class="hljs-built_in">t1</span> put <span class="hljs-keyword">B </span><br><span class="hljs-built_in">t2</span> take <span class="hljs-keyword">B </span><br><br><span class="hljs-number">5</span>秒后...<br><br><span class="hljs-built_in">t1</span> put C <br><span class="hljs-built_in">t2</span> take C <br></code></pre></td></tr></table></figure><p>我们从最后的运行结果可以看出，每次t1线程向队列中添加阻塞队列添加元素后，t1输入线程就会等待 t2消费线程，t2消费后，t2处于挂起状态，等待t1在存入，从而周而复始，形成 一存一取的状态</p><h2 id="阻塞队列的用处"><a href="#阻塞队列的用处" class="headerlink" title="阻塞队列的用处"></a>阻塞队列的用处</h2><h3 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式</h3><p>一个初始值为0的变量，两个线程对其交替操作，一个加1，一个减1，来5轮</p><p>关于多线程的操作，我们需要记住下面几句</p><ul><li>线程 操作 资源类</li><li>判断 干活 通知</li><li>防止虚假唤醒机制</li></ul><blockquote><p>生产者和消费者问题 Synchronized 版</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者消费者 传统版</span><br><span class="hljs-comment"> * 题目：一个初始值为0的变量，两个线程对其交替操作，一个加1，一个减1，来5轮</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程 操作 资源类</span><br><span class="hljs-comment"> * 判断 干活 通知</span><br><span class="hljs-comment"> * 防止虚假唤醒机制</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 资源类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<br><br>            <span class="hljs-comment">// 干活</span><br>            number++;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br><br>            <span class="hljs-comment">// 通知 唤醒</span><br>            <span class="hljs-built_in">this</span>.notifyAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能消费</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<br><br>            <span class="hljs-comment">// 干活</span><br>            number--;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br><br>            <span class="hljs-comment">// 通知 唤醒</span><br>            <span class="hljs-built_in">this</span>.notifyAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProdConsumerTraditionDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 高内聚，低耦合    内聚指的是，一个空调，自身带有调节温度高低的方法</span><br><br>        <span class="hljs-type">ShareData</span> <span class="hljs-variable">shareData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShareData</span>();<br><br>        <span class="hljs-comment">// t1线程，生产</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareData.increment();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-comment">// t2线程，消费</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareData.decrement();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>延伸一问？下面能改成if吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 等待不能消费</span><br>    <span class="hljs-built_in">this</span>.wait();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> 问题存在，A B C D 4 个线程！ 虚假唤醒，解决方法将if换成while</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">假设 number此时等于1，即已经被生产了产品</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">如果这里用的是if判断，如果此时A,C两个生产者线程争夺increment()方法执行权</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">假设A拿到执行权，经过判断number!=0成立，则A.wait()开始等待（wait()会释放锁），然后C试图去执行</span><br><span class="hljs-comment">生产方法，但依然判断number!=0成立，则B.wait()开始等待（wait()会释放锁）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">碰巧这时候消费者线程线程B/D去消费了一个产品，使number=0然后，B/D消费完后调用this.notifyAll();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这时候2个等待中的生产者线程继续生产产品，而此时number++ 执行了2次</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">同理，重复上述过程，生产者线程继续wait()等待，消费者调用this.notifyAll();</span><br><span class="hljs-comment">然后生产者继续超前生产，最终导致‘产能过剩’，即number大于1</span><br><span class="hljs-comment">if(number != 0)&#123;</span><br><span class="hljs-comment">    // 等待</span><br><span class="hljs-comment">    this.wait();</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">while</span> (number != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 注意这里不可以用if 否则会出现虚假唤醒问题，解决方法将if换成while</span><br>    <span class="hljs-comment">// 等待</span><br>    <span class="hljs-built_in">this</span>.wait();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282200444.png"></p><blockquote><p>JUC版的生产者和消费者问题</p></blockquote><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282200879.png" alt="在这里插入图片描述"></p><p>官方文档中通过Lock 找到 Condition</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282201233.png" alt="在这里插入图片描述"></p><p>点入Condition 查看</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282202438.png" alt="在这里插入图片描述"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282202949.png" alt="在这里插入图片描述"></p><p>我们下面实现一个简单的生产者消费者模式，首先有资源类ShareData</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 资源类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                condition.await();<br>            &#125;<br><br>            <span class="hljs-comment">// 干活</span><br>            number++;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br><br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能消费</span><br>                condition.await();<br>            &#125;<br><br>            <span class="hljs-comment">// 干活</span><br>            number--;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br><br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>里面有一个number变量，同时提供了increment 和 decrement的方法，分别让number 加1和减1</p><p>但是我们在进行判断的时候，为了防止出现虚假唤醒机制，不能使用if来进行判断，而应该使用while</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断</span><br><span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 等待不能生产</span><br>    condition.await();<br>&#125;<br></code></pre></td></tr></table></figure><p>不能使用 if判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断</span><br><span class="hljs-keyword">if</span>(number != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 等待不能生产</span><br>    condition.await();<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者消费者 传统版</span><br><span class="hljs-comment"> * 题目：一个初始值为0的变量，两个线程对其交替操作，一个加1，一个减1，来5轮</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程 操作 资源类</span><br><span class="hljs-comment"> * 判断 干活 通知</span><br><span class="hljs-comment"> * 防止虚假唤醒机制</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 资源类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                condition.await();<br>            &#125;<br><br>            <span class="hljs-comment">// 干活</span><br>            number++;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br><br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能消费</span><br>                condition.await();<br>            &#125;<br><br>            <span class="hljs-comment">// 干活</span><br>            number--;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br><br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProdConsumerTraditionDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 高内聚，低耦合    内聚指的是，一个空调，自身带有调节温度高低的方法</span><br><br>        <span class="hljs-type">ShareData</span> <span class="hljs-variable">shareData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShareData</span>();<br><br>        <span class="hljs-comment">// t1线程，生产</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareData.increment();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-comment">// t2线程，消费</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareData.decrement();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后运行成功后，我们一个进行生产，一个进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">t1 <span class="hljs-number">1</span><br>t2 <span class="hljs-number">0</span><br>t1 <span class="hljs-number">1</span><br>t2 <span class="hljs-number">0</span><br>t1 <span class="hljs-number">1</span><br>t2 <span class="hljs-number">0</span><br>t1 <span class="hljs-number">1</span><br>t2 <span class="hljs-number">0</span><br>t1 <span class="hljs-number">1</span><br>t2 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>任何一个新的技术，绝对不是仅仅只是覆盖了原来的技术，是有其对旧技术的优势和补充！</strong></p><blockquote><p>Condition 精准的通知和唤醒线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 资源类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareData</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition1</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition2</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition3</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">thisOne</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printA</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(thisOne != <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                condition1.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;AAAAAAA&quot;</span>);<br>            <span class="hljs-comment">// 干活</span><br>            <span class="hljs-comment">// 唤醒，唤醒指定的人，B</span><br>            thisOne = <span class="hljs-number">2</span>;<br>            condition2.signal();<span class="hljs-comment">//</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printB</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(thisOne != <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                condition2.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;BBBB&quot;</span>);<br>            thisOne = <span class="hljs-number">3</span>;<br>            condition3.signal();<span class="hljs-comment">//</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printC</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断</span><br>            <span class="hljs-keyword">while</span>(thisOne != <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                condition3.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;CCCCC&quot;</span>);<br>            thisOne = <span class="hljs-number">1</span>;<br>            condition1.signal();<span class="hljs-comment">//</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProdConsumerTraditionDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 高内聚，低耦合    内聚指的是，一个空调，自身带有调节温度高低的方法</span><br><br>        <span class="hljs-type">ShareData</span> <span class="hljs-variable">shareData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShareData</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareData.printA();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareData.printB();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareData.printC();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t3&quot;</span>).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ABC有序推进</span><br>t1=&gt;AAAAAAA<br>t2=&gt;BBBB<br>t3=&gt;CCCCC<br>t1=&gt;AAAAAAA<br>t2=&gt;BBBB<br>t3=&gt;CCCCC<br>t1=&gt;AAAAAAA<br>t2=&gt;BBBB<br>t3=&gt;CCCCC<br>t1=&gt;AAAAAAA<br>t2=&gt;BBBB<br>t3=&gt;CCCCC<br>t1=&gt;AAAAAAA<br>t2=&gt;BBBB<br>t3=&gt;CCCCC<br><br></code></pre></td></tr></table></figure><h2 id="生成者和消费者3-0"><a href="#生成者和消费者3-0" class="headerlink" title="生成者和消费者3.0"></a>生成者和消费者3.0</h2><p>在concurrent包发布以前，在多线程环境下，我们每个程序员都必须自己去控制这些细节，尤其还要兼顾效率和线程安全，则这会给我们的程序带来不小的时间复杂度</p><p>现在我们使用新版的阻塞队列版生产者和消费者，使用：volatile、CAS、atomicInteger、BlockQueue、线程交互、原子引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者消费者  阻塞队列版</span><br><span class="hljs-comment"> * 使用：volatile、CAS、atomicInteger、BlockQueue、线程交互、原子引用</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyResource</span> &#123;<br>    <span class="hljs-comment">// 默认开启，进行生产消费</span><br>    <span class="hljs-comment">// 这里用到了volatile是为了保持数据的可见性，也就是当TLAG修改时，要马上通知其它线程进行修改</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">FLAG</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 使用原子包装类，而不用number++</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br><br>    <span class="hljs-comment">// 这里不能为了满足条件，而实例化一个具体的SynchronousBlockingQueue</span><br>    BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 而应该采用依赖注入里面的，构造注入方法传入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyResource</span><span class="hljs-params">(BlockingQueue&lt;String&gt; blockingQueue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.blockingQueue = blockingQueue;<br>        <span class="hljs-comment">// 查询出传入的class是什么</span><br>        System.out.println(blockingQueue.getClass().getName());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生产</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myProd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> retValue;<br>        <span class="hljs-comment">// 多线程环境的判断，一定要使用while进行，防止出现虚假唤醒</span><br>        <span class="hljs-comment">// 当FLAG为true的时候，开始生产</span><br>        <span class="hljs-keyword">while</span>(FLAG) &#123;<br>            data = atomicInteger.incrementAndGet() + <span class="hljs-string">&quot;&quot;</span>;<br><br>            <span class="hljs-comment">// 2秒存入1个data</span><br>            retValue = blockingQueue.offer(data, <span class="hljs-number">2L</span>, TimeUnit.SECONDS);<br>            <span class="hljs-keyword">if</span>(retValue) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 插入队列:&quot;</span> + data  + <span class="hljs-string">&quot;成功&quot;</span> );<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 插入队列:&quot;</span> + data  + <span class="hljs-string">&quot;失败&quot;</span> );<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 停止生产，表示FLAG=false，生产介绍&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myConsumer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        String retValue;<br>        <span class="hljs-comment">// 多线程环境的判断，一定要使用while进行，防止出现虚假唤醒</span><br>        <span class="hljs-comment">// 当FLAG为true的时候，开始生产</span><br>        <span class="hljs-keyword">while</span>(FLAG) &#123;<br>            <span class="hljs-comment">// 2秒存入1个data</span><br>            retValue = blockingQueue.poll(<span class="hljs-number">2L</span>, TimeUnit.SECONDS);<br>            <span class="hljs-keyword">if</span>(retValue != <span class="hljs-literal">null</span> &amp;&amp; retValue != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 消费队列:&quot;</span> + retValue  + <span class="hljs-string">&quot;成功&quot;</span> );<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                FLAG = <span class="hljs-literal">false</span>;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 消费失败，队列中已为空，退出&quot;</span> );<br><br>                <span class="hljs-comment">// 退出消费队列</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 停止生产的判断</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.FLAG = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProdConsumerBlockingQueueDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 传入具体的实现类， ArrayBlockingQueue</span><br>        <span class="hljs-type">MyResource</span> <span class="hljs-variable">myResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyResource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;String&gt;(<span class="hljs-number">10</span>));<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 生产线程启动&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                myResource.myProd();<br>                System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;prod&quot;</span>).start();<br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 消费线程启动&quot;</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                myResource.myConsumer();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;consumer&quot;</span>).start();<br><br>        <span class="hljs-comment">// 5秒后，停止生产和消费</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5秒中后，生产和消费线程停止，线程结束&quot;</span>);<br>        myResource.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.concurrent.ArrayBlockingQueue<br>prod 生产线程启动<br><br><br>consumer 消费线程启动<br>prod 插入队列:<span class="hljs-number">1</span>成功<br>consumer 消费队列:<span class="hljs-number">1</span>成功<br>prod 插入队列:<span class="hljs-number">2</span>成功<br>consumer 消费队列:<span class="hljs-number">2</span>成功<br>prod 插入队列:<span class="hljs-number">3</span>成功<br>consumer 消费队列:<span class="hljs-number">3</span>成功<br>prod 插入队列:<span class="hljs-number">4</span>成功<br>consumer 消费队列:<span class="hljs-number">4</span>成功<br>prod 插入队列:<span class="hljs-number">5</span>成功<br>consumer 消费队列:<span class="hljs-number">5</span>成功<br><br><br><span class="hljs-number">5</span>秒中后，生产和消费线程停止，线程结束<br>prod 停止生产，表示FLAG=<span class="hljs-literal">false</span>，生产介绍<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>高并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode hashmap入门题</title>
    <link href="/2021/02/19/leetcode%20hashmap%E5%85%A5%E9%97%A8%E9%A2%98/"/>
    <url>/2021/02/19/leetcode%20hashmap%E5%85%A5%E9%97%A8%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>你可以按任意顺序返回答案。</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br><br></code></pre></td></tr></table></figure><h1 id="方法一：暴力破解法"><a href="#方法一：暴力破解法" class="headerlink" title="方法一：暴力破解法"></a>方法一：暴力破解法</h1><p>暴力法很简单，遍历每个元素 xx，并查找是否存在一个值与 target−x 相等的目标元素。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h2 id="代码实现java"><a href="#代码实现java" class="headerlink" title="代码实现java"></a>代码实现java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; nums.length; i ++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; nums.length ; j ++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i] + nums[j] == target)&#123;<br>          <span class="hljs-type">int</span>[] res = &#123;i, j&#125;;<br>          <span class="hljs-keyword">return</span> res;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;the input has no solution&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h1><p>使用HashMap,基本思路是：用数组的值作为key，index作为value。对数组进行迭代的时候，将元素插入到hashMap中的，这时我们回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 nn 个元素。</li></ul><h2 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span>target-nums[i];<br>            <span class="hljs-keyword">if</span>(map.containsKey(temp))&#123;  <span class="hljs-comment">// 返回布尔</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> []&#123;map.get(temp),i&#125;;<br>            &#125;<br>            map.put(nums[i],i);   <span class="hljs-comment">// key value</span><br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;the input has no solution&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-和为S的两个数字-plus版本"><a href="#2-和为S的两个数字-plus版本" class="headerlink" title="2.和为S的两个数字(plus版本)"></a>2.和为S的两个数字(plus版本)</h1><p>题目描述<br>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p><p>返回值描述:<br>对应每个测试案例，输出两个数，小的先输出。</p><p>示例1</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">输入<br><span class="hljs-string"></span><br><span class="hljs-string">[1,2,4,7,11,15]</span>,<span class="hljs-number">15</span><br>返回值<br><span class="hljs-string"></span><br><span class="hljs-string">[4,11]</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">FindNumbersWithSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; array,<span class="hljs-type">int</span> sum)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; maps;<br>        <span class="hljs-type">int</span> temp = INT_MAX;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ret;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;array.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            maps[array[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;array.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-type">int</span> complement = sum-array[i];<br>            <span class="hljs-keyword">if</span>(maps.<span class="hljs-built_in">find</span>(complement)!=maps.<span class="hljs-built_in">end</span>())&#123;<br>                <span class="hljs-keyword">if</span>(complement*array[i]&lt;temp)&#123;<br>                    ret = &#123;array[i],complement&#125;;<br>                &#125;<br>            &#125;<br>             maps[complement] = i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ret.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">sort</span>(ret.<span class="hljs-built_in">begin</span>(), ret.<span class="hljs-built_in">end</span>());<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
      <tag>hashmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java锁之读写锁</title>
    <link href="/2021/02/18/Java%E9%94%81%E4%B9%8B%E8%AF%BB%E5%86%99%E9%94%81/"/>
    <url>/2021/02/18/Java%E9%94%81%E4%B9%8B%E8%AF%BB%E5%86%99%E9%94%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>学习自尚硅谷</p></blockquote><h1 id="独占锁（写锁）-x2F-共享锁（读锁）-x2F-互斥锁"><a href="#独占锁（写锁）-x2F-共享锁（读锁）-x2F-互斥锁" class="headerlink" title="独占锁（写锁） &#x2F; 共享锁（读锁） &#x2F; 互斥锁"></a>独占锁（写锁） &#x2F; 共享锁（读锁） &#x2F; 互斥锁</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>独占锁：指该锁一次只能被一个线程所持有。对ReentrantLock和Synchronized而言都是独占锁</p><p>共享锁：指该锁可以被多个线程锁持有</p><p>对ReentrantReadWriteLock其读锁是共享，其写锁是独占</p><p>写的时候只能一个人写，但是读的时候，可以多个人同时读</p><h2 id="为什么会有写锁和读锁"><a href="#为什么会有写锁和读锁" class="headerlink" title="为什么会有写锁和读锁"></a>为什么会有写锁和读锁</h2><p>原来我们使用ReentrantLock创建锁的时候，是独占锁，也就是说一次只能一个线程访问，但是有一个读写分离场景，读的时候想同时进行，因此原来独占锁的并发性就没这么好了，因为读锁并不会造成数据不一致的问题，因此可以多个人共享读</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">多个线程 同时读一个资源类没有任何问题，所以为了满足并发量，读取共享资源应该可以同时进行，但是如果一个线程想去写共享资源，就不应该再有其它线程可以对该资源进行读或写<br></code></pre></td></tr></table></figure><p>读-读：能共存</p><p>读-写：不能共存</p><p>写-写：不能共存</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>实现一个读写缓存的操作，假设开始没有加锁的时候，会出现什么情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读写锁</span><br><span class="hljs-comment"> * 多个线程 同时读一个资源类没有任何问题，所以为了满足并发量，读取共享资源应该可以同时进行</span><br><span class="hljs-comment"> * 但是，如果一个线程想去写共享资源，就不应该再有其它线程可以对该资源进行读或写</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 资源类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCache</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// private Lock lock = null;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义写操作</span><br><span class="hljs-comment">     * 满足：原子 + 独占</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 正在写入：&quot;</span> + key);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 模拟网络拥堵，延迟0.3秒</span><br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        map.put(key, value);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 写入完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 正在读取:&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 模拟网络拥堵，延迟0.3秒</span><br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 读取完成：&quot;</span> + value);<br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">MyCache</span> <span class="hljs-variable">myCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCache</span>();<br>        <span class="hljs-comment">// 线程操作资源类，5个线程写</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">// lambda表达式内部必须是final</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">tempInt</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.put(tempInt + <span class="hljs-string">&quot;&quot;</span>, tempInt +  <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-comment">// 线程操作资源类， 5个线程读</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">// lambda表达式内部必须是final</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">tempInt</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.get(tempInt + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们分别创建5个线程写入缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程操作资源类，5个线程写</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-comment">// lambda表达式内部必须是final</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">tempInt</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        myCache.put(tempInt + <span class="hljs-string">&quot;&quot;</span>, tempInt +  <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;, String.valueOf(i)).start();<br>&#125;<br></code></pre></td></tr></table></figure><p>5个线程读取缓存，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程操作资源类， 5个线程读</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-comment">// lambda表达式内部必须是final</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">tempInt</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        myCache.get(tempInt + <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;, String.valueOf(i)).start();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> 正在写入：<span class="hljs-number">0</span><br><span class="hljs-number">4</span> 正在写入：<span class="hljs-number">4</span><br><span class="hljs-number">3</span> 正在写入：<span class="hljs-number">3</span><br><span class="hljs-number">1</span> 正在写入：<span class="hljs-number">1</span><br><span class="hljs-number">2</span> 正在写入：<span class="hljs-number">2</span><br><span class="hljs-number">0</span> 正在读取:<br><span class="hljs-number">1</span> 正在读取:<br><span class="hljs-number">2</span> 正在读取:<br><span class="hljs-number">3</span> 正在读取:<br><span class="hljs-number">4</span> 正在读取:<br><span class="hljs-number">2</span> 写入完成<br><span class="hljs-number">4</span> 写入完成<br><span class="hljs-number">4</span> 读取完成：<span class="hljs-literal">null</span><br><span class="hljs-number">0</span> 写入完成<br><span class="hljs-number">3</span> 读取完成：<span class="hljs-literal">null</span><br><span class="hljs-number">0</span> 读取完成：<span class="hljs-literal">null</span><br><span class="hljs-number">1</span> 写入完成<br><span class="hljs-number">3</span> 写入完成<br><span class="hljs-number">1</span> 读取完成：<span class="hljs-literal">null</span><br><span class="hljs-number">2</span> 读取完成：<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>我们可以看到，在写入的时候，写操作都被其它线程打断了，这就造成了，还没写完，其它线程又开始写，这样就造成数据不一致。例如：<strong>0写入和0写入完成中间被打断好多次</strong></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>上面的代码是没有加锁的，这样就会造成线程在进行写入操作的时候，被其它线程频繁打断，从而不具备原子性，这个时候，我们就需要用到读写锁来解决了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 创建一个读写锁</span><br><span class="hljs-comment">* 它是一个读写融为一体的锁，在使用的时候，需要转换</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br></code></pre></td></tr></table></figure><p>当我们在进行写操作的时候，就需要转换成写锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个写锁</span><br>rwLock.writeLock().lock();<br><br><span class="hljs-comment">// 写锁 释放</span><br>rwLock.writeLock().unlock();<br></code></pre></td></tr></table></figure><p>当们在进行读操作的时候，在转换成读锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个读锁</span><br>rwLock.readLock().lock();<br><br><span class="hljs-comment">// 读锁 释放</span><br>rwLock.readLock().unlock();<br></code></pre></td></tr></table></figure><p>这里的读锁和写锁的区别在于，写锁一次只能一个线程进入，执行写操作，而读锁是多个线程能够同时进入，进行读取的操作</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读写锁</span><br><span class="hljs-comment"> * 多个线程 同时读一个资源类没有任何问题，所以为了满足并发量，读取共享资源应该可以同时进行</span><br><span class="hljs-comment"> * 但是，如果一个线程想去写共享资源，就不应该再有其它线程可以对该资源进行读或写</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 资源类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCache</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存中的东西，必须保持可见性，因此使用volatile修饰</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个读写锁</span><br><span class="hljs-comment">     * 它是一个读写融为一体的锁，在使用的时候，需要转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义写操作</span><br><span class="hljs-comment">     * 满足：原子 + 独占</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br><br>        <span class="hljs-comment">// 创建一个写锁</span><br>        rwLock.writeLock().lock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 正在写入：&quot;</span> + key);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 模拟网络拥堵，延迟0.3秒</span><br>                TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            map.put(key, value);<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 写入完成&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 写锁 释放</span><br>            rwLock.writeLock().unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br><br>        <span class="hljs-comment">// 读锁</span><br>        rwLock.readLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 正在读取:&quot;</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 模拟网络拥堵，延迟0.3秒</span><br>                TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 读取完成：&quot;</span> + value);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 读锁释放</span><br>            rwLock.readLock().unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清空缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span> &#123;<br>        map.clear();<br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">MyCache</span> <span class="hljs-variable">myCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCache</span>();<br><br>        <span class="hljs-comment">// 线程操作资源类，5个线程写</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">// lambda表达式内部必须是final</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">tempInt</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.put(tempInt + <span class="hljs-string">&quot;&quot;</span>, tempInt +  <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br><br>        <span class="hljs-comment">// 线程操作资源类， 5个线程读</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">// lambda表达式内部必须是final</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">tempInt</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.get(tempInt + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> 正在写入：<span class="hljs-number">1</span><br><span class="hljs-number">1</span> 写入完成<br><span class="hljs-number">2</span> 正在写入：<span class="hljs-number">2</span><br><span class="hljs-number">2</span> 写入完成<br><span class="hljs-number">3</span> 正在写入：<span class="hljs-number">3</span><br><span class="hljs-number">3</span> 写入完成<br><span class="hljs-number">4</span> 正在写入：<span class="hljs-number">4</span><br><span class="hljs-number">4</span> 写入完成<br><span class="hljs-number">5</span> 正在写入：<span class="hljs-number">5</span><br><span class="hljs-number">5</span> 写入完成<br><span class="hljs-number">2</span> 正在读取:<br><span class="hljs-number">3</span> 正在读取:<br><span class="hljs-number">1</span> 正在读取:<br><span class="hljs-number">4</span> 正在读取:<br><span class="hljs-number">5</span> 正在读取:<br><span class="hljs-number">2</span> 读取完成：<span class="hljs-number">2</span><br><span class="hljs-number">1</span> 读取完成：<span class="hljs-number">1</span><br><span class="hljs-number">4</span> 读取完成：<span class="hljs-number">4</span><br><span class="hljs-number">3</span> 读取完成：<span class="hljs-number">3</span><br><span class="hljs-number">5</span> 读取完成：<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>从运行结果我们可以看出，写入操作是一个一个线程进行执行的，并且中间不会被打断，而读操作的时候，是同时5个线程进入，然后并发读取操作</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>高并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Collection线程不安全的举例</title>
    <link href="/2021/02/17/Collection%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E4%B8%BE%E4%BE%8B/"/>
    <url>/2021/02/17/Collection%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E4%B8%BE%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>学习自尚硅谷</p></blockquote><h2 id="Collection线程不安全的举例"><a href="#Collection线程不安全的举例" class="headerlink" title="Collection线程不安全的举例"></a>Collection线程不安全的举例</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1、当我们执行下面语句的时候，底层进行了什么操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br></code></pre></td></tr></table></figure><p>底层创建了一个空的数组，伴随着初始值为10</p><p>当执行add方法后，如果超过了10，那么会进行扩容，扩容的大小为原值的一半，也就是5个，使用下列方法扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.copyOf(elementData, netCapacity)<br></code></pre></td></tr></table></figure><h2 id="单线程环境下"><a href="#单线程环境下" class="headerlink" title="单线程环境下"></a>单线程环境下</h2><p>单线程环境的ArrayList是不会有问题的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListNotSafeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br>        <span class="hljs-keyword">for</span>(String element : list) &#123;<br>            System.out.println(element);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多线程环境"><a href="#多线程环境" class="headerlink" title="多线程环境"></a>多线程环境</h2><p>为什么ArrayList是线程不安全的？因为在进行写操作的时候，方法上为了保证并发性，是没有添加synchronized修饰，所以并发写的时候，就会出现问题</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282152535.png"></p><p>当我们同时启动30个线程去操作List的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListNotSafeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));<br>                System.out.println(list);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候出现了错误，也就是java.util.ConcurrentModificationException</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282152066.png"></p><p>这个异常是 并发修改的异常。举个例子理解下：张三在写签到表，张三写了一个张字，这个时候李四抢签名表，开始写自己的名字，这就是ConcurrentModificationException</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一：Vector"><a href="#方案一：Vector" class="headerlink" title="方案一：Vector"></a>方案一：Vector</h3><p>第一种方法，就是不用ArrayList这种不安全的List实现类，而采用Vector，线程安全的</p><p>关于Vector如何实现线程安全的，而是在方法上加了锁，即synchronized</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282153955.png"></p><p>这样就每次只能够一个线程进行操作，所以不会出现线程不安全的问题，但是因为加锁了，导致并发性基于下降</p><h3 id="方案二：Collections-synchronized"><a href="#方案二：Collections-synchronized" class="headerlink" title="方案二：Collections.synchronized()"></a>方案二：Collections.synchronized()</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">List&lt;<span class="hljs-keyword">String</span>&gt; list = Collections.synchronizedList(<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;());<br></code></pre></td></tr></table></figure><p>采用Collections集合工具类，在ArrayList外面包装一层 同步 机制</p><h3 id="方案三：采用JUC里面的方法"><a href="#方案三：采用JUC里面的方法" class="headerlink" title="方案三：采用JUC里面的方法"></a>方案三：采用JUC里面的方法</h3><p>CopyOnWriteArrayList：写时复制，主要是一种读写分离的思想</p><p>写时复制，CopyOnWrite容器即写时复制的容器，往一个容器中添加元素的时候，不直接往当前容器Object[]添加，而是先将Object[]进行copy，复制出一个新的容器object[] newElements，然后新的容器Object[] newElements里添加原始，添加元素完后，在将原容器的引用指向新的容器 setArray(newElements)；这样做的好处是可以对copyOnWrite容器进行并发的度，而不需要加锁，因为当前容器不需要添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器</p><p>就是写的时候，把ArrayList扩容一个出来，然后把值填写上去，在通知其他的线程，ArrayList的引用指向扩容后的</p><p>查看底层add方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        Object[] elements = getArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> elements.length;<br>        Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);<br>        newElements[len] = e;<br>        setArray(newElements);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先需要加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>lock.lock();<br></code></pre></td></tr></table></figure><p>然后在末尾扩容一个单位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Object[] elements = getArray();<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> elements.length;<br>Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>然后在把扩容后的空间，填写上需要add的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">newElements[len] = e;<br></code></pre></td></tr></table></figure><p>最后把内容set到Array中</p><h2 id="HashSet线程不安全"><a href="#HashSet线程不安全" class="headerlink" title="HashSet线程不安全"></a>HashSet线程不安全</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetNotSafeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Set&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));<br>                System.out.println(list);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282153017.png"></p><h3 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h3><p>底层还是使用CopyOnWriteArrayList进行实例化</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282153157.png"></p><h3 id="HashSet底层结构"><a href="#HashSet底层结构" class="headerlink" title="HashSet底层结构"></a>HashSet底层结构</h3><p>同理HashSet的底层结构就是HashMap</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211282154778.png"></p><p>但是为什么我调用 HashSet.add()的方法，只需要传递一个元素，而HashMap是需要传递key-value键值对？</p><p>首先我们查看hashSet的add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们能发现但我们调用add的时候，存储一个值进入map中，只是作为key进行存储，而value存储的是一个Object类型的常量，也就是说HashSet只关心key，而不关心value</p><h2 id="HashMap线程不安全"><a href="#HashMap线程不安全" class="headerlink" title="HashMap线程不安全"></a>HashMap线程不安全</h2><p>同理HashMap在多线程环境下，也是不安全的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));<br>            System.out.println(map);<br>        &#125;, String.valueOf(i)).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就没有CopyOnWriteArraymap了。哈哈哈哈</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、使用Collections.synchronizedMap(new HashMap&lt;&gt;());</p><p>2、使用 ConcurrentHashMap</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; <span class="hljs-built_in">map</span> = <span class="hljs-literal">new</span> ConcurrentHashMap&lt;&gt;();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>高并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile的理解</title>
    <link href="/2021/02/17/volatile%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2021/02/17/volatile%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>学习自b站尚硅谷 <a href="https://www.bilibili.com/video/BV1zb411M7NQ?p=4&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1zb411M7NQ?p=4&amp;spm_id_from=pageDriver</a></p></blockquote><h2 id="谈谈你对volatile关键字的理解。"><a href="#谈谈你对volatile关键字的理解。" class="headerlink" title="谈谈你对volatile关键字的理解。"></a>谈谈你对volatile关键字的理解。</h2><p>Volatile是Java虚拟机提供的<code>轻量级</code>的同步机制（三大特性）</p><ul><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ul><h2 id="JMM是什么"><a href="#JMM是什么" class="headerlink" title="JMM是什么"></a>JMM是什么</h2><p>JMM是Java内存模型，也就是Java Memory Model，简称JMM，本身是一种抽象的概念，实际上并不存在，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式</p><p>JMM关于<strong>同步的规定</strong>：</p><ul><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值，到自己的工作内存</li><li>加锁和解锁是同一把锁</li></ul><p>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存（有些地方称为栈空间），工作内存是每个线程的私有数据区域，而Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，<code>但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写会主内存</code>，不能直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成，其简要访问过程：</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281828034.png"></p><p>数据传输速率：硬盘 &lt; 内存 &lt; &lt; cache &lt; CPU</p><p>上面提到了两个概念：主内存 和 工作内存</p><ul><li><p>主内存：就是计算机的内存，也就是经常提到的8G内存，16G内存</p></li><li><p>工作内存：但我们实例化 new student，那么 age &#x3D; 25 也是存储在主内存中</p><ul><li>当同时有三个线程同时访问 student中的age变量时，那么每个线程都会拷贝一份，到各自的工作内存，从而实现了变量的拷贝</li></ul></li></ul><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281829039.png"></p><p>即：JMM内存模型的可见性，指的是当主内存区域中的值被某个线程写入更改后，其它线程会马上知晓更改后的值，并重新得到更改后的值。</p><h2 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h2><p>为什么这里主线程中某个值被更改后，其它线程能马上知晓呢？其实这里是用到了总线嗅探技术</p><p>在说嗅探技术之前，首先谈谈缓存一致性的问题，就是当多个处理器运算任务都涉及到同一块主内存区域的时候，将可能导致各自的缓存数据不一。</p><p>为了解决缓存一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议进行操作，这类协议主要有MSI、MESI等等。</p><h3 id="MESI"><a href="#MESI" class="headerlink" title="MESI"></a>MESI</h3><p>当CPU写数据时，如果发现操作的变量是共享变量，即在其它CPU中也存在该变量的副本，会发出信号通知其它CPU将该内存变量的缓存行设置为无效，因此当其它CPU读取这个变量的时，发现自己缓存该变量的缓存行是无效的，那么它就会从内存中重新读取。</p><h3 id="总线嗅探"><a href="#总线嗅探" class="headerlink" title="总线嗅探"></a>总线嗅探</h3><p>那么是如何发现数据是否失效呢？</p><p>这里是用到了总线嗅探技术，就是每个处理器通过嗅探在总线上传播的数据来检查自己缓存值是否过期了，当处理器发现自己的缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置为无效状态，当处理器对这个数据进行修改操作的时候，会重新从内存中把数据读取到处理器缓存中。</p><h3 id="总线风暴"><a href="#总线风暴" class="headerlink" title="总线风暴"></a>总线风暴</h3><p>总线嗅探技术有哪些缺点？</p><p>由于Volatile的MESI缓存一致性协议，需要不断的从主内存嗅探和CAS循环，无效的交互会导致总线带宽达到峰值。因此不要大量使用volatile关键字，至于什么时候使用volatile、什么时候用锁以及Syschonized都是需要根据实际场景的。</p><h2 id="JMM的特性"><a href="#JMM的特性" class="headerlink" title="JMM的特性"></a>JMM的特性</h2><p>JMM的三大特性，volatile只保证了两个，即可见性和有序性，不满足原子性</p><ul><li>可见性</li><li>原子性</li><li>有序性</li></ul><h2 id="可见性代码验证"><a href="#可见性代码验证" class="headerlink" title="可见性代码验证"></a>可见性代码验证</h2><p>但我们对于成员变量没有添加任何修饰时，是无法感知其它线程修改后的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 假设是主物理内存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTo60</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = <span class="hljs-number">60</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证volatile的可见性</span><br><span class="hljs-comment"> * 1. 假设int number = 0， number变量之前没有添加volatile关键字修饰</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VolatileDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><br>        <span class="hljs-comment">// 资源类</span><br>        <span class="hljs-type">MyData</span> <span class="hljs-variable">myData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyData</span>();<br><br>        <span class="hljs-comment">// AAA线程 实现了Runnable接口的，lambda表达式</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t come in&quot;</span>);<br><br>            <span class="hljs-comment">// 线程睡眠3秒，假设在进行运算</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">// 修改number的值</span><br>            myData.addTo60();<br><br>            <span class="hljs-comment">// 输出修改后的值</span><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t update number value:&quot;</span> + myData.number);<br><br>        &#125;, <span class="hljs-string">&quot;AAA&quot;</span>).start();<br><br>        <span class="hljs-keyword">while</span> (myData.number == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// main线程就一直在这里等待循环，直到number的值不等于零</span><br>        &#125;<br><br>        <span class="hljs-comment">// 按道理这个值是不可能打印出来的，因为主线程运行的时候，number的值为0，所以一直在循环</span><br>        <span class="hljs-comment">// 如果能输出这句话，说明AAA线程在睡眠3秒后，更新的number的值，重新写入到主内存，并被main线程感知到了</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t mission is over&quot;</span>);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 最后输出结果：</span><br><span class="hljs-comment">         * AAA come in</span><br><span class="hljs-comment">         * AAA update number value:60</span><br><span class="hljs-comment">         * 最后线程没有停止，并行没有输出  mission is over 这句话，说明没有用volatile修饰的变量，是没有可见性</span><br><span class="hljs-comment">         */</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281829843.png"><br>最后线程没有停止，并行没有输出 mission is over 这句话，说明没有用volatile修饰的变量，是没有可见性</p><p>当我们修改MyData类中的成员变量时，并且添加volatile关键字修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 假设是主物理内存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * volatile 修饰的关键字，是为了增加 主线程和线程之间的可见性，只要有一个线程修改了内存中的值，其它线程也能马上感知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTo60</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = <span class="hljs-number">60</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281830947.png"><br>主线程也执行完毕了，说明volatile修饰的变量，是具备JVM轻量级同步机制的，能够感知其它线程的修改后的值。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>排序</tag>
      
      <tag>volatile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java两种动态代理JDK动态代理和CGLIB动态代理笔记</title>
    <link href="/2021/02/16/Java%E4%B8%A4%E7%A7%8D%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/16/Java%E4%B8%A4%E7%A7%8D%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>学习自狂神b站视频</p></blockquote><p>为什么要学习代理模式，因为AOP的底层机制就是动态代理！</p><blockquote><p>代理模式又分为静态代理和动态代理。动态代理在实现阶段不用关心代理谁，而在运行阶段才指定代理哪一个对象。相对来说，自己写代理类的方式就是静态代理。</p></blockquote><h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>那我们先来写一个静态代理吧</p><blockquote><h4 id="静态代理-1"><a href="#静态代理-1" class="headerlink" title="静态代理"></a>静态代理</h4></blockquote><p><strong>静态代理角色分析</strong></p><ul><li><p>抽象角色 : 一般使用接口或者抽象类来实现</p></li><li><p>真实角色 : 被代理的角色</p></li><li><p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</p></li><li><p>客户  :  使用代理角色来进行一些操作 .</p></li></ul><p><strong>代码实现</strong></p><p>Rent . java 即抽象角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：租房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Host . java 即真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//真实角色: 房东，房东要出租房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;房屋出租&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Proxy . java 即代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代理角色：中介</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br><br>   <span class="hljs-keyword">private</span> Host host;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">()</span> &#123; &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">(Host host)</span> &#123;<br>       <span class="hljs-built_in">this</span>.host = host;<br>  &#125;<br><br>   <span class="hljs-comment">//租房</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>&#123;<br>       seeHouse();<br>       host.rent();<br>       fare();<br>  &#125;<br>   <span class="hljs-comment">//看房</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seeHouse</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;带房客看房&quot;</span>);<br>  &#125;<br>   <span class="hljs-comment">//收中介费</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fare</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client . java 即客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户类，一般客户都会去找代理！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//房东要租房</span><br>       <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>       <span class="hljs-comment">//中介帮助房东</span><br>       <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(host);<br>       <span class="hljs-comment">//你去找中介！</span><br>       proxy.rent();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。</p></blockquote><p><strong>静态代理的好处:</strong></p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li></ul><p>缺点 :</p><ul><li>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .</li></ul><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p><blockquote><h4 id="静态代理再理解"><a href="#静态代理再理解" class="headerlink" title="静态代理再理解"></a>静态代理再理解</h4></blockquote><p>1、创建一个抽象角色，比如咋们平时做的用户业务，抽象起来就是增删改查！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：增删改查业务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、我们需要一个真实对象来完成这些增删改查操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//真实对象，完成增删改查操作的人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;更新了一个用户&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、需求来了，现在我们需要增加一个日志功能，怎么实现！</p><ul><li>思路1 ：在实现类上增加代码 【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul><p>4、设置一个代理类来处理日志！代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代理角色，在这里面增加日志的实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>   <span class="hljs-keyword">private</span> UserServiceImpl userService;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserServiceImpl userService)</span> &#123;<br>       <span class="hljs-built_in">this</span>.userService = userService;<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>       log(<span class="hljs-string">&quot;add&quot;</span>);<br>       userService.add();<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>       log(<span class="hljs-string">&quot;delete&quot;</span>);<br>       userService.delete();<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>       log(<span class="hljs-string">&quot;update&quot;</span>);<br>       userService.update();<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>       log(<span class="hljs-string">&quot;query&quot;</span>);<br>       userService.query();<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String msg)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+msg+<span class="hljs-string">&quot;方法&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5、测试访问类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//真实业务</span><br>       <span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>       <span class="hljs-comment">//代理类</span><br>       <span class="hljs-type">UserServiceProxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceProxy</span>();<br>       <span class="hljs-comment">//使用代理类实现日志功能！</span><br>       proxy.setUserService(userService);<br><br>       proxy.add();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OK，到了现在代理模式大家应该都没有什么问题了，重点大家需要理解其中的思想；</p><p>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h2><blockquote><h4 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h4></blockquote><ul><li><p>动态代理的角色和静态代理的一样 .</p></li><li><p>动态代理的代理类是动态生成的 . 静态代理的代理类是我们提前写好的</p></li><li><p>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理</p></li><li><ul><li>基于接口的动态代理—-JDK动态代理</li><li>基于类的动态代理–cglib</li><li>现在用的比较多的是 javasist 来生成动态代理 .</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;房屋出租&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Rent rent;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRent</span><span class="hljs-params">(Rent rent)</span> &#123;<br>        <span class="hljs-built_in">this</span>.rent = rent;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">// 这里可以做增强</span><br>        seeHouse();<br>        <span class="hljs-comment">//核心：本质利用反射实现！</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(rent, args);<br>        fare();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 生成代理类,重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">CreateProxyObj</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(rent.getClass().getClassLoader(), rent.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//看房</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seeHouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;带房客看房&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//收中介费</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fare</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-type">Proxy2</span> <span class="hljs-variable">proxy2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy2</span>();<br>        proxy2.setRent(host);<br>        <span class="hljs-type">Rent</span> <span class="hljs-variable">rent</span> <span class="hljs-operator">=</span> (Rent)proxy2.CreateProxyObj(); <span class="hljs-comment">//动态生成对应的代理类！</span><br>        rent.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><h4 id="深化理解"><a href="#深化理解" class="headerlink" title="深化理解"></a>深化理解</h4></blockquote><p>我们来使用动态代理实现代理我们后面写的UserService！</p><p>我们也可以编写一个通用的动态代理实现的类！所有的代理对象设置为Object即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>   <span class="hljs-keyword">private</span> Object target;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTarget</span><span class="hljs-params">(Object target)</span> &#123;<br>       <span class="hljs-built_in">this</span>.target = target;<br>  &#125;<br><br>   <span class="hljs-comment">//生成代理类</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(),<br>               target.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>   <span class="hljs-comment">// proxy : 代理类</span><br>   <span class="hljs-comment">// method : 代理类的调用处理程序的方法对象.</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> throwsThrowable &#123;<br>       log(method.getName());<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>       <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String methodName)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+methodName+<span class="hljs-string">&quot;方法&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//真实对象</span><br>       <span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>       <span class="hljs-comment">//代理对象的调用处理程序</span><br>       <span class="hljs-type">ProxyInvocationHandler</span> <span class="hljs-variable">pih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyInvocationHandler</span>();<br>       pih.setTarget(userService); <span class="hljs-comment">//设置要代理的对象</span><br>       <span class="hljs-type">UserService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (UserService)pih.getProxy(); <span class="hljs-comment">//动态生成代理类！</span><br>       proxy.delete();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试，增删改查，查看结果！</p><h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><p>先看下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy;<br> <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br> <br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodProxy;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span><br>&#123;<br>    <span class="hljs-comment">// 根据一个类型产生代理类，此方法不要求一定放在MethodInterceptor中</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">CreatProxyedObj</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span><br>    &#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        <br>        enhancer.setSuperclass(clazz);<br>        <br>        enhancer.setCallback(<span class="hljs-built_in">this</span>);<br>        <br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object arg0, Method arg1, Object[] arg2, MethodProxy arg3)</span> <span class="hljs-keyword">throws</span> Throwable<br>    &#123;<br>        <span class="hljs-comment">// 这里增强</span><br>        System.out.println(<span class="hljs-string">&quot;收钱&quot;</span>);<br>        <br>        <span class="hljs-keyword">return</span> arg3.invokeSuper(arg0, arg2);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>从代码可以看出，它和jdk动态代理有所不同，对外表现上看CreatProxyedObj，它只需要一个类型clazz就可以产生一个代理对象， 所以说是“类的代理”，且创造的对象通过打印类型发现也是一个新的类型。不同于jdk动态代理，jdk动态代理要求对象必须实现接口（三个参数的第二个参数），cglib对此没有要求。</p><blockquote><h5 id="动态代理的好处"><a href="#动态代理的好处" class="headerlink" title="动态代理的好处"></a>动态代理的好处</h5></blockquote><p>静态代理有的它都有，静态代理没有的，它也有！</p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li><li>一个动态代理 , 一般代理某一类业务</li><li>一个动态代理可以代理多个类，代理的是接口！</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>动态代理</tag>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode215. 数组中的第K个最大元素</title>
    <link href="/2021/02/12/leetcode215.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <url>/2021/02/12/leetcode215.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>这题和剑指 Offer 40. 最小的k个数思路基本相同。</p><blockquote><p>思路:用一个小顶堆，筛选出k个最大的元素，那么在头的那个就是和第k大的元素了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>public:<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-comment">// 小顶堆</span><br>        <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-type">int</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;<br>        <span class="hljs-comment">// priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; pq2;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>            pq.push(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt;nums.size() ; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;pq.top())&#123;<br>                pq.pop();<br>                pq.push(nums[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pq.top();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Jsoup写个小爬虫玩玩</title>
    <link href="/2021/02/11/%E7%94%A8Jsoup%E5%86%99%E4%B8%AA%E5%B0%8F%E7%88%AC%E8%99%AB%E7%8E%A9%E7%8E%A9/"/>
    <url>/2021/02/11/%E7%94%A8Jsoup%E5%86%99%E4%B8%AA%E5%B0%8F%E7%88%AC%E8%99%AB%E7%8E%A9%E7%8E%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><blockquote><p>获取请求返回的页面信息，筛选出我们想要的数据就可以了<br>初始化项目<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281709577.png"><br>导入依赖<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281709494.png"></p></blockquote><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="编写一个封装对象的实体类"><a href="#编写一个封装对象的实体类" class="headerlink" title="编写一个封装对象的实体类"></a>编写一个封装对象的实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shoukailiang;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Content</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String img;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String price;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h2><p>爬取京东页面，可以看出京东keyword可以查询数据<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281710354.png"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281710096.png"><br>先找到id为J_goodsList的div，然后遍历下面的每个li<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281710378.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Element</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&quot;J_goodsList&quot;</span>);<br>System.out.println(element);<br><span class="hljs-comment">// 获取所有的li元素</span><br><span class="hljs-type">Elements</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> element.getElementsByTag(<span class="hljs-string">&quot;li&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281711644.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Content&gt; goodList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">// 获取元素中的内容</span><br><span class="hljs-keyword">for</span> (Element el : elements) &#123;<br>    <span class="hljs-comment">// 如果通过src获取不到图片的话，有可能所有图片都是延迟加载的！</span><br>    <span class="hljs-comment">// 我们attr的属性可能需要通过data-lazy-img去获取</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> el.getElementsByTag(<span class="hljs-string">&quot;img&quot;</span>).eq(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;src&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> el.getElementsByClass(<span class="hljs-string">&quot;p-price&quot;</span>).eq(<span class="hljs-number">0</span>).text();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> el.getElementsByClass(<span class="hljs-string">&quot;p-name&quot;</span>).eq(<span class="hljs-number">0</span>).text();<br><br>    <span class="hljs-type">Content</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>();<br>    content.setImg(img);<br>    content.setTitle(title);<br>    content.setPrice(price);<br>    goodList.add(content);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shoukailiang;<br><br><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Element;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlParseUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;Content&gt; <span class="hljs-title function_">parseJD</span><span class="hljs-params">(String keywords)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获得请求 https://search.jd.com/Search?keyword=java</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://search.jd.com/Search?keyword=&quot;</span> + keywords;<br>        <span class="hljs-comment">// 解析网页 Jsoup返回Document就是浏览器的Document对象</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> Jsoup.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url), <span class="hljs-number">30000</span>);<br>        <span class="hljs-comment">// 所有在js中可以使用的方法，这里都可以用</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&quot;J_goodsList&quot;</span>);<br>        System.out.println(element);<br>        <span class="hljs-comment">// 获取所有的li元素</span><br>        <span class="hljs-type">Elements</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> element.getElementsByTag(<span class="hljs-string">&quot;li&quot;</span>);<br><br>        ArrayList&lt;Content&gt; goodList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 获取元素中的内容</span><br>        <span class="hljs-keyword">for</span> (Element el : elements) &#123;<br>            <span class="hljs-comment">// 如果通过src获取不到图片的话，有可能所有图片都是延迟加载的！</span><br>            <span class="hljs-comment">// 我们attr的属性可能需要通过data-lazy-img去获取</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> el.getElementsByTag(<span class="hljs-string">&quot;img&quot;</span>).eq(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;src&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> el.getElementsByClass(<span class="hljs-string">&quot;p-price&quot;</span>).eq(<span class="hljs-number">0</span>).text();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> el.getElementsByClass(<span class="hljs-string">&quot;p-name&quot;</span>).eq(<span class="hljs-number">0</span>).text();<br><br>            <span class="hljs-type">Content</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>();<br>            content.setImg(img);<br>            content.setTitle(title);<br>            content.setPrice(price);<br>            goodList.add(content);<br>        &#125;<br>        <span class="hljs-keyword">return</span> goodList;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlParseUtil</span>().parseJD(<span class="hljs-string">&quot;显示器&quot;</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281711538.png"></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jsonp</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode67. 二进制求和</title>
    <link href="/2021/02/07/Leetcode67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/"/>
    <url>/2021/02/07/Leetcode67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>你两个二进制字符串，返回它们的和（用二进制表示）。</p><p>输入为 非空 字符串且只包含数字 1 和 0。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">示例 <span class="hljs-number">1</span>:<br><br>输入: <span class="hljs-selector-tag">a</span> = <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-selector-tag">b</span> = <span class="hljs-string">&quot;1&quot;</span><br>输出: <span class="hljs-string">&quot;100&quot;</span><br>示例 <span class="hljs-number">2</span>:<br><br>输入: <span class="hljs-selector-tag">a</span> = <span class="hljs-string">&quot;1010&quot;</span>, <span class="hljs-selector-tag">b</span> = <span class="hljs-string">&quot;1011&quot;</span><br>输出: <span class="hljs-string">&quot;10101&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">addBinary</span><span class="hljs-params">(string m, string n)</span> </span>&#123;<br>            string m1;<br>        <span class="hljs-built_in">reverse</span>(m.<span class="hljs-built_in">begin</span>(),m.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">reverse</span>(n.<span class="hljs-built_in">begin</span>(),n.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">// 进位</span><br>        <span class="hljs-type">int</span> m_len = m.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n_len = n.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> max_size = <span class="hljs-built_in">max</span>(m_len,n_len);<br>        <span class="hljs-type">int</span> now;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; max_size; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(i&lt;(m_len)&amp;&amp;(i&lt;n_len))&#123;<br>                 now = m[i]-<span class="hljs-string">&#x27;0&#x27;</span>+n[i]-<span class="hljs-string">&#x27;0&#x27;</span>+count;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;m_len)&#123;<br>                 now = m[i]-<span class="hljs-string">&#x27;0&#x27;</span>+count;<br>                cout&lt;&lt;now&lt;&lt;endl;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;n_len)&#123;<br>                now = n[i]-<span class="hljs-string">&#x27;0&#x27;</span>+count;<br>                cout&lt;&lt;now&lt;&lt;endl;<br>            &#125;<br>            m1.<span class="hljs-built_in">push_back</span>((now)%<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;0&#x27;</span>);<br>            count = (now)/<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(count==<span class="hljs-number">1</span>)&#123;<br>            m1.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(m1.<span class="hljs-built_in">begin</span>(),m1.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> m1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="延伸一下"><a href="#延伸一下" class="headerlink" title="延伸一下"></a>延伸一下</h2><p>你的任务是：对于任意的两个正的二进制数，求它们和中“1”所在的位置。</p><p>Input<br>有多组测试数据，每组测试数据共两行：</p><p>第一行：二进制的加数A，总长度&lt;&#x3D;200。</p><p>第二行：二进制的加数B，总长度&lt;&#x3D;200。</p><p>Output<br>输出二进制数A+B中“1”所在的位置，位置排序为从左到右：N、N-1、N-2…1，数据之间用空格分隔，行末没有多余的空格。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Samples</span><br><span class="hljs-attribute">input</span> <br><span class="hljs-attribute">111</span><br><span class="hljs-attribute">110</span><br><span class="hljs-attribute">11101</span><br><span class="hljs-attribute">110</span><br><span class="hljs-attribute">output</span> <br><span class="hljs-attribute">4</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">6</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algorithm&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cctype&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stack&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;vector&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;unordered_set&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;unordered_map&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string m, n;<br>    <span class="hljs-type">bool</span> isPrint = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (cin&gt;&gt;m&gt;&gt;n)&#123;<br>        string m1;<br>        isPrint= <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">reverse</span>(m.<span class="hljs-built_in">begin</span>(),m.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">reverse</span>(n.<span class="hljs-built_in">begin</span>(),n.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">// 进位</span><br>        <span class="hljs-type">int</span> m_len = m.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n_len = n.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> max_size = <span class="hljs-built_in">max</span>(m_len,n_len);<br>        <span class="hljs-type">int</span> now;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; max_size; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(i&lt;(m_len)&amp;&amp;(i&lt;n_len))&#123;<br>                now = m[i]-<span class="hljs-string">&#x27;0&#x27;</span>+n[i]-<span class="hljs-string">&#x27;0&#x27;</span>+count;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;m_len)&#123;<br>                now = m[i]-<span class="hljs-string">&#x27;0&#x27;</span>+count;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;n_len)&#123;<br>                now = n[i]-<span class="hljs-string">&#x27;0&#x27;</span>+count;<br>            &#125;<br>            m1.<span class="hljs-built_in">push_back</span>((now)%<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;0&#x27;</span>);<br>            count = (now)/<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(count==<span class="hljs-number">1</span>)&#123;<br>            m1.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(m1.<span class="hljs-built_in">begin</span>(),m1.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m1.<span class="hljs-built_in">size</span>(); ++j) &#123;<br>            <span class="hljs-keyword">if</span>(m1.<span class="hljs-built_in">at</span>(j)==<span class="hljs-string">&#x27;1&#x27;</span>&amp;&amp;isPrint== <span class="hljs-literal">false</span>)&#123;<br>                cout&lt;&lt;(m1.<span class="hljs-built_in">size</span>()-j);<br>                isPrint= <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isPrint&amp;&amp;m1.<span class="hljs-built_in">at</span>(j)==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>                cout&lt;&lt;(m1.<span class="hljs-built_in">size</span>()-j);<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 03. 数组中重复的数字</title>
    <link href="/2021/02/05/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2021/02/05/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="找出数组中重复的数字。"><a href="#找出数组中重复的数字。" class="headerlink" title="找出数组中重复的数字。"></a>找出数组中重复的数字。</h1><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><p>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findRepeatNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt; maps;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<br>            <span class="hljs-keyword">if</span>(maps[num]) <span class="hljs-keyword">return</span> num;<br>            <span class="hljs-keyword">else</span> maps[num] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 错误记录 之nvm安装</title>
    <link href="/2021/02/03/hexo%20%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%20%E4%B9%8Bnvm%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/03/hexo%20%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95%20%E4%B9%8Bnvm%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>hexo d 的时候报了这个错。查了几篇文章，发现是node 版本太高了,使用nvm更换为12.14.0可以正常上传<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281645973.png"></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">TypeError [ERR_INVALID_ARG_TYPE]: The <span class="hljs-string">&quot;mode&quot;</span> argument must be integer. Received an<span class="hljs-built_in"> instance </span>of Object<br>    at copyFile (fs.js:1972:10)<br></code></pre></td></tr></table></figure><h1 id="nvm控制版本"><a href="#nvm控制版本" class="headerlink" title="nvm控制版本"></a>nvm控制版本</h1><p>通过将多个node 版本安装在指定路径，然后通过 nvm 命令切换时，就会切换我们环境变量中 node 命令指定的实际执行的软件路径。<br>windows系统下的nvm 安装</p><p><strong>下载</strong></p><p>链接：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>之后下载 nvm-setup.zip，无脑下一步</p><p><strong>检查是否安装成功</strong></p><p>打开CMD，输入nvm，安装成功则会如下图所示，它会显示出当前nvm版本以及nvm的命令：</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281645930.png"><br>修改settings.txt</p><p>在你安装的目录下找到settings.txt文件，打开后加上 </p><p>node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a> </p><p>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281646934.png"><br><strong>基本命令</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nvm arch <span class="hljs-selector-attr">[32|64]</span>： 显示node是运行在<span class="hljs-number">32</span>位还是<span class="hljs-number">64</span>位模式。指定<span class="hljs-number">32</span>或<span class="hljs-number">64</span>来覆盖默认体系结构。 <br>-nvm install &lt;version&gt; <span class="hljs-selector-attr">[arch]</span>：该可以是node.js版本或最新稳定版本latest。（可选<span class="hljs-selector-attr">[arch]</span>）指定安装<span class="hljs-number">32</span>位或<span class="hljs-number">64</span>位版本（默认为系统arch）。设置<span class="hljs-selector-attr">[arch]</span>为<span class="hljs-attribute">all</span>以安装<span class="hljs-number">32</span>和<span class="hljs-number">64</span>位版本。在命令后面添加–insecure，可以绕过远端下载服务器的SSL验证。<br>nvm list <span class="hljs-selector-attr">[available]</span>：列出已经安装的node.js版本。可选的available，显示可下载版本的部分列表。这个命令可以简写为nvm ls <span class="hljs-selector-attr">[available]</span>。<br>nvm on： 启用node.js版本管理。<br>nvm off： 禁用node.js版本管理(不卸载任何东西)<br>nvm proxy <span class="hljs-selector-attr">[url]</span>： 设置用于下载的代理。留<span class="hljs-selector-attr">[url]</span>空白，以查看当前的代理。设置<span class="hljs-selector-attr">[url]</span>为<span class="hljs-attribute">none</span>删除代理。<br>nvm node_mirror <span class="hljs-selector-attr">[url]</span>：设置node镜像，默认为https:<span class="hljs-comment">//nodejs.org/dist/.。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/node/</span><br>nvm npm_mirror <span class="hljs-selector-attr">[url]</span>：设置npm镜像，默认为https:<span class="hljs-comment">//github.com/npm/npm/archive/。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/npm/</span><br>nvm uninstall &lt;version&gt;： 卸载指定版本的nodejs。<br>nvm use <span class="hljs-selector-attr">[version]</span> <span class="hljs-selector-attr">[arch]</span>： 切换到使用指定的nodejs版本。可以指定<span class="hljs-number">32</span>/<span class="hljs-number">64</span>位<span class="hljs-selector-attr">[arch]</span>。 <br>-nvm use &lt;arch&gt;：将继续使用所选版本，但根据提供的值切换到<span class="hljs-number">32</span>/<span class="hljs-number">64</span>位模式<br>nvm root <span class="hljs-selector-attr">[path]</span>： 设置 nvm 存储node.js不同版本的目录 ,如果未设置，将使用当前目录。 <br>-nvm version： 显示当前运行的nvm版本，可以简写为nvm v<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 40. 最小的k个数</title>
    <link href="/2021/01/02/%E5%89%91%E6%8C%87%20Offer%2040.%20%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
    <url>/2021/01/02/%E5%89%91%E6%8C%87%20Offer%2040.%20%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">4,5,1,6</span>,<span class="hljs-number">2,7,3,8</span>],<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[1,2,3,4]</span><br></code></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="排序找（此处省略）"><a href="#排序找（此处省略）" class="headerlink" title="排序找（此处省略）"></a>排序找（此处省略）</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>可以采用大顶堆来实现。好了你要问了为什么是大顶堆不是小顶堆呢？不是找最小的k个数吗？<br>我们分析一下思路<br>首先将4个数放入数组中形成</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>然后既然是最小的k个数，那么最大的6就不要了，把6换成2</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><p>如此循环，是不是很是熟悉，这不就是大顶堆的设计吗？</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>这里采用java的优先队列来实现，但是java中的优先队列默认是小顶堆，所以需要实现比较器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">GetLeastNumbers_Solution</span><span class="hljs-params">(<span class="hljs-type">int</span> [] input, <span class="hljs-type">int</span> k)</span> &#123;<br>        ArrayList&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> input.length;<br>        <span class="hljs-keyword">if</span>(len&lt;k||k==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-comment">// java 中优先队列默认小顶堆</span><br>        <span class="hljs-comment">// 这里用的lambda表达式实现比较器接口</span><br>        Queue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(k,(a,b)-&gt;(b-a));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (pq.size()&lt;k)&#123;<br>                pq.add(input[i]);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 置换了</span><br>                <span class="hljs-keyword">if</span>(input[i]&lt;pq.peek())&#123;<br>                    pq.poll();<br>                    pq.add(input[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        res.addAll(pq);<br>        <span class="hljs-keyword">return</span> res;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nuxt.js整合emelentui(自用)</title>
    <link href="/2020/12/31/nuxt.js%E6%95%B4%E5%90%88emelentui(%E8%87%AA%E7%94%A8)/"/>
    <url>/2020/12/31/nuxt.js%E6%95%B4%E5%90%88emelentui(%E8%87%AA%E7%94%A8)/</url>
    
    <content type="html"><![CDATA[<ul><li>创建element-ui.js</li><li>修改nuxt.config.js配置<br>其实脚手架已经帮我们搞好了，这篇文章就是基于手动整合为目的的<br>首先先创建项目，之后，在plugins在创建element-ui.js</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><br>Vue.use(ElementUI);<br></code></pre></td></tr></table></figure><p>,在nuxt.config.js里面</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">  plugins: [<br>    <span class="hljs-string">&#x27;@/plugins/element-ui&#x27;</span>   <br>]<br><br>  css: [<br>     <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. elementui各组件样式<br>    <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>,  <br>    <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/display.css&#x27;</span><br>  ],<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281642743.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nuxt.js</tag>
      
      <tag>elementui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寻找第K大数</title>
    <link href="/2020/12/31/%E5%AF%BB%E6%89%BE%E7%AC%ACK%E5%A4%A7%E6%95%B0/"/>
    <url>/2020/12/31/%E5%AF%BB%E6%89%BE%E7%AC%ACK%E5%A4%A7%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>有一个整数数组，请你根据快速排序的思路，找出数组中第K大的数。</p><p>给定一个整数数组a,同时给定它的大小n和要找的K(K在1到n之间)，请返回第K大的数，保证答案存在。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[1,3,5,2,2]</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h1><p>2</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>利用快排，每次排序后，将确定位置的数的下标与k-1比较</p><ul><li>若相等：返回</li><li>若大于k-1,则在左半部分递归查找</li><li>如小于k-1,则在右半部分递归查找</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Finder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKth</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> K)</span> &#123;<br>        <span class="hljs-keyword">return</span> findK(a,<span class="hljs-number">0</span>,n-<span class="hljs-number">1</span>,K);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> a[left];<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;a[right]&lt;pivot)&#123;<br>                right--;<br>            &#125;<br>            a[left] = a[right];<br>            <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;a[left]&gt;pivot)&#123;<br>                left++;<br>            &#125;<br>            a[right] = a[left];<br>        &#125;<br>        a[left] = pivot;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">findK</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right,<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> partition(a,left,right);<br>        <span class="hljs-keyword">if</span>(pivot==k-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> a[pivot];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pivot&gt;k-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> findK(a,left,pivot-<span class="hljs-number">1</span>,k);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> findK(a,pivot+<span class="hljs-number">1</span>,right,k);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2019/08/20/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2019/08/20/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="哈希表的基本介绍"><a href="#哈希表的基本介绍" class="headerlink" title="哈希表的基本介绍"></a>哈希表的基本介绍</h1><p><strong>散列表</strong>（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的<strong>数据结构</strong>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<strong>散列函数</strong>，存放记录的<strong>数组</strong>叫做<strong>散列表</strong>。</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281508148.png"></p><h1 id="哈希表-散列-Google上机题"><a href="#哈希表-散列-Google上机题" class="headerlink" title="哈希表(散列)-Google上机题"></a>哈希表(散列)-Google上机题</h1><p>看一个实际需求，google公司的一个上机题: </p><p>有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..),当输入该员工的id时,要求查找到该员工的 所有信息.</p><p>要求: 不使用数据库,尽量节省内存,速度越快越好&#x3D;&gt;哈希表(散列)</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ol><li>使用链表来实现哈希表, 该链表不带表头[即: 链表的第一个结点就存放雇员信息]</li><li>代码实现[增删改查(显示所有员工，按id查询)]</li></ol><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281508733.png"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTabDemo</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//创建哈希表</span><br>    <span class="hljs-type">HashTab</span> <span class="hljs-variable">hashTab</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashTab</span>(<span class="hljs-number">7</span>);<br><br>    <span class="hljs-comment">//写一个简单的菜单</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;add:  添加雇员&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;list: 显示雇员&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;find: 查找雇员&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;delete: 删除雇员&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;exit: 退出系统&quot;</span>);<br><br>      key = scanner.next();<br>      <span class="hljs-keyword">switch</span> (key) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>          System.out.println(<span class="hljs-string">&quot;输入id&quot;</span>);<br>          <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>          System.out.println(<span class="hljs-string">&quot;输入名字&quot;</span>);<br>          <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>          <span class="hljs-comment">//创建 雇员</span><br>          <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(id, name);<br>          hashTab.add(emp);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;list&quot;</span>:<br>          hashTab.list();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;find&quot;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入要查找的id&quot;</span>);<br>          id = scanner.nextInt();<br>          hashTab.findEmpById(id);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;delete&quot;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入要删除的id&quot;</span>);<br>          id = scanner.nextInt();<br>          hashTab.deleteEmpById(id);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>          scanner.close();<br>          System.exit(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">default</span>:<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">//创建HashTab 管理多条链表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTab</span> &#123;<br>  <span class="hljs-keyword">private</span> EmpLinkedList[] empLinkedListArray;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">//表示有多少条链表</span><br><br>  <span class="hljs-comment">//构造器</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashTab</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-built_in">this</span>.size = size;<br>    <span class="hljs-comment">//初始化empLinkedListArray</span><br>    empLinkedListArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpLinkedList</span>[size];<br>    <span class="hljs-comment">//？留一个坑, 这时不要分别初始化每个链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>      empLinkedListArray[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpLinkedList</span>();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//添加雇员</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Emp emp)</span> &#123;<br>    <span class="hljs-comment">//根据员工的id ,得到该员工应当添加到哪条链表</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">empLinkedListNO</span> <span class="hljs-operator">=</span> hashFun(emp.id);<br>    <span class="hljs-comment">//将emp 添加到对应的链表中</span><br>    empLinkedListArray[empLinkedListNO].add(emp);<br><br>  &#125;<br><br>  <span class="hljs-comment">//遍历所有的链表,遍历hashtab</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>      empLinkedListArray[i].list(i);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//根据输入的id,查找雇员</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findEmpById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-comment">//使用散列函数确定到哪条链表查找</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">empLinkedListNO</span> <span class="hljs-operator">=</span> hashFun(id);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empLinkedListArray[empLinkedListNO].findEmpById(id);<br>    <span class="hljs-keyword">if</span> (emp != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//找到</span><br>      System.out.printf(<span class="hljs-string">&quot;在第%d条链表中找到 雇员 id = %d\n&quot;</span>, (empLinkedListNO + <span class="hljs-number">1</span>), id);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;在哈希表中，没有找到该雇员~&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//根据输入的id,删除雇员</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-comment">//使用散列函数确定到哪条链表删除</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">empLinkedListNO</span> <span class="hljs-operator">=</span> hashFun(id);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> empLinkedListArray[empLinkedListNO].deleteEmpById(id);<br>    <span class="hljs-keyword">if</span> (flag) &#123;<span class="hljs-comment">//找到</span><br>      System.out.printf(<span class="hljs-string">&quot;在第%d条链表中找到 雇员 id = %d，删除成功\n&quot;</span>, (empLinkedListNO + <span class="hljs-number">1</span>), id);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;在哈希表中，没有找到该雇员，无法删除~&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//编写散列函数, 使用一个简单取模法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashFun</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-keyword">return</span> id % size;<br>  &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">//表示一个雇员</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br>  <span class="hljs-keyword">public</span> String name;<br>  <span class="hljs-keyword">public</span> Emp next; <span class="hljs-comment">//next 默认为 null</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-built_in">this</span>.name = name;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//创建EmpLinkedList ,表示链表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpLinkedList</span> &#123;<br>  <span class="hljs-comment">//头指针，执行第一个Emp,因此我们这个链表的head 是直接指向第一个Emp</span><br>  <span class="hljs-keyword">private</span> Emp head; <span class="hljs-comment">//默认null</span><br><br>  <span class="hljs-comment">//添加雇员到链表</span><br>  <span class="hljs-comment">//说明</span><br>  <span class="hljs-comment">//1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大</span><br>  <span class="hljs-comment">//   因此我们将该雇员直接加入到本链表的最后即可</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Emp emp)</span> &#123;<br>    <span class="hljs-comment">//如果是添加第一个雇员</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>      head = emp;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">curEmp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//说明到链表最后</span><br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      curEmp = curEmp.next; <span class="hljs-comment">//后移</span><br>    &#125;<br>    <span class="hljs-comment">//退出时直接将emp 加入链表</span><br>    curEmp.next = emp;<br>  &#125;<br><br>  <span class="hljs-comment">//遍历链表的雇员信息</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//说明链表为空</span><br>      System.out.println(<span class="hljs-string">&quot;第 &quot;</span> + (no + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; 链表为空&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;第 &quot;</span> + (no + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; 链表的信息为&quot;</span>);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">curEmp</span> <span class="hljs-operator">=</span> head; <span class="hljs-comment">//辅助指针</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      System.out.printf(<span class="hljs-string">&quot; =&gt; id=%d name=%s\t&quot;</span>, curEmp.id, curEmp.name);<br>      <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//说明curEmp已经是最后结点</span><br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      curEmp = curEmp.next; <span class="hljs-comment">//后移，遍历</span><br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class="hljs-comment">//根据id查找雇员,如果查找到，就返回Emp, 如果没有找到，就返回null</span><br>  <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">findEmpById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-comment">//判断链表是否为空</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//辅助指针</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">curEmp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">if</span> (curEmp.id == id) &#123;<span class="hljs-comment">//找到</span><br>        <span class="hljs-keyword">break</span>;<span class="hljs-comment">//这时curEmp就指向要查找的雇员</span><br>      &#125;<br>      <span class="hljs-comment">//退出</span><br>      <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//说明遍历当前链表没有找到该雇员</span><br>        curEmp = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      curEmp = curEmp.next;<span class="hljs-comment">//以后</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> curEmp;<br>  &#125;<br><br>  <span class="hljs-comment">//根据删除雇员,如果删除成功，1, 如果没有找到，就返回0</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标志是否找到待删除节点的</span><br>    <span class="hljs-comment">//判断链表是否为空</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>      <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-comment">//辅助指针</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">curEmp</span> <span class="hljs-operator">=</span> head;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//已经到链表的最后</span><br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (curEmp.next.id == id) &#123;<br>        <span class="hljs-comment">//找到的待删除节点的前一个节点temp</span><br>        curEmp.next = curEmp.next.next;<br>        flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      curEmp = curEmp.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>斐波那契-黄金分割法查找算法</title>
    <link href="/2019/08/20/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91-%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2%E6%B3%95%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <url>/2019/08/20/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91-%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2%E6%B3%95%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="斐波那契-黄金分割法-查找基本介绍"><a href="#斐波那契-黄金分割法-查找基本介绍" class="headerlink" title="斐波那契(黄金分割法)查找基本介绍:"></a>斐波那契(黄金分割法)查找基本介绍:</h1><ol><li>黄金分割点是指把一条<strong>线段</strong>分割为两部分，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是<strong>0.618</strong>。由于按此比例设计的造型十分美丽，因此称为<strong>黄金分割</strong>，也称为<strong>中外比</strong>。这是一个神奇的数字，会带来意向不大的效果。</li><li>斐波那契数列 <strong>{1, 1, 2, 3, 5, 8, 13, 21, 34, 55 }</strong> 发现斐波那契数列的两个相邻数 的比例，无限接近 黄金分割值<strong>0.618</strong><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281406472.png"></li></ol><h1 id="斐波那契-黄金分割法-原理"><a href="#斐波那契-黄金分割法-原理" class="headerlink" title="斐波那契(黄金分割法)原理:"></a>斐波那契(黄金分割法)原理:</h1><p>斐波那契查找原理与前两种相似，仅仅改变了中间结点（mid）的位置，mid不再是中间或插值得到，而是位于黄金分割点附近，即<strong>mid&#x3D;low+F(k-1)-1</strong>（F代表斐波那契数列），如下图所示</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281406085.png"></p><h2 id="对F-k-1-1的理解："><a href="#对F-k-1-1的理解：" class="headerlink" title="对F(k-1)-1的理解："></a>对F(k-1)-1的理解：</h2><ol><li>由斐波那契数列 F[k]&#x3D;F[k-1]+F[k-2]的性质，可以得到（<strong>F[k]-1）&#x3D;（F[k-1]-1）+（F[k-2]-1）+1</strong>。该式说明：只要顺序表的长度为F[k]-1，则可以将该表分成长度为<strong>F[k-1]-1和F[k-2]-1</strong>的两段，即如上图所示。从而中间位置为<strong>mid&#x3D;low+F(k-1)-1</strong>           </li><li>类似的，每一子段也可以用相同的方式分割</li><li>但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1到F[k]-1位置），都赋为n位置的值即可，如下面代码。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(n&gt;fib(k)-<span class="hljs-number">1</span>)&#123;<br>    k++;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciSearch</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">89</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1234</span>&#125;;<br><br>    System.out.println(<span class="hljs-string">&quot;index=&quot;</span> + fibSearch(arr, <span class="hljs-number">1024</span>));<span class="hljs-comment">// 0</span><br><br>  &#125;<br><br>  <span class="hljs-comment">//因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</span><br>  <span class="hljs-comment">//非递归方法得到一个斐波那契数列</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] fib() &#123;<br>    <span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; maxSize; i++) &#123;<br>      f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>  &#125;<br><br>  <span class="hljs-comment">//编写斐波那契查找算法</span><br>  <span class="hljs-comment">//使用非递归的方式编写算法</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> a   数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key 我们需要查找的关键码(值)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回对应的下标，如果没有-1</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//表示斐波那契分割数值的下标</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//存放mid值</span><br>    <span class="hljs-type">int</span> f[] = fib(); <span class="hljs-comment">//获取到斐波那契数列</span><br>    <span class="hljs-comment">//获取到斐波那契分割数值的下标</span><br>    <span class="hljs-keyword">while</span> (high &gt; f[k] - <span class="hljs-number">1</span>) &#123;<br>      k++;<br>    &#125;<br>    <span class="hljs-comment">//因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]</span><br>    <span class="hljs-comment">//不足的部分会使用0填充</span><br>    <span class="hljs-type">int</span>[] temp = Arrays.copyOf(a, f[k]);<br>    <span class="hljs-comment">//实际上需求使用a数组最后的数填充 temp</span><br>    <span class="hljs-comment">//举例:</span><br>    <span class="hljs-comment">//temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125;  =&gt; &#123;1,8, 10, 89, 1000, 1234, 1234, 1234,&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> high + <span class="hljs-number">1</span>; i &lt; temp.length; i++) &#123;<br>      temp[i] = a[high];<br>    &#125;<br><br>    <span class="hljs-comment">// 使用while来循环处理，找到我们的数 key</span><br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123; <span class="hljs-comment">// 只要这个条件满足，就可以找</span><br>      mid = low + f[k - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (key &lt; temp[mid]) &#123; <span class="hljs-comment">//我们应该继续向数组的前面查找(左边)</span><br>        high = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//为甚是 k--</span><br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. 全部元素 = 前面的元素 + 后边元素</span><br>        <span class="hljs-comment">//2. f[k] = f[k-1] + f[k-2]</span><br>        <span class="hljs-comment">//因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]</span><br>        <span class="hljs-comment">//即 在 f[k-1] 的前面继续查找 k--</span><br>        <span class="hljs-comment">//即下次循环 mid = f[k-1-1]-1</span><br>        k--;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; temp[mid]) &#123; <span class="hljs-comment">// 我们应该继续向数组的后面查找(右边)</span><br>        low = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//为什么是k -=2</span><br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. 全部元素 = 前面的元素 + 后边元素</span><br>        <span class="hljs-comment">//2. f[k] = f[k-1] + f[k-2]</span><br>        <span class="hljs-comment">//3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-2] = f[k-3] + f[k-4]</span><br>        <span class="hljs-comment">//4. 即在f[k-2] 的前面进行查找 k -=2</span><br>        <span class="hljs-comment">//5. 即下次循环 mid = f[k - 1 - 2] - 1</span><br>        k -= <span class="hljs-number">2</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//找到</span><br>        <span class="hljs-comment">//需要确定，返回的是哪个下标</span><br>        <span class="hljs-keyword">if</span> (mid &lt;= high) &#123;<br>          <span class="hljs-keyword">return</span> mid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> high;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插值查找</title>
    <link href="/2019/08/17/%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE/"/>
    <url>/2019/08/17/%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="插值查找原理介绍"><a href="#插值查找原理介绍" class="headerlink" title="插值查找原理介绍:"></a>插值查找原理介绍:</h1><ol><li>插值查找算法类似于二分查找，不同的是插值查找每次从自适应mid处开始查找。</li><li>将折半查找中的求mid 索引的公式 , low 表示左边索引left, high表示右边索引right. key 就是前面我们讲的  findVal</li></ol><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281401781.png"></p><ol><li>int mid &#x3D; low + (high - low) * (key - arr[low]) &#x2F; (arr[high] - arr[low])  ;&#x2F;<em>插值索引</em>&#x2F; 对应前面的代码公式：int mid &#x3D; left + (right – left) * (findVal – arr[left]) &#x2F; (arr[right] – arr[left])</li><li>举例说明插值查找算法 1-100 的数组</li></ol><p>数组  arr &#x3D; [1, 2, 3, ……., 100]</p><p>假如我们需要查找的值  1 </p><p>使用二分查找的话，我们需要多次递归，才能找到 1</p><p>使用插值查找算法<br>int mid &#x3D; left + (right – left) * (findVal – arr[left]) &#x2F; (arr[right] – arr[left])</p><p>int mid &#x3D; 0 + (99 - 0) * (1 - 1)&#x2F; (100 - 1) &#x3D; 0 + 99 * 0 &#x2F; 99 &#x3D; 0 </p><p>比如我们查找的值 100</p><p>int mid &#x3D; 0 + (99 - 0) * (100 - 1) &#x2F; (100 - 1) &#x3D; 0 + 99 * 99 &#x2F; 99 &#x3D; 0 + 99 &#x3D; 99 </p><h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><ol><li>对于数据量较大，关键字分布比较均匀的查找表来说，采用插值查找, 速度较快.</li><li>关键字分布不均匀的情况下，该方法不一定比折半查找要好</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertValueSearch</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>      arr[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> insertValueSearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 编写插值查找算法，插值查找算法，也要求数组是有序的</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> arr     数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> left    左边索引</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> right   右边索引</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> findVal 查找值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 如果找到，就返回对应的下标，如果没有找到，返回-1</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertValueSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> findVal)</span> &#123;<br><br>    System.out.println(<span class="hljs-string">&quot;插值查找次数~~&quot;</span>);<br><br>    <span class="hljs-comment">//注意：findVal &lt; arr[0]  和  findVal &gt; arr[arr.length - 1] 必须需要</span><br>    <span class="hljs-comment">//否则我们得到的 mid 可能越界</span><br>    <span class="hljs-keyword">if</span> (left &gt; right || findVal &lt; arr[<span class="hljs-number">0</span>] || findVal &gt; arr[arr.length - <span class="hljs-number">1</span>]) &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 求出mid, 自适应</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> arr[mid];<br>    <span class="hljs-keyword">if</span> (findVal &gt; midVal) &#123; <span class="hljs-comment">// 说明应该向右边递归</span><br>      <span class="hljs-keyword">return</span> insertValueSearch(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal) &#123; <span class="hljs-comment">// 说明向左递归查找</span><br>      <span class="hljs-keyword">return</span> insertValueSearch(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找法</title>
    <link href="/2019/08/17/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
    <url>/2019/08/17/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ol><li><p>首先确定该数组的中间的下标mid &#x3D; (left + right) &#x2F; 2</p></li><li><p>然后让需要查找的数 findVal 和 arr[mid] 比较</p><ul><li>findVal &gt; arr[mid] ,  说明你要查找的数在mid 的右边, 因此需要递归的向右查找</li><li>findVal &lt; arr[mid], 说明你要查找的数在mid 的左边, 因此需要递归的向左查找</li><li>findVal &#x3D;&#x3D; arr[mid] 说明找到，就返回</li></ul></li><li><p>什么时候我们需要结束递归.</p></li></ol><ul><li>找到就结束递归 </li><li>递归完整个数组，仍然没有找到findVal ，也需要结束递归  当 left &gt; right 就需要退出</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">//注意：使用二分查找的前提是 该数组是有序的.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearch</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>&#125;;<br>    List&lt;Integer&gt; resIndexList = binarySearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;resIndexList=&quot;</span> + resIndexList);<br>  &#125;<br>  <span class="hljs-comment">// 二分查找算法</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> arr     数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> left    左边的索引</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> right   右边的索引</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> findVal 要查找的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 如果找到就返回下标，如果没有找到，就返回 -1</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> findVal)</span> &#123;<br>    <span class="hljs-comment">// 当 left &gt; right 时，说明递归整个数组，但是没有找到</span><br>    <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> arr[mid];<br>    <span class="hljs-keyword">if</span> (findVal &gt; midVal) &#123; <span class="hljs-comment">// 向 右递归</span><br>      <span class="hljs-keyword">return</span> binarySearch(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal) &#123; <span class="hljs-comment">// 向左递归</span><br>      <span class="hljs-keyword">return</span> binarySearch(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="当存在多个重复值得时候"><a href="#当存在多个重复值得时候" class="headerlink" title="当存在多个重复值得时候"></a>当存在多个重复值得时候</h1><ul><li>如{1,8, 10, 89, 1000, 1000，1234} 当一个有序数组中，</li><li>有多个相同的数值时，如何将所有的数值都查找到，比如这里的 1000</li><li>思路分析</li><li><ol><li>在找到mid 索引值，不要马上返回</li></ol></li><li><ol start="2"><li>向mid 索引值的左边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</li></ol></li><li><ol start="3"><li>向mid 索引值的右边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</li></ol></li><li><ol start="4"><li>将Arraylist返回<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//注意：使用二分查找的前提是 该数组是有序的.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearch</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">89</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1234</span>&#125;;<br>    List&lt;Integer&gt; integers = binarySearch2(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">1000</span>);<br>    System.out.println(integers);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">binarySearch2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> findVal)</span> &#123;<br>    <span class="hljs-comment">// 当 left &gt; right 时，说明递归整个数组，但是没有找到</span><br>    <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> arr[mid];<br><br>    <span class="hljs-keyword">if</span> (findVal &gt; midVal) &#123; <span class="hljs-comment">// 向 右递归</span><br>      <span class="hljs-keyword">return</span> binarySearch2(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal) &#123; <span class="hljs-comment">// 向左递归</span><br>      <span class="hljs-keyword">return</span> binarySearch2(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      List&lt;Integer&gt; resIndexlist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>      <span class="hljs-comment">//向mid 索引值的左边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> mid - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || arr[temp] != findVal) &#123;<span class="hljs-comment">//退出</span><br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//否则，就temp 放入到 resIndexlist</span><br>        resIndexlist.add(temp);<br>        temp -= <span class="hljs-number">1</span>; <span class="hljs-comment">//temp左移</span><br>      &#125;<br>      resIndexlist.add(mid);  <span class="hljs-comment">//</span><br><br>      <span class="hljs-comment">//向mid 索引值的右边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</span><br>      temp = mid + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp &gt; arr.length - <span class="hljs-number">1</span> || arr[temp] != findVal) &#123;<span class="hljs-comment">//退出</span><br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//否则，就temp 放入到 resIndexlist</span><br>        resIndexlist.add(temp);<br>        temp += <span class="hljs-number">1</span>; <span class="hljs-comment">//temp右移</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> resIndexlist;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基数排序</title>
    <link href="/2019/08/17/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/08/17/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="基数排序-桶排序-介绍"><a href="#基数排序-桶排序-介绍" class="headerlink" title="基数排序(桶排序)介绍:"></a>基数排序(桶排序)介绍:</h1><p>1）基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用</p><p>2）基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法</p><p>3）基数排序(Radix Sort)是<strong>桶排序</strong>的扩展</p><p>4）基数排序是1887年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><p>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><h1 id="图文说明"><a href="#图文说明" class="headerlink" title="图文说明"></a>图文说明</h1><p>将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序。</p><p>第1轮排序  [按照<strong>个位排序</strong>]: </p><p>说明： 事先准备10个数组(10个桶)， 0-9 分别对应 位数的 0-9</p><ul><li>将 各个数，按照个位大小 放入到 对应的 各个数组中 </li><li>然后从 0-9 个数组&#x2F;桶，依次，按照加入元素的先后顺序取出</li></ul><p>第1轮排序后：542 53 3 14 214 748 </p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281509603.png"></p><p>第2轮排序  [按照<strong>十位</strong>排序]</p><ul><li>将 各个数，按照十位大小 放入到 对应的 各个数组中 </li><li>然后从 0-9 个数组&#x2F;桶，依次，按照加入元素的先后顺序取出<br>第2轮排序后： 3 14 214 542 748 53</li></ul><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281509601.png"></p><p>第3轮排序  [按照<strong>百位</strong>排序]</p><ul><li>将 各个数，按照百位大小 放入到 对应的 各个数组中 </li><li>然后从 0-9 个数组&#x2F;桶，依次，按照加入元素的先后顺序取出</li></ul><p>第3轮排序后：3 14 53 214 542 748  【ok】</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281509021.png"></p><h1 id="逐步推导"><a href="#逐步推导" class="headerlink" title="逐步推导"></a>逐步推导</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RadixSort</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">53</span>, <span class="hljs-number">3</span>, <span class="hljs-number">542</span>, <span class="hljs-number">748</span>, <span class="hljs-number">14</span>, <span class="hljs-number">214</span>&#125;;<br>    System.out.println(<span class="hljs-string">&quot;基数排序前 &quot;</span> + Arrays.toString(arr));<br>    radixSort(arr);<br>    System.out.println(<span class="hljs-string">&quot;基数排序后 &quot;</span> + Arrays.toString(arr));<br>  &#125;<br><br>  <span class="hljs-comment">//基数排序方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-comment">//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组</span><br>    <span class="hljs-comment">//说明</span><br>    <span class="hljs-comment">//1. 二维数组包含10个一维数组</span><br>    <span class="hljs-comment">//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length</span><br>    <span class="hljs-comment">//3. 明确，基数排序是使用空间换时间的经典算法</span><br>    <span class="hljs-type">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][arr.length];<br><br>    <span class="hljs-comment">//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数</span><br>    <span class="hljs-comment">//可以这里理解</span><br>    <span class="hljs-comment">//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数</span><br>    <span class="hljs-type">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><br>    <span class="hljs-comment">//第1轮(针对每个元素的个位进行排序处理)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>      <span class="hljs-comment">//取出每个元素的个位的值</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">digitOfElement</span> <span class="hljs-operator">=</span> arr[j] / <span class="hljs-number">1</span> % <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">//放入到对应的桶中</span><br>      bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];<br>      bucketElementCounts[digitOfElement]++;<br>    &#125;<br>    <span class="hljs-comment">//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//遍历每一桶，并将桶中是数据，放入到原数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;<br>      <span class="hljs-comment">//如果桶中，有数据，我们才放入到原数组</span><br>      <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//循环该桶即第k个桶(即第k个一维数组), 放入</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;<br>          <span class="hljs-comment">//取出元素放入到arr</span><br>          arr[index++] = bucket[k][l];<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">//第l轮处理后，需要将每个 bucketElementCounts[k] = 0 </span><br>      bucketElementCounts[k] = <span class="hljs-number">0</span>;<br><br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;第1轮，对个位的排序处理 arr =&quot;</span> + Arrays.toString(arr));<br><br><br>    <span class="hljs-comment">//==========================================</span><br><br>    <span class="hljs-comment">//第2轮(针对每个元素的十位进行排序处理)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>      <span class="hljs-comment">// 取出每个元素的十位的值</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">digitOfElement</span> <span class="hljs-operator">=</span> arr[j] / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>; <span class="hljs-comment">//748 / 10 =&gt; 74 % 10 =&gt; 4</span><br>      <span class="hljs-comment">// 放入到对应的桶中</span><br>      bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];<br>      bucketElementCounts[digitOfElement]++;<br>    &#125;<br>    <span class="hljs-comment">// 按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)</span><br>    index = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历每一桶，并将桶中是数据，放入到原数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;<br>      <span class="hljs-comment">// 如果桶中，有数据，我们才放入到原数组</span><br>      <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 循环该桶即第k个桶(即第k个一维数组), 放入</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;<br>          <span class="hljs-comment">// 取出元素放入到arr</span><br>          arr[index++] = bucket[k][l];<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">//第2轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！</span><br>      bucketElementCounts[k] = <span class="hljs-number">0</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;第2轮，对个位的排序处理 arr =&quot;</span> + Arrays.toString(arr));<br><br><br>    <span class="hljs-comment">//第3轮(针对每个元素的百位进行排序处理)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>      <span class="hljs-comment">// 取出每个元素的百位的值</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">digitOfElement</span> <span class="hljs-operator">=</span> arr[j] / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>; <span class="hljs-comment">// 748 / 100 =&gt; 7 % 10 = 7</span><br>      <span class="hljs-comment">// 放入到对应的桶中</span><br>      bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];<br>      bucketElementCounts[digitOfElement]++;<br>    &#125;<br>    <span class="hljs-comment">// 按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)</span><br>    index = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历每一桶，并将桶中是数据，放入到原数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;<br>      <span class="hljs-comment">// 如果桶中，有数据，我们才放入到原数组</span><br>      <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 循环该桶即第k个桶(即第k个一维数组), 放入</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;<br>          <span class="hljs-comment">// 取出元素放入到arr</span><br>          arr[index++] = bucket[k][l];<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">//第3轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！</span><br>      bucketElementCounts[k] = <span class="hljs-number">0</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;第3轮，对个位的排序处理 arr =&quot;</span> + Arrays.toString(arr));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RadixSort</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">53</span>, <span class="hljs-number">3</span>, <span class="hljs-number">542</span>, <span class="hljs-number">748</span>, <span class="hljs-number">14</span>, <span class="hljs-number">214</span>&#125;;<br>    System.out.println(<span class="hljs-string">&quot;基数排序前 &quot;</span> + Arrays.toString(arr));<br>    radixSort(arr);<br>    System.out.println(<span class="hljs-string">&quot;基数排序后 &quot;</span> + Arrays.toString(arr));<br>  &#125;<br><br>  <span class="hljs-comment">//基数排序方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><br>    <span class="hljs-comment">//根据前面的推导过程，我们可以得到最终的基数排序代码</span><br><br>    <span class="hljs-comment">//1. 得到数组中最大的数的位数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">//假设第一数就是最大数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>        max = arr[i];<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//得到最大数是几位数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> (max + <span class="hljs-string">&quot;&quot;</span>).length();<br><br><br>    <span class="hljs-comment">//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组</span><br>    <span class="hljs-comment">//说明</span><br>    <span class="hljs-comment">//1. 二维数组包含10个一维数组</span><br>    <span class="hljs-comment">//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length</span><br>    <span class="hljs-comment">//3. 明确，基数排序是使用空间换时间的经典算法</span><br>    <span class="hljs-type">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][arr.length];<br><br>    <span class="hljs-comment">//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数</span><br>    <span class="hljs-comment">//可以这里理解</span><br>    <span class="hljs-comment">//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数</span><br>    <span class="hljs-type">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><br><br>    <span class="hljs-comment">//这里我们使用循环将代码处理</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n *= <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-comment">//(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>        <span class="hljs-comment">//取出每个元素的对应位的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">digitOfElement</span> <span class="hljs-operator">=</span> arr[j] / n % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//放入到对应的桶中</span><br>        bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];<br>        bucketElementCounts[digitOfElement]++;<br>      &#125;<br>      <span class="hljs-comment">//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-comment">//遍历每一桶，并将桶中是数据，放入到原数组</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;<br>        <span class="hljs-comment">//如果桶中，有数据，我们才放入到原数组</span><br>        <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-comment">//循环该桶即第k个桶(即第k个一维数组), 放入</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;<br>            <span class="hljs-comment">//取出元素放入到arr</span><br>            arr[index++] = bucket[k][l];<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">//第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 </span><br>        bucketElementCounts[k] = <span class="hljs-number">0</span>;<br><br>      &#125;<br>      <span class="hljs-comment">//System.out.println(&quot;第&quot;+(i+1)+&quot;轮，对个位的排序处理 arr =&quot; + Arrays.toString(arr));</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="基数排序的说明"><a href="#基数排序的说明" class="headerlink" title="基数排序的说明:"></a>基数排序的说明:</h1><ul><li>基数排序是对传统桶排序的扩展，速度很快.</li><li>基数排序是经典的空间换时间的方式，占用内存很大, 当对海量数据排序时，容易造成 OutOfMemoryError 。</li><li>基数排序时稳定的。[注:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]&#x3D;r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的]</li><li><strong>有负数的数组，我们不用基数排序来进行排序</strong>, 如果要支持负数，参考: <a href="https://code.i-harness.com/zh-CN/q/e98fa9">https://code.i-harness.com/zh-CN/q/e98fa9</a></li></ul><h1 id="常用排序算法对比"><a href="#常用排序算法对比" class="headerlink" title="常用排序算法对比"></a>常用排序算法对比</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281509216.png"></p><h2 id="相关术语解释："><a href="#相关术语解释：" class="headerlink" title="相关术语解释："></a>相关术语解释：</h2><ul><li><strong>稳定</strong>：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面；</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面；</li><li><strong>内排序</strong>：所有排序操作都在内存中完成；</li><li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li><strong>时间复杂度</strong>： 一个算法执行所耗费的时间。</li><li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</li><li><strong>n</strong>: 数据规模</li><li><strong>k</strong>: “桶”的个数</li><li><strong>In-place</strong>:    不占用额外内存</li><li><strong>Out-place</strong>: 占用额外内存</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2019/08/14/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/08/14/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h1><p>快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281510343.png"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码将基准变成最左边的值，左边都比中间值小，右边都比中间值大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickSort</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">34</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">9</span>,<span class="hljs-number">100</span>&#125;;<br>    quickSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;arr=&quot;</span> + Arrays.toString(arr));<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-type">int</span> i, j, t, temp;<br>    <span class="hljs-keyword">if</span> (left &gt; right)<br>      <span class="hljs-keyword">return</span>;<br>    temp = arr[left]; <span class="hljs-comment">//temp中存的就是基准数</span><br>    i = left;<br>    j = right;<br>    <span class="hljs-keyword">while</span> (i != j) &#123; <span class="hljs-comment">//顺序很重要，要先从右边开始找</span><br>      <span class="hljs-keyword">while</span> (arr[j] &gt;= temp &amp;&amp; i &lt; j)<br>        j--;<br>      <span class="hljs-keyword">while</span> (arr[i] &lt;= temp &amp;&amp; i &lt; j)<span class="hljs-comment">//再找右边的</span><br>        i++;<br>      <span class="hljs-keyword">if</span> (i &lt; j)<span class="hljs-comment">//交换两个数在数组中的位置</span><br>      &#123;<br>        t = arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = t;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//最终将基准数归位</span><br>    arr[left] = arr[i];<br>    arr[i] = temp;<br>    quickSort(arr, left, i - <span class="hljs-number">1</span>);<span class="hljs-comment">//继续处理左边的，这里是一个递归的过程</span><br>    quickSort(arr, i + <span class="hljs-number">1</span>, right);<span class="hljs-comment">//继续处理右边的 ，这里是一个递归的过程</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序</title>
    <link href="/2019/08/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/08/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="归并排序介绍"><a href="#归并排序介绍" class="headerlink" title="归并排序介绍:"></a>归并排序介绍:</h1><p>归并排序（MERGE-SORT）是利用<strong>归并</strong>的思想实现的排序方法，该算法采用经典的<strong>分治</strong>（divide-and-conquer）策略（分治法将问题<strong>分</strong>(divide)成一些小的问题然后递归求解，而<strong>治</strong>(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想:"></a>基本思想:</h1><p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程。<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281407544.png"><br>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如下图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281505860.png"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281505127.png"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MergetSort</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>&#125;;<br>    System.out.println(<span class="hljs-string">&quot;排序前&quot;</span>);<br>    <span class="hljs-type">int</span> temp[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length]; <span class="hljs-comment">//归并排序需要一个额外空间</span><br>    mergeSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, temp);<br>    System.out.println(<span class="hljs-string">&quot;归并排序后=&quot;</span> + Arrays.toString(arr));<br>  &#125;<br><br>  <span class="hljs-comment">//分+合方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br>    <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>; <span class="hljs-comment">//中间索引</span><br>      <span class="hljs-comment">//向左递归进行分解</span><br>      mergeSort(arr, left, mid, temp);<br>      <span class="hljs-comment">//向右递归进行分解</span><br>      mergeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<br>      <span class="hljs-comment">//合并</span><br>      merge(arr, left, mid, right, temp);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//合并的方法</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> arr   排序的原始数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> left  左边有序序列的初始索引</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> mid   中间索引</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> right 右边索引</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> temp  做中转的数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;-------------------------------------&quot;</span>);<span class="hljs-comment">// 打印arr.length-1次</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left; <span class="hljs-comment">// 初始化i, 左边有序序列的初始索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>; <span class="hljs-comment">//初始化j, 右边有序序列的初始索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 指向temp数组的当前索引</span><br><br>    <span class="hljs-comment">//(一)</span><br>    <span class="hljs-comment">//先把左右两边(有序)的数据按照规则填充到temp数组</span><br>    <span class="hljs-comment">//直到左右两边的有序序列，有一边处理完毕为止</span><br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class="hljs-comment">//继续</span><br>      <span class="hljs-comment">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span><br>      <span class="hljs-comment">//即将左边的当前元素，填充到 temp数组</span><br>      <span class="hljs-comment">//然后 t++, i++</span><br>      <span class="hljs-keyword">if</span> (arr[i] &lt;= arr[j]) &#123;<br>        temp[t] = arr[i];<br>        t += <span class="hljs-number">1</span>;<br>        i += <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//反之,将右边有序序列的当前元素，填充到temp数组</span><br>        temp[t] = arr[j];<br>        t += <span class="hljs-number">1</span>;<br>        j += <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//(二)</span><br>    <span class="hljs-comment">//把有剩余数据的一边的数据依次全部填充到temp</span><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) &#123; <span class="hljs-comment">//左边的有序序列还有剩余的元素，就全部填充到temp</span><br>      temp[t] = arr[i];<br>      t += <span class="hljs-number">1</span>;<br>      i += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (j &lt;= right) &#123; <span class="hljs-comment">//右边的有序序列还有剩余的元素，就全部填充到temp</span><br>      temp[t] = arr[j];<br>      t += <span class="hljs-number">1</span>;<br>      j += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//(三)</span><br>    <span class="hljs-comment">//将temp数组的元素拷贝到arr</span><br>    <span class="hljs-comment">//注意，并不是每次都拷贝所有</span><br>    t = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">tempLeft</span> <span class="hljs-operator">=</span> left; <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//第一次合并 tempLeft = 0 , right = 1 //  tempLeft = 2  right = 3 // tL=0 ri=3</span><br>    <span class="hljs-comment">//最后一次 tempLeft = 0  right = 7</span><br>    <span class="hljs-keyword">while</span> (tempLeft &lt;= right) &#123;<br>      arr[tempLeft] = temp[t];<br>      t += <span class="hljs-number">1</span>;<br>      tempLeft += <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希尔排序</title>
    <link href="/2019/07/26/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/26/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="简单插入排序存在的问题"><a href="#简单插入排序存在的问题" class="headerlink" title="简单插入排序存在的问题"></a>简单插入排序存在的问题</h1><p>数组 arr &#x3D; {2,3,4,5,6,1} 这时需要插入的数 1(最小), 这样的过程是：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">&#123;<span class="hljs-number">2,3,4,5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>&#125;<br>&#123;<span class="hljs-number">2,3,4,5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#123;<span class="hljs-number">2,3,4,4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#123;<span class="hljs-number">2,3,3,4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#123;<span class="hljs-number">2,2,3,4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#123;<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><p>结论: 当需要插入的数是较小的数时，后移的次数明显增多，对效率有影响.</p><h1 id="希尔排序法介绍"><a href="#希尔排序法介绍" class="headerlink" title="希尔排序法介绍"></a>希尔排序法介绍</h1><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。</p><h1 id="希尔排序法基本思想"><a href="#希尔排序法基本思想" class="headerlink" title="希尔排序法基本思想"></a>希尔排序法基本思想</h1><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281520454.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281520501.png"></p><h1 id="采用交换法的希尔排序"><a href="#采用交换法的希尔排序" class="headerlink" title="采用交换法的希尔排序"></a>采用交换法的希尔排序</h1><h2 id="推演版本"><a href="#推演版本" class="headerlink" title="推演版本"></a>推演版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShellSort</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>&#125;;<br>    ShellSort(arr);<br>    Arrays.toString(arr);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-comment">// 希尔排序的第1轮排序</span><br>    <span class="hljs-comment">// 因为第1轮排序，是将10个数据分成了 5组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; i &lt; arr.length; i++) &#123;<br>      <span class="hljs-comment">// 遍历各组中所有的元素(共5组，每组有2个元素), 步长5</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">5</span>; j &gt;= <span class="hljs-number">0</span>; j -= <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-comment">// 如果当前元素大于加上步长后的那个元素，说明交换</span><br>        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">5</span>]) &#123;<br>          temp = arr[j];<br>          arr[j] = arr[j + <span class="hljs-number">5</span>];<br>          arr[j + <span class="hljs-number">5</span>] = temp;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;希尔排序1轮后=&quot;</span> + Arrays.toString(arr));<span class="hljs-comment">// 希尔排序1轮后=[3, 5, 1, 6, 0, 8, 9, 4, 7, 2]</span><br><br>    <span class="hljs-comment">// 希尔排序的第2轮排序</span><br>    <span class="hljs-comment">// 因为第2轮排序，是将10个数据分成了 5/2 = 2组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; arr.length; i++) &#123;<br>      <span class="hljs-comment">// 遍历各组中所有的元素(共5组，每组有2个元素), 步长5</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">2</span>; j &gt;= <span class="hljs-number">0</span>; j -= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// 如果当前元素大于加上步长后的那个元素，说明交换</span><br>        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">2</span>]) &#123;<br>          temp = arr[j];<br>          arr[j] = arr[j + <span class="hljs-number">2</span>];<br>          arr[j + <span class="hljs-number">2</span>] = temp;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;希尔排序2轮后=&quot;</span> + Arrays.toString(arr));<span class="hljs-comment">//希尔排序2轮后=[0, 2, 1, 4, 3, 5, 7, 6, 9, 8]</span><br><br>    <span class="hljs-comment">// 希尔排序的第3轮排序</span><br>    <span class="hljs-comment">// 因为第3轮排序，是将10个数据分成了 2/2 = 1组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>      <span class="hljs-comment">// 遍历各组中所有的元素(共5组，每组有2个元素), 步长5</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j -= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 如果当前元素大于加上步长后的那个元素，说明交换</span><br>        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>          temp = arr[j];<br>          arr[j] = arr[j + <span class="hljs-number">1</span>];<br>          arr[j + <span class="hljs-number">1</span>] = temp;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;希尔排序3轮后=&quot;</span> + Arrays.toString(arr));<span class="hljs-comment">//希尔排序3轮后=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="优化版本"><a href="#优化版本" class="headerlink" title="优化版本"></a>优化版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShellSort</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>&#125;;<br>    ShellSort(arr);<br>    Arrays.toString(arr);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 根据前面的逐步分析，使用循环处理</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// 遍历各组中所有的元素(共gap组，每组有个元素), 步长gap</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap) &#123;<br>          <span class="hljs-comment">// 如果当前元素大于加上步长后的那个元素，说明交换</span><br>          <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;<br>            temp = arr[j];<br>            arr[j] = arr[j + gap];<br>            arr[j + gap] = temp;<br>          &#125;<br>        &#125;<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;希尔排序第&quot;</span> + (++count) + <span class="hljs-string">&quot;轮 =&quot;</span> + Arrays.toString(arr));<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="采用移动法的希尔排序"><a href="#采用移动法的希尔排序" class="headerlink" title="采用移动法的希尔排序"></a>采用移动法的希尔排序</h1><p>对交换式的希尔排序进行优化-&gt;移位法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>  <span class="hljs-comment">// 增量gap, 并逐步的缩小增量</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// 从第gap个元素，逐个对其所在的组进行直接插入排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; arr.length; i++) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>      <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;<br>        <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;<br>          <span class="hljs-comment">//移动</span><br>          arr[j] = arr[j-gap];<br>          j -= gap;<br>        &#125;<br>        <span class="hljs-comment">//当退出while后，就给temp找到插入的位置</span><br>        arr[j] = temp;<br>      &#125;<br><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插入排序</title>
    <link href="/2019/07/24/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/24/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p><h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><p>插入排序（Insertion Sorting）的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281359966.png" alt="插入排序"></p><h1 id="逐步推导法"><a href="#逐步推导法" class="headerlink" title="逐步推导法"></a>逐步推导法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertSort</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">101</span>, <span class="hljs-number">34</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1</span>&#125;;<br>    insertSort(arr);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><br>    <span class="hljs-comment">// -------------------------------------逐步推导法---------------------------------</span><br>    <span class="hljs-comment">//    第1轮 &#123;101, 34, 119, 1&#125;;  =&gt; &#123;34, 101, 119, 1&#125;</span><br>    <span class="hljs-comment">//定义待插入的数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">insertVal</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">insertIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">//即arr[1]的前面这个数的下标</span><br><br>    <span class="hljs-comment">//给insertVal 找到插入的位置</span><br>    <span class="hljs-comment">//说明</span><br>    <span class="hljs-comment">//1. insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界</span><br>    <span class="hljs-comment">//2. insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入位置</span><br>    <span class="hljs-comment">//3. 就需要将 arr[insertIndex] 后移</span><br>    <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;<br>      arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<span class="hljs-comment">// arr[insertIndex]</span><br>      insertIndex--;<br>    &#125;<br>    <span class="hljs-comment">//当退出while循环时，说明插入的位置找到, insertIndex + 1</span><br>    arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br><br>    System.out.println(<span class="hljs-string">&quot;第1轮插入&quot;</span>);<br>    System.out.println(Arrays.toString(arr));<br><br><br>    <span class="hljs-comment">//第2轮</span><br>    insertVal = arr[<span class="hljs-number">2</span>];<br>    insertIndex = <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span>(insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex] ) &#123;<br>      arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<span class="hljs-comment">// arr[insertIndex]</span><br>      insertIndex--;<br>    &#125;<br><br>    arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br>    System.out.println(<span class="hljs-string">&quot;第2轮插入&quot;</span>);<br>    System.out.println(Arrays.toString(arr));<br><br><br>    <span class="hljs-comment">//第3轮</span><br>    insertVal = arr[<span class="hljs-number">3</span>];<br>    insertIndex = <span class="hljs-number">3</span> - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;<br>      arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<span class="hljs-comment">// arr[insertIndex]</span><br>      insertIndex--;<br>    &#125;<br><br>    arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br>    System.out.println(<span class="hljs-string">&quot;第3轮插入&quot;</span>);<br>    System.out.println(Arrays.toString(arr));<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertSort</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">101</span>, <span class="hljs-number">34</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1</span>&#125;;<br>    insertSort(arr);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">insertVal</span> <span class="hljs-operator">=</span> arr[i];<br>      <span class="hljs-type">int</span> <span class="hljs-variable">insertIndex</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>;<br><br>      <span class="hljs-comment">//给insertVal 找到插入的位置</span><br>      <span class="hljs-comment">//说明</span><br>      <span class="hljs-comment">//1. insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界</span><br>      <span class="hljs-comment">//2. insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入位置</span><br>      <span class="hljs-comment">//3. 就需要将 arr[insertIndex] 后移</span><br>      <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;<br>        arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<span class="hljs-comment">// arr[insertIndex]</span><br>        insertIndex--;<br>      &#125;<br>      <span class="hljs-comment">//当退出while循环时，说明插入的位置找到, insertIndex + 1</span><br>      arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br><br>      System.out.println(<span class="hljs-string">&quot;第&quot;</span> + i + <span class="hljs-string">&quot;轮插入&quot;</span>);<br>      System.out.println(Arrays.toString(arr));<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装redis</title>
    <link href="/2019/07/08/ubuntu%E5%AE%89%E8%A3%85redis/"/>
    <url>/2019/07/08/ubuntu%E5%AE%89%E8%A3%85redis/</url>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://download.redis.io/releases/redis-5.0.5.tar.gz<br>tar xzf redis-5.0.5.tar.gz<br>cd redis-5.0.5<br></code></pre></td></tr></table></figure><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure><p>如果Command ‘make’ not found, but can be installed with:有这个错误提示,安装下列依赖</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>sudo apt-<span class="hljs-built_in">get</span> install build-essential<br></code></pre></td></tr></table></figure><p>make完后 edis-5.0.5目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：</p><h1 id="安装到指定目录去"><a href="#安装到指定目录去" class="headerlink" title="安装到指定目录去"></a>安装到指定目录去</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo make install PREFIX=<span class="hljs-regexp">/usr/</span>local/redis <br></code></pre></td></tr></table></figure><h1 id="默认启动"><a href="#默认启动" class="headerlink" title="默认启动"></a>默认启动</h1><p>下面启动redis服务.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bin<br>./redis-server<br></code></pre></td></tr></table></figure><p>注意这种方式启动redis。并且是前台启动，也就是说启动后，命令界面就不干别的事情了。我们需要的是后台启动，就需要通过启动参数告诉redis使用指定配置文件。</p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p> 先回到redis解压后的目录去,拷贝一份配置文件到安装目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo cp redis.conf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span><br>cd <span class="hljs-regexp">/user/</span>local/redis<br>sudo vi redis.conf<br></code></pre></td></tr></table></figure><p>修改第一处，bind 127.0.0.1(只限制了本地访问我们需要远程)改为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">bind</span> <span class="hljs-number">0.0.0.0</span><br></code></pre></td></tr></table></figure><p>修改第二处 daemonize no （前台启动方式）改为yes后台启动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">daemonize</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>修改第三处 # requirepass foobared 密码（打开注释）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">requirepass</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>还可以指定日志文件,默认为空</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">logfile <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/redis/</span>redis-server.log<br></code></pre></td></tr></table></figure><h1 id="指定配置文件启动"><a href="#指定配置文件启动" class="headerlink" title="指定配置文件启动"></a>指定配置文件启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bin<br>./redis-server ../redis-conf <br></code></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">./redis-cli -<span class="hljs-selector-tag">p</span> <span class="hljs-number">6379</span> -<span class="hljs-selector-tag">a</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>之后就可以在命令行中插入数据了</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><p>启动几分钟后，无法连接redis,并且有以下错误信息</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">MISCONF Redis is configured to save RDB snapshots, but is currently<span class="hljs-built_in"> not </span>able to persist on disk. Commands that may modify the data set are disabled. Please<span class="hljs-built_in"> check </span>Redis logs for details about the error．<br></code></pre></td></tr></table></figure><p>在&#x2F;etc&#x2F;sysctl.conf 添加一项 ‘vm.overcommit_memory &#x3D; 1’ ，然后重启（或者运行命令’sysctl vm.overcommit_memory&#x3D;1’ ）使其生效</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择排序</title>
    <link href="/2019/07/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到排序的目的。</p><h1 id="选择排序思想"><a href="#选择排序思想" class="headerlink" title="选择排序思想:"></a>选择排序思想:</h1><p>选择排序（select sorting）也是一种简单的排序方法。它的基本思想是：第一次从arr[0]<del>arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]</del>arr[n-1]中选取最小值，与arr[1]交换，第三次从arr[2]<del>arr[n-1]中选取最小值，与arr[2]交换，…，第i次从arr[i-1]</del>arr[n-1]中选取最小值，与arr[i-1]交换，…, 第n-1次从arr[n-2]~arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列。</p><h1 id="思路图解"><a href="#思路图解" class="headerlink" title="思路图解"></a>思路图解</h1><p>原始的数组 ： 101, 34, 119, 1</p><p>第一轮排序 :   <strong>1</strong>, 34, 119, 101</p><p>第二轮排序 :   <strong>1, 34</strong>, 119, 101</p><p>第三轮排序 :   <strong>1</strong>, <strong>34</strong>, <strong>101</strong>, 119</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>选择排序一共有 数组大小 - 1 轮排序</li><li>每1轮排序，又是一个循环, 循环的规则(代码)</li></ol><ul><li>先假定当前这个数是最小数</li><li>然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标</li><li>当遍历到数组的最后时，就得到本轮最小数和下标</li><li>交换</li></ul><h1 id="代码推导"><a href="#代码推导" class="headerlink" title="代码推导"></a>代码推导</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-comment">//使用逐步推导的方式来，讲解选择排序</span><br><span class="hljs-comment">//第1轮</span><br><span class="hljs-comment">//原始的数组 ： 101, 34, 119, 1</span><br><span class="hljs-comment">//第一轮排序 :   1, 34, 119, 101</span><br><span class="hljs-comment">//算法 先简单--》 做复杂， 就是可以把一个复杂的算法，拆分成简单的问题-》逐步解决</span><br><br><span class="hljs-comment">//第1轮</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (min &gt; arr[j]) &#123; <span class="hljs-comment">//说明假定的最小值，并不是最小</span><br>min = arr[j]; <span class="hljs-comment">//重置min</span><br>minIndex = j; <span class="hljs-comment">//重置minIndex</span><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//将最小值，放在arr[0], 即交换</span><br><span class="hljs-keyword">if</span>(minIndex != <span class="hljs-number">0</span>) &#123;<br>arr[minIndex] = arr[<span class="hljs-number">0</span>];<br>arr[<span class="hljs-number">0</span>] = min;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;第1轮后~~&quot;</span>);<br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">// 1, 34, 119, 101</span><br><br><br><span class="hljs-comment">//第2轮</span><br>minIndex = <span class="hljs-number">1</span>;<br>min = arr[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (min &gt; arr[j]) &#123; <span class="hljs-comment">// 说明假定的最小值，并不是最小</span><br>min = arr[j]; <span class="hljs-comment">// 重置min</span><br>minIndex = j; <span class="hljs-comment">// 重置minIndex</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 将最小值，放在arr[0], 即交换</span><br><span class="hljs-keyword">if</span>(minIndex != <span class="hljs-number">1</span>) &#123;<br>arr[minIndex] = arr[<span class="hljs-number">1</span>];<br>arr[<span class="hljs-number">1</span>] = min;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;第2轮后~~&quot;</span>);<br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">// 1, 34, 119, 101</span><br><br><span class="hljs-comment">//第3轮</span><br>minIndex = <span class="hljs-number">2</span>;<br>min = arr[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (min &gt; arr[j]) &#123; <span class="hljs-comment">// 说明假定的最小值，并不是最小</span><br>min = arr[j]; <span class="hljs-comment">// 重置min</span><br>minIndex = j; <span class="hljs-comment">// 重置minIndex</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 将最小值，放在arr[0], 即交换</span><br><span class="hljs-keyword">if</span> (minIndex != <span class="hljs-number">2</span>) &#123;<br>arr[minIndex] = arr[<span class="hljs-number">2</span>];<br>arr[<span class="hljs-number">2</span>] = min;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;第3轮后~~&quot;</span>);<br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">// 1, 34, 101, 119 </span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-comment">//在推导的过程，我们发现了规律，因此，可以使用for来解决</span><br><span class="hljs-comment">//选择排序时间复杂度是 O(n^2)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> arr[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (min &gt; arr[j]) &#123; <span class="hljs-comment">// 说明假定的最小值，并不是最小</span><br>min = arr[j]; <span class="hljs-comment">// 重置min</span><br>minIndex = j; <span class="hljs-comment">// 重置minIndex</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 将最小值，放在arr[0], 即交换</span><br><span class="hljs-keyword">if</span> (minIndex != i) &#123;<br>arr[minIndex] = arr[i];<br>arr[i] = min;<br>&#125;<br><br><span class="hljs-comment">//System.out.println(&quot;第&quot;+(i+1)+&quot;轮后~~&quot;);</span><br><span class="hljs-comment">//System.out.println(Arrays.toString(arr));// 1, 34, 119, 101</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建要给80000个的随机的数组</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">8000000</span>); <span class="hljs-comment">// 生成一个[0, 8000000) 数</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;排序前&quot;</span>);<br><span class="hljs-comment">//System.out.println(Arrays.toString(arr));</span><br><br><span class="hljs-type">Date</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">date1Str</span> <span class="hljs-operator">=</span> simpleDateFormat.format(data1);<br>System.out.println(<span class="hljs-string">&quot;排序前的时间是=&quot;</span> + date1Str);<br><br>selectSort(arr);<br><br><br><span class="hljs-type">Date</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">date2Str</span> <span class="hljs-operator">=</span> simpleDateFormat.format(data2);<br>System.out.println(<span class="hljs-string">&quot;排序前的时间是=&quot;</span> + date2Str);<br><br><span class="hljs-comment">//System.out.println(&quot;排序后&quot;);</span><br><span class="hljs-comment">//System.out.println(Arrays.toString(arr));</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从运行速度来看，选择比冒泡快很多。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2019/07/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>排序也称排序算法(Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。</p><h2 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h2><ol><li>内部排序:<br>指将需要处理的所有数据都加载到内部存储器中进行排序。</li><li>外部排序法：<br>数据量过大，无法全部加载到内存中，需要借助外部存储进行<br>排序。</li></ol><h2 id="常见的排序算法分类"><a href="#常见的排序算法分类" class="headerlink" title="常见的排序算法分类"></a>常见的排序算法分类</h2><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281515624.png"></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下<br>来没有进行过交换，就说明序列有序，因此要在排序过程中设置<br>一个标志flag判断元素是否进行过交换。从而减少不必要的比较。(优化)</p><p>第一次排序，最大的会走到最后，以此类推。</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281515433.png"></p><h2 id="代码实现上述推演过程"><a href="#代码实现上述推演过程" class="headerlink" title="代码实现上述推演过程"></a>代码实现上述推演过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;;<br>System.out.println(<span class="hljs-string">&quot;排序前&quot;</span>);<br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">//为了容易理解，我们把冒泡排序的演变过程，给大家展示</span><br><span class="hljs-comment">// 第一趟排序，就是将第最大的数排在最后</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span>  ; j++) &#123;<br><span class="hljs-comment">// 如果前面的数比后面的数大，则交换</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;第一趟排序后的数组&quot;</span>);<br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">// 第二趟排序，就是将第二大的数排在倒数第二位</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - <span class="hljs-number">1</span> ; j++) &#123;<br><span class="hljs-comment">// 如果前面的数比后面的数大，则交换</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;第二趟排序后的数组&quot;</span>);<br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">// 第三趟排序，就是将第三大的数排在倒数第三位</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - <span class="hljs-number">2</span>; j++) &#123;<br><span class="hljs-comment">// 如果前面的数比后面的数大，则交换</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;第三趟排序后的数组&quot;</span>);<br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">// 第四趟排序，就是将第4大的数排在倒数第4位</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - <span class="hljs-number">3</span>; j++) &#123;<br><span class="hljs-comment">// 如果前面的数比后面的数大，则交换</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;第四趟排序后的数组&quot;</span>);<br>System.out.println(Arrays.toString(arr)); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="核心实现代码"><a href="#核心实现代码" class="headerlink" title="核心实现代码"></a>核心实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-comment">// 如果前面的数比后面的数大，则交换</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;趟排序后的数组&quot;</span>);<br>System.out.println(Arrays.toString(arr));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>一个标志flag判断元素是否进行过交换。从而减少不必要的比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-comment">// 冒泡排序 的时间复杂度 O(n^2), 自己写出</span><br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 临时变量</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标识变量，表示是否进行过交换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-comment">// 如果前面的数比后面的数大，则交换</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>flag = <span class="hljs-literal">true</span>;<br>temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><span class="hljs-comment">//System.out.println(&quot;第&quot; + (i + 1) + &quot;趟排序后的数组&quot;);</span><br><span class="hljs-comment">//System.out.println(Arrays.toString(arr));</span><br><br><span class="hljs-keyword">if</span> (!flag) &#123; <span class="hljs-comment">// 在一趟排序中，一次交换都没有发生过</span><br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>flag = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 重置flag!!!, 进行下次判断</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试冒泡排序时间"><a href="#测试冒泡排序时间" class="headerlink" title="测试冒泡排序时间"></a>测试冒泡排序时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>;i++) &#123;<br>arr[i] = (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">8000000</span>); <span class="hljs-comment">//生成一个[0, 8000000) 数</span><br>&#125;<br><br><span class="hljs-type">Date</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">date1Str</span> <span class="hljs-operator">=</span> simpleDateFormat.format(data1);<br>System.out.println(<span class="hljs-string">&quot;排序前的时间是=&quot;</span> + date1Str);<br><br><span class="hljs-comment">//测试冒泡排序</span><br>bubbleSort(arr);<br><br><span class="hljs-type">Date</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">date2Str</span> <span class="hljs-operator">=</span> simpleDateFormat.format(data2);<br>System.out.println(<span class="hljs-string">&quot;排序后的时间是=&quot;</span> + date2Str);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间复杂度与空间复杂度</title>
    <link href="/2019/06/20/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <url>/2019/06/20/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h1><p>度量一个程序(算法)执行时间的两种方法</p><ol><li><p>事后统计的方法这种方法可行, 但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件等环境因素, 这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快。</p></li><li><p>事前估算的方法通过分析某个算法的时间复杂度来判断哪个算法更优.</p></li></ol><h2 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h2><p><strong>时间频度</strong>：一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为 T(n)。</p><h3 id="忽略常数项"><a href="#忽略常数项" class="headerlink" title="忽略常数项"></a>忽略常数项</h3><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281516413.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281516620.png"><br>结论:</p><ol><li>2n+20 和 2n 随着 n 变大，执行曲线无限接近, 20 可以忽略</li><li>3n+10 和 3n 随着 n 变大，执行曲线无限接近, 10 可以忽略</li></ol><h3 id="忽略低次项"><a href="#忽略低次项" class="headerlink" title="忽略低次项"></a>忽略低次项</h3><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281517818.png"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281517171.png"><br>结论:</p><ol><li>2n^2+3n+10 和 2n^2 随着 n 变大, 执行曲线无限接近, 可以忽略 3n+10</li><li>n^2+5n+20 和 n^2 随着 n 变大,执行曲线无限接近, 可以忽略 5n+20</li></ol><h3 id="忽略系数"><a href="#忽略系数" class="headerlink" title="忽略系数"></a>忽略系数</h3><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281517441.png"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281518260.png"><br>结论:</p><ol><li>随着 n 值变大，5n^2+7n 和 3n^2 + 2n ，执行曲线重合, 说明 这种情况下, 5 和 3 可以忽略。</li><li>而 n^3+5n 和 6n^3+4n ，执行曲线分离，说明多少次方式关键</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ol><li><p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数，用 T(n)表示，若有某个辅助函数 f(n)，使得当 n 趋近于无穷大时，T(n) &#x2F; f(n) 的极限值为不等于零的常数，则称 f(n)是 T(n)的同数量级函数。记作 T(n)&#x3D;Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。</p></li><li><p>T(n) 不同，但时间复杂度可能相同。 如：T(n)&#x3D;n²+7n+6 与 T(n)&#x3D;3n²+2n+2 它们的 T(n)不同，但时间复杂度相同，都为 O(n²)。</p></li><li><p>计算时间复杂度的方法：</p></li></ol><ul><li>用常数 1 代替运行时间中的所有加法常数 T(n)&#x3D;n²+7n+6 &#x3D;&gt; T(n)&#x3D;n²+7n+1</li><li>修改后的运行次数函数中，只保留最高阶项 T(n)&#x3D;n²+7n+1 &#x3D;&gt; T(n) &#x3D; n²</li><li>去除最高阶项的系数 T(n) &#x3D; n² &#x3D;&gt; T(n) &#x3D; n² &#x3D;&gt; O(n²)</li></ul><h3 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h3><ol><li>常数阶 O(1)</li><li>对数阶 O(log2n)</li><li>线性阶 O(n)</li><li>线性对数阶 O(nlog2n)</li><li>平方阶 O(n^2)</li><li>立方阶 O(n^3)</li><li>k 次方阶 O(n^k)</li><li>指数阶 O(2^n)<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281518958.png"></li></ol><p><strong>说明</strong>：</p><ul><li>常见的算法时间复杂度由小到大依次为：Ο(1)＜ Ο(log2n)＜ Ο(n)＜ Ο(nlog2n)＜ Ο(n2)＜ Ο(n3)＜ Ο(nk) ＜ Ο(2n) ，随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低<br>从图中可见，我们应该尽可能避免使用指数阶的算法</li></ul><h4 id="常数阶-O-1"><a href="#常数阶-O-1" class="headerlink" title="常数阶 O(1)"></a>常数阶 O(1)</h4><p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是 O(1)</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281518473.png"><br>上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用 O(1)来表示它的时间复杂度。</p><h4 id="对数阶-O-log2n"><a href="#对数阶-O-log2n" class="headerlink" title="对数阶 O(log2n)"></a>对数阶 O(log2n)</h4><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281518624.png"><br><strong>说明</strong>：在 while 循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环 x 次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x &#x3D; log2n 也就是说当循环 log2n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log2n) 。 O(log2n) 的这个 2 时间上是根据代码变化的，i &#x3D; i * 3 ，则是 O(log3n)</p><h4 id="线性阶-O-n"><a href="#线性阶-O-n" class="headerlink" title="线性阶 O(n)"></a>线性阶 O(n)</h4><p><img src="https://user-gold-cdn.xitu.io/2019/6/20/16b735aeb73221e8?w=196&h=117&f=png&s=8349"><br>说明：这段代码，for 循环里面的代码会执行 n 遍，因此它消耗的时间是随着 n 的变化而变化的，因此这类代码都可以用 O(n)来表示它的时间复杂度</p><h4 id="线性对数阶-O-nlogN"><a href="#线性对数阶-O-nlogN" class="headerlink" title="线性对数阶 O(nlogN)"></a>线性对数阶 O(nlogN)</h4><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281519424.png"><br><strong>说明</strong>：线性对数阶 O(nlogN) 其实非常容易理解，将时间复杂度为 O(logn)的代码循环 N 遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了 O(nlogN)</p><h4 id="平方阶-O-n²"><a href="#平方阶-O-n²" class="headerlink" title="平方阶 O(n²)"></a>平方阶 O(n²)</h4><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281519000.png"><br><strong>说明</strong>：平方阶 O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²)，这段代码其实就是嵌套了 2 层 n 循环，它的时间复杂度就是 O(n*n)，即 O(n²)如果将其中一层循环的 n 改成 m，那它的时间复杂度就变成了 O(m * n)</p><h4 id="立方阶-O-n³-、K-次方阶-O-n-k"><a href="#立方阶-O-n³-、K-次方阶-O-n-k" class="headerlink" title="立方阶 O(n³)、K 次方阶 O(n^k)"></a>立方阶 O(n³)、K 次方阶 O(n^k)</h4><p><strong>说明</strong>：参考上面的 O(n²) 去理解就好了，O(n³)相当于三层 n 循环，其它的类似</p><h3 id="平均时间复杂度和最坏时间复杂度"><a href="#平均时间复杂度和最坏时间复杂度" class="headerlink" title="平均时间复杂度和最坏时间复杂度"></a>平均时间复杂度和最坏时间复杂度</h3><ol><li>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</li><li>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</li><li>平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如图:)。</li></ol><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281519106.png"></p><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><ol><li>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。</li><li>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</li><li>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2019/06/18/%E9%80%92%E5%BD%92/"/>
    <url>/2019/06/18/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281404081.png"></p><h1 id="递归需要遵守的重要规则"><a href="#递归需要遵守的重要规则" class="headerlink" title="递归需要遵守的重要规则"></a>递归需要遵守的重要规则</h1><ol><li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li><li>方法的局部变量是独立的，不会相互影响, 比如n变量</li><li>如果方法中使用的是引用类型变量(比如数组)，就会共享该引用类型的数据.</li><li>递归必须向退出递归的条件逼近，否则就是无限递归,出现StackOverflowError，死龟了:)</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕</li></ol><h1 id="递归应用场景"><a href="#递归应用场景" class="headerlink" title="递归应用场景"></a>递归应用场景</h1><p>看个实际应用场景，迷宫问题(回溯)， 递归(Recursion)</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281404826.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiGong</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 先创建一个二维数组，模拟迷宫</span><br><span class="hljs-comment">// 地图</span><br><span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br><span class="hljs-comment">// 使用1 表示墙</span><br><span class="hljs-comment">// 上下全部置为1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>map[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 左右全部置为1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//设置挡板, 1 表示</span><br>map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//map[1][2] = 1;</span><br><span class="hljs-comment">//map[2][2] = 1;</span><br><br><span class="hljs-comment">// 输出地图</span><br>System.out.println(<span class="hljs-string">&quot;地图的情况&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br><br><span class="hljs-comment">//使用递归回溯给小球找路</span><br><span class="hljs-comment">//setWay(map, 1, 1);</span><br>setWay2(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//输出新的地图, 小球走过，并标识过的递归</span><br>System.out.println(<span class="hljs-string">&quot;小球走过，并标识过的 地图的情况&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//使用递归回溯来给小球找路</span><br><span class="hljs-comment">//说明</span><br><span class="hljs-comment">//1. map 表示地图</span><br><span class="hljs-comment">//2. i,j 表示从地图的哪个位置开始出发 (1,1)</span><br><span class="hljs-comment">//3. 如果小球能到 map[6][5] 位置，则说明通路找到.</span><br><span class="hljs-comment">//4. 约定： 当map[i][j] 为 0 表示该点没有走过 当为 1 表示墙  ； 2 表示通路可以走 ； 3 表示该点已经走过，但是走不通</span><br><span class="hljs-comment">//5. 在走迷宫时，需要确定一个策略(方法) 下-&gt;右-&gt;上-&gt;左 , 如果该点走不通，再回溯</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map 表示地图</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> i 从哪个位置开始找</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> j </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 如果找到通路，就返回true, 否则返回false</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setWay</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><span class="hljs-keyword">if</span>(map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 通路已经找到ok</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(map[i][j] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//如果当前这个点还没有走过</span><br><span class="hljs-comment">//按照策略 下-&gt;右-&gt;上-&gt;左  走</span><br>map[i][j] = <span class="hljs-number">2</span>; <span class="hljs-comment">// 假定该点是可以走通.</span><br><span class="hljs-keyword">if</span>(setWay(map, i+<span class="hljs-number">1</span>, j)) &#123;<span class="hljs-comment">//向下走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j+<span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">//向右走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i-<span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">//向上</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j-<span class="hljs-number">1</span>))&#123; <span class="hljs-comment">// 向左走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//说明该点是走不通，是死路</span><br>map[i][j] = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果map[i][j] != 0 , 可能是 1， 2， 3</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//修改找路的策略，改成 上-&gt;右-&gt;下-&gt;左</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setWay2</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><span class="hljs-keyword">if</span>(map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 通路已经找到ok</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(map[i][j] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//如果当前这个点还没有走过</span><br><span class="hljs-comment">//按照策略 上-&gt;右-&gt;下-&gt;左</span><br>map[i][j] = <span class="hljs-number">2</span>; <span class="hljs-comment">// 假定该点是可以走通.</span><br><span class="hljs-keyword">if</span>(setWay2(map, i-<span class="hljs-number">1</span>, j)) &#123;<span class="hljs-comment">//向上走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay2(map, i, j+<span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">//向右走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay2(map, i+<span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">//向下</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay2(map, i, j-<span class="hljs-number">1</span>))&#123; <span class="hljs-comment">// 向左走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//说明该点是走不通，是死路</span><br>map[i][j] = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果map[i][j] != 0 , 可能是 1， 2， 3</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="八皇后问题-回溯算法"><a href="#八皇后问题-回溯算法" class="headerlink" title="八皇后问题(回溯算法)"></a>八皇后问题(回溯算法)</h1><h2 id="八皇后问题介绍"><a href="#八皇后问题介绍" class="headerlink" title="八皇后问题介绍"></a>八皇后问题介绍</h2><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281405120.png"></p><h2 id="八皇后问题算法思路分析"><a href="#八皇后问题算法思路分析" class="headerlink" title="八皇后问题算法思路分析"></a>八皇后问题算法思路分析</h2><ol><li>第一个皇后先放第一行第一列</li><li>第二个皇后放在第二行第一列、然后判断是否OK， 如果不OK，继续放在第二列、第三列、依次把所有列都放完，找到一个合适</li><li>继续第三个皇后，还是第一列、第二列……直到第8个皇后也能放在一个不冲突的位置，算是找到了一个正确解</li><li>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到.</li><li>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4的步骤</li></ol><ul><li>说明：理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题. arr[8] &#x3D; {0 , 4, 7, 5, 2, 6, 1, 3} &#x2F;&#x2F;对应arr 下标 表示第几行，即第几个皇后，arr[i] &#x3D; val , val 表示第i+1个皇后，放在第i+1行的第val+1列</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue8</span> &#123;<br><br>    <span class="hljs-comment">//定义一个max表示共有多少个皇后</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">//定义数组array, 保存皇后放置位置的结果,比如 arr = &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125;</span><br>    <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">judgeCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试一把 ， 8皇后是否正确</span><br>        <span class="hljs-type">Queue8</span> <span class="hljs-variable">queue8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue8</span>();<br>        queue8.check(<span class="hljs-number">0</span>);<br>        System.out.printf(<span class="hljs-string">&quot;一共有%d解法&quot;</span>, count);<br>        System.out.printf(<span class="hljs-string">&quot;一共判断冲突的次数%d次&quot;</span>, judgeCount); <span class="hljs-comment">// 1.5w</span><br><br>    &#125;<br><br><br><br>    <span class="hljs-comment">//编写一个方法，放置第n个皇后</span><br>    <span class="hljs-comment">//特别注意： check 是 每一次递归时，进入到check中都有  for(int i = 0; i &lt; max; i++)，因此会有回溯</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span>(n == max) &#123;  <span class="hljs-comment">//n = 8 , 其实8个皇后就既然放好</span><br>            print();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//依次放入皇后，并判断是否冲突</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; max; i++) &#123;<br>            <span class="hljs-comment">//先把当前这个皇后 n , 放到该行的第1列</span><br>            array[n] = i;<br>            <span class="hljs-comment">//判断当放置第n个皇后到i列时，是否冲突</span><br>            <span class="hljs-keyword">if</span>(judge(n)) &#123; <span class="hljs-comment">// 不冲突</span><br>                <span class="hljs-comment">//接着放n+1个皇后,即开始递归</span><br>                check(n+<span class="hljs-number">1</span>); <span class="hljs-comment">//</span><br>            &#125;<br>            <span class="hljs-comment">//如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行得 后移的一个位置</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//查看当我们放置第n个皇后, 就去检测该皇后是否和前面已经摆放的皇后冲突</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n 表示第n个皇后</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        judgeCount++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// 说明</span><br>            <span class="hljs-comment">//1. array[i] == array[n]  表示判断 第n个皇后是否和前面的n-1个皇后在同一列</span><br>            <span class="hljs-comment">//2. Math.abs(n-i) == Math.abs(array[n] - array[i]) 表示判断第n个皇后是否和第i皇后是否在同一斜线</span><br>            <span class="hljs-comment">// n = 1  放置第 2列 1 n = 1 array[1] = 1</span><br>            <span class="hljs-comment">// Math.abs(1-0) == 1  Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1</span><br>            <span class="hljs-comment">//3. 判断是否在同一行, 没有必要，n 每次都在递增</span><br>            <span class="hljs-keyword">if</span>(array[i] == array[n] || Math.abs(n-i) == Math.abs(array[n] - array[i]) ) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//写一个方法，可以将皇后摆放的位置输出</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        count++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            System.out.print(array[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="输入结果"><a href="#输入结果" class="headerlink" title="输入结果"></a>输入结果</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs tap">0<span class="hljs-number"> 4 </span>7<span class="hljs-number"> 5 </span>2<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 3 </span><br>0<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 2 </span>6<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 4 </span><br>0<span class="hljs-number"> 6 </span>3<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 1 </span>4<span class="hljs-number"> 2 </span><br>0<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 3 </span>5<span class="hljs-number"> 2 </span><br>1<span class="hljs-number"> 3 </span>5<span class="hljs-number"> 7 </span>2<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 4 </span><br>1<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 3 </span><br>1<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 2 </span><br>1<span class="hljs-number"> 5 </span>0<span class="hljs-number"> 6 </span>3<span class="hljs-number"> 7 </span>2<span class="hljs-number"> 4 </span><br>1<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 3 </span>6<span class="hljs-number"> 4 </span><br>1<span class="hljs-number"> 6 </span>2<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 4 </span>0<span class="hljs-number"> 3 </span><br>1<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 7 </span>0<span class="hljs-number"> 3 </span>5<span class="hljs-number"> 2 </span><br>1<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 3 </span><br>2<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 4 </span>7<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 5 </span><br>2<span class="hljs-number"> 4 </span>1<span class="hljs-number"> 7 </span>0<span class="hljs-number"> 6 </span>3<span class="hljs-number"> 5 </span><br>2<span class="hljs-number"> 4 </span>1<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 3 </span>6<span class="hljs-number"> 0 </span><br>2<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 0 </span>3<span class="hljs-number"> 1 </span>7<span class="hljs-number"> 5 </span><br>2<span class="hljs-number"> 4 </span>7<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 5 </span><br>2<span class="hljs-number"> 5 </span>1<span class="hljs-number"> 4 </span>7<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 3 </span><br>2<span class="hljs-number"> 5 </span>1<span class="hljs-number"> 6 </span>0<span class="hljs-number"> 3 </span>7<span class="hljs-number"> 4 </span><br>2<span class="hljs-number"> 5 </span>1<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 0 </span>7<span class="hljs-number"> 3 </span><br>2<span class="hljs-number"> 5 </span>3<span class="hljs-number"> 0 </span>7<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 1 </span><br>2<span class="hljs-number"> 5 </span>3<span class="hljs-number"> 1 </span>7<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 0 </span><br>2<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 0 </span>3<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 1 </span><br>2<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 0 </span>4<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 3 </span><br>2<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 4 </span><br>2<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 7 </span>4<span class="hljs-number"> 0 </span>3<span class="hljs-number"> 5 </span><br>2<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 4 </span><br>2<span class="hljs-number"> 7 </span>3<span class="hljs-number"> 6 </span>0<span class="hljs-number"> 5 </span>1<span class="hljs-number"> 4 </span><br>3<span class="hljs-number"> 0 </span>4<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 6 </span>2<span class="hljs-number"> 5 </span><br>3<span class="hljs-number"> 0 </span>4<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 2 </span>6<span class="hljs-number"> 1 </span><br>3<span class="hljs-number"> 1 </span>4<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 6 </span><br>3<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 2 </span>5<span class="hljs-number"> 7 </span>0<span class="hljs-number"> 4 </span><br>3<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 2 </span>5<span class="hljs-number"> 7 </span>4<span class="hljs-number"> 0 </span><br>3<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 4 </span>0<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 2 </span><br>3<span class="hljs-number"> 1 </span>7<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 5 </span><br>3<span class="hljs-number"> 1 </span>7<span class="hljs-number"> 5 </span>0<span class="hljs-number"> 2 </span>4<span class="hljs-number"> 6 </span><br>3<span class="hljs-number"> 5 </span>0<span class="hljs-number"> 4 </span>1<span class="hljs-number"> 7 </span>2<span class="hljs-number"> 6 </span><br>3<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 4 </span><br>3<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 1 </span><br>3<span class="hljs-number"> 6 </span>0<span class="hljs-number"> 7 </span>4<span class="hljs-number"> 1 </span>5<span class="hljs-number"> 2 </span><br>3<span class="hljs-number"> 6 </span>2<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 4 </span>0<span class="hljs-number"> 5 </span><br>3<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 1 </span>5<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 7 </span><br>3<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 1 </span><br>3<span class="hljs-number"> 7 </span>0<span class="hljs-number"> 2 </span>5<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 4 </span><br>3<span class="hljs-number"> 7 </span>0<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 1 </span>5<span class="hljs-number"> 2 </span><br>3<span class="hljs-number"> 7 </span>4<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 5 </span><br>4<span class="hljs-number"> 0 </span>3<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 2 </span><br>4<span class="hljs-number"> 0 </span>7<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 6 </span>2<span class="hljs-number"> 5 </span><br>4<span class="hljs-number"> 0 </span>7<span class="hljs-number"> 5 </span>2<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 3 </span><br>4<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 6 </span><br>4<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 6 </span>2<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 0 </span><br>4<span class="hljs-number"> 1 </span>5<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 3 </span>7<span class="hljs-number"> 2 </span><br>4<span class="hljs-number"> 1 </span>7<span class="hljs-number"> 0 </span>3<span class="hljs-number"> 6 </span>2<span class="hljs-number"> 5 </span><br>4<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 6 </span><br>4<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 3 </span><br>4<span class="hljs-number"> 2 </span>7<span class="hljs-number"> 3 </span>6<span class="hljs-number"> 0 </span>5<span class="hljs-number"> 1 </span><br>4<span class="hljs-number"> 6 </span>0<span class="hljs-number"> 2 </span>7<span class="hljs-number"> 5 </span>3<span class="hljs-number"> 1 </span><br>4<span class="hljs-number"> 6 </span>0<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 2 </span><br>4<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 3 </span>7<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 5 </span><br>4<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 5 </span>2<span class="hljs-number"> 0 </span>3<span class="hljs-number"> 7 </span><br>4<span class="hljs-number"> 6 </span>1<span class="hljs-number"> 5 </span>2<span class="hljs-number"> 0 </span>7<span class="hljs-number"> 3 </span><br>4<span class="hljs-number"> 6 </span>3<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 1 </span><br>4<span class="hljs-number"> 7 </span>3<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 5 </span>1<span class="hljs-number"> 6 </span><br>4<span class="hljs-number"> 7 </span>3<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 1 </span>5<span class="hljs-number"> 2 </span><br>5<span class="hljs-number"> 0 </span>4<span class="hljs-number"> 1 </span>7<span class="hljs-number"> 2 </span>6<span class="hljs-number"> 3 </span><br>5<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 4 </span>7<span class="hljs-number"> 3 </span><br>5<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 0 </span>3<span class="hljs-number"> 7 </span>4<span class="hljs-number"> 2 </span><br>5<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 3 </span><br>5<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 7 </span>3<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 4 </span><br>5<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 7 </span>4<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 6 </span><br>5<span class="hljs-number"> 2 </span>4<span class="hljs-number"> 6 </span>0<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 7 </span><br>5<span class="hljs-number"> 2 </span>4<span class="hljs-number"> 7 </span>0<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 6 </span><br>5<span class="hljs-number"> 2 </span>6<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 7 </span>0<span class="hljs-number"> 4 </span><br>5<span class="hljs-number"> 2 </span>6<span class="hljs-number"> 1 </span>7<span class="hljs-number"> 4 </span>0<span class="hljs-number"> 3 </span><br>5<span class="hljs-number"> 2 </span>6<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 4 </span><br>5<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 4 </span>7<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 2 </span><br>5<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 7 </span>4<span class="hljs-number"> 6 </span>0<span class="hljs-number"> 2 </span><br>5<span class="hljs-number"> 3 </span>6<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 4 </span>1<span class="hljs-number"> 7 </span><br>5<span class="hljs-number"> 3 </span>6<span class="hljs-number"> 0 </span>7<span class="hljs-number"> 1 </span>4<span class="hljs-number"> 2 </span><br>5<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 6 </span>4<span class="hljs-number"> 2 </span><br>6<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 4 </span><br>6<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 0 </span>7<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 5 </span><br>6<span class="hljs-number"> 1 </span>5<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 3 </span>7<span class="hljs-number"> 4 </span><br>6<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 5 </span>7<span class="hljs-number"> 4 </span>1<span class="hljs-number"> 3 </span><br>6<span class="hljs-number"> 2 </span>7<span class="hljs-number"> 1 </span>4<span class="hljs-number"> 0 </span>5<span class="hljs-number"> 3 </span><br>6<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 4 </span>7<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 5 </span><br>6<span class="hljs-number"> 3 </span>1<span class="hljs-number"> 7 </span>5<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 4 </span><br>6<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 0 </span>5<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 3 </span><br>7<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 0 </span>6<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 5 </span><br>7<span class="hljs-number"> 1 </span>4<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 6 </span>3<span class="hljs-number"> 5 </span><br>7<span class="hljs-number"> 2 </span>0<span class="hljs-number"> 5 </span>1<span class="hljs-number"> 4 </span>6<span class="hljs-number"> 3 </span><br>7<span class="hljs-number"> 3 </span>0<span class="hljs-number"> 2 </span>5<span class="hljs-number"> 1 </span>6<span class="hljs-number"> 4 </span><br>一共有92解法一共判断冲突的次数15720次<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈（三）</title>
    <link href="/2019/06/17/%E6%A0%88%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2019/06/17/%E6%A0%88%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="前缀表达式-波兰表达式"><a href="#前缀表达式-波兰表达式" class="headerlink" title="前缀表达式(波兰表达式)"></a>前缀表达式(波兰表达式)</h1><ol><li>前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</li><li>举例说明： (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6</li></ol><h2 id="前缀表达式的计算机求值"><a href="#前缀表达式的计算机求值" class="headerlink" title="前缀表达式的计算机求值"></a>前缀表达式的计算机求值</h2><p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p><p>例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</p><ol><li>从右至左扫描，将6、5、4、3压入堆栈</li><li>遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值，得7，再将7入栈</li><li>接下来是×运算符，因此弹出7和5，计算出7×5&#x3D;35，将35入栈</li><li>最后是-运算符，计算出35-6的值，即29，由此得出最终结果</li></ol><h1 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h1><ol><li><p>中缀表达式就是常见的运算表达式，如(3+4)×5-6</p></li><li><p>中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作(一般转成后缀表达式.)</p></li></ol><h1 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h1><ol><li><p>后缀表达式又称逆波兰表达式,与前缀表达式相似，只是运算符位于操作数之后</p></li><li><p>举例说明： (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 –<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281523487.png"></p></li></ol><h2 id="后缀表达式的计算机求值"><a href="#后缀表达式的计算机求值" class="headerlink" title="后缀表达式的计算机求值"></a>后缀表达式的计算机求值</h2><p>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p><p>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</p><ol><li>从左至右扫描，将3和4压入堆栈；</li><li>遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</li><li>将5入栈；</li><li>接下来是×运算符，因此弹出5和7，计算出7×5&#x3D;35，将35入栈；</li><li>将6入栈；<br>6.最后是-运算符，计算出35-6的值，即29，由此得出最终结果</li></ol><h2 id="逆波兰计算器实现"><a href="#逆波兰计算器实现" class="headerlink" title="逆波兰计算器实现"></a>逆波兰计算器实现</h2><ol><li>输入一个逆波兰表达式(后缀表达式)，使用栈(Stack), 计算其结果</li><li>支持小括号和多位数整数，因为这里我们主要讲的是数据结构，因此计算器进行简化，只支持对整数的计算。</li><li>思路分析</li><li>代码完成<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolandNotation</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//先定义给逆波兰表达式</span><br><span class="hljs-comment">//(30+4)×5-6  =&gt; 30 4 + 5 × 6 - =&gt; 164</span><br><span class="hljs-comment">// 4 * 5 - 8 + 60 + 8 / 2 =&gt; 4 5 * 8 - 60 + 8 2 / + </span><br><span class="hljs-comment">//测试 </span><br><span class="hljs-comment">//说明为了方便，逆波兰表达式 的数字和符号使用空格隔开</span><br><span class="hljs-comment">//String suffixExpression = &quot;30 4 + 5 * 6 -&quot;;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">suffixExpression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4 5 * 8 - 60 + 8 2 / +&quot;</span>; <span class="hljs-comment">// 76</span><br><span class="hljs-comment">//思路</span><br><span class="hljs-comment">//1. 先将 &quot;3 4 + 5 × 6 - &quot; =&gt; 放到ArrayList中</span><br><span class="hljs-comment">//2. 将 ArrayList 传递给一个方法，遍历 ArrayList 配合栈 完成计算</span><br><br>List&lt;String&gt; list = getListString(suffixExpression);<br>System.out.println(<span class="hljs-string">&quot;rpnList=&quot;</span> + list);<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> calculate(list);<br>System.out.println(<span class="hljs-string">&quot;计算的结果是=&quot;</span> + res);<br>&#125;<br><br><span class="hljs-comment">//将一个逆波兰表达式， 依次将数据和运算符 放入到 ArrayList中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">getListString</span><span class="hljs-params">(String suffixExpression)</span> &#123;<br><span class="hljs-comment">//将 suffixExpression 分割</span><br>String[] split = suffixExpression.split(<span class="hljs-string">&quot; &quot;</span>);<br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(String ele: split) &#123;<br>list.add(ele);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br><br>&#125;<br><br><span class="hljs-comment">//完成对逆波兰表达式的运算</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 1)从左至右扫描，将3和4压入堆栈；</span><br><span class="hljs-comment">2)遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span><br><span class="hljs-comment">3)将5入栈；</span><br><span class="hljs-comment">4)接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span><br><span class="hljs-comment">5)将6入栈；</span><br><span class="hljs-comment">6)最后是-运算符，计算出35-6的值，即29，由此得出最终结果</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(List&lt;String&gt; ls)</span> &#123;<br><span class="hljs-comment">// 创建给栈, 只需要一个栈即可</span><br>Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;String&gt;();<br><span class="hljs-comment">// 遍历 ls</span><br><span class="hljs-keyword">for</span> (String item : ls) &#123;<br><span class="hljs-comment">// 这里使用正则表达式来取出数</span><br><span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123; <span class="hljs-comment">// 匹配的是多位数</span><br><span class="hljs-comment">// 入栈</span><br>stack.push(item);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// pop出两个数，并运算， 再入栈</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> Integer.parseInt(stack.pop());<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> Integer.parseInt(stack.pop());<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;+&quot;</span>)) &#123;<br>res = num1 + num2;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>res = num1 - num2;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;*&quot;</span>)) &#123;<br>res = num1 * num2;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>res = num1 / num2;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;运算符有误&quot;</span>);<br>&#125;<br><span class="hljs-comment">//把res 入栈</span><br>stack.push(<span class="hljs-string">&quot;&quot;</span> + res);<br>&#125;<br>&#125;<br><span class="hljs-comment">//最后留在stack中的数据是运算结果</span><br><span class="hljs-keyword">return</span> Integer.parseInt(stack.pop());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="中缀表达式转换为后缀表达式"><a href="#中缀表达式转换为后缀表达式" class="headerlink" title="中缀表达式转换为后缀表达式"></a>中缀表达式转换为后缀表达式</h1><p>大家看到，后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将 中缀表达式转成后缀表达式。</p><ol><li>初始化两个栈：运算符栈s1和储存中间结果的栈s2；</li><li>从左至右扫描中缀表达式；</li><li>遇到操作数时，将其压s2；</li><li>遇到运算符时，比较其与s1栈顶运算符的优先级：</li></ol><ul><li>如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</li><li>否则，若优先级比栈顶运算符的高，也将运算符压入s1；</li><li>否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；</li></ul><ol start="5"><li>遇到括号时：</li></ol><ul><li>如果是左括号“(”，则直接压入s1</li><li>如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</li></ul><ol start="6"><li>重复步骤2至5，直到表达式的最右边</li><li>将s1中剩余的运算符依次弹出并压入s2</li><li>依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</li></ol><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281523409.png"><br>结束上述步骤后，s2里面就为后缀表达式<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281523726.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolandNotation</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br><span class="hljs-comment">//完成将一个中缀表达式转成后缀表达式的功能</span><br><span class="hljs-comment">//说明</span><br><span class="hljs-comment">//1. 1+((2+3)×4)-5 =&gt; 转成  1 2 3 + 4 × + 5 –</span><br><span class="hljs-comment">//2. 因为直接对str 进行操作，不方便，因此 先将  &quot;1+((2+3)×4)-5&quot; =》 中缀的表达式对应的List</span><br><span class="hljs-comment">//   即 &quot;1+((2+3)×4)-5&quot; =&gt; ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span><br><span class="hljs-comment">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span><br><span class="hljs-comment">//   即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1+((2+3)*4)-5&quot;</span>;<span class="hljs-comment">//注意表达式 </span><br>List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);<br>System.out.println(<span class="hljs-string">&quot;中缀表达式对应的List=&quot;</span> + infixExpressionList); <span class="hljs-comment">// ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]</span><br>List&lt;String&gt; suffixExpreesionList = parseSuffixExpreesionList(infixExpressionList);<br>System.out.println(<span class="hljs-string">&quot;后缀表达式对应的List&quot;</span> + suffixExpreesionList); <span class="hljs-comment">//ArrayList [1,2,3,+,4,*,+,5,–]  </span><br>&#125;<br><br><br><br><span class="hljs-comment">//即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span><br><span class="hljs-comment">//方法：将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">parseSuffixExpreesionList</span><span class="hljs-params">(List&lt;String&gt; ls)</span> &#123;<br><span class="hljs-comment">//定义两个栈</span><br>Stack&lt;String&gt; s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;String&gt;(); <span class="hljs-comment">// 符号栈</span><br><span class="hljs-comment">//说明：因为s2 这个栈，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出</span><br><span class="hljs-comment">//因此比较麻烦，这里我们就不用 Stack&lt;String&gt; 直接使用 List&lt;String&gt; s2</span><br><span class="hljs-comment">//Stack&lt;String&gt; s2 = new Stack&lt;String&gt;(); // 储存中间结果的栈s2</span><br>List&lt;String&gt; s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(); <span class="hljs-comment">// 储存中间结果的Lists2</span><br><br><span class="hljs-comment">//遍历ls</span><br><span class="hljs-keyword">for</span>(String item: ls) &#123;<br><span class="hljs-comment">//如果是一个数，加入s2</span><br><span class="hljs-keyword">if</span>(item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<br>s2.add(item);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>s1.push(item);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;)&quot;</span>)) &#123;<br><span class="hljs-comment">//如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span><br><span class="hljs-keyword">while</span>(!s1.peek().equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>s2.add(s1.pop());<br>&#125;<br>s1.pop();<span class="hljs-comment">//!!! 将 ( 弹出 s1栈， 消除小括号</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//当item的优先级小于等于s1栈顶运算符, 将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较</span><br><span class="hljs-comment">//问题：我们缺少一个比较优先级高低的方法</span><br><span class="hljs-keyword">while</span>(s1.size() != <span class="hljs-number">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item) ) &#123;<br>s2.add(s1.pop());<br>&#125;<br><span class="hljs-comment">//还需要将item压入栈</span><br>s1.push(item);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//将s1中剩余的运算符依次弹出并加入s2</span><br><span class="hljs-keyword">while</span>(s1.size() != <span class="hljs-number">0</span>) &#123;<br>s2.add(s1.pop());<br>&#125;<br><br><span class="hljs-keyword">return</span> s2; <span class="hljs-comment">//注意因为是存放到List, 因此按顺序输出就是对应的后缀表达式对应的List</span><br><br>&#125;<br><br><span class="hljs-comment">//方法：将 中缀表达式转成对应的List</span><br><span class="hljs-comment">//  s=&quot;1+((2+3)×4)-5&quot;;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">toInfixExpressionList</span><span class="hljs-params">(String s)</span> &#123;<br><span class="hljs-comment">//定义一个List,存放中缀表达式 对应的内容</span><br>List&lt;String&gt; ls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//这时是一个指针，用于遍历 中缀表达式字符串</span><br>String str; <span class="hljs-comment">// 对多位数的拼接</span><br><span class="hljs-type">char</span> c; <span class="hljs-comment">// 每遍历到一个字符，就放入到c</span><br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-comment">//如果c是一个非数字，我需要加入到ls</span><br><span class="hljs-keyword">if</span>((c=s.charAt(i)) &lt; <span class="hljs-number">48</span> ||  (c=s.charAt(i)) &gt; <span class="hljs-number">57</span>) &#123;<br>ls.add(<span class="hljs-string">&quot;&quot;</span> + c);<br>i++; <span class="hljs-comment">//i需要后移</span><br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果是一个数，需要考虑多位数</span><br>str = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//先将str 置成&quot;&quot; &#x27;0&#x27;[48]-&gt;&#x27;9&#x27;[57]</span><br><span class="hljs-keyword">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class="hljs-number">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class="hljs-number">57</span>) &#123;<br>str += c;<span class="hljs-comment">//拼接</span><br>i++;<br>&#125;<br>ls.add(str);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(i &lt; s.length());<br><span class="hljs-keyword">return</span> ls;<span class="hljs-comment">//返回</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//编写一个类 Operation 可以返回一个运算符 对应的优先级</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Operation</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ADD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">SUB</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MUL</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">DIV</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//写一个方法，返回对应的优先级数字</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">(String operation)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span> (operation) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>result = ADD;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>result = SUB;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>result = MUL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>result = DIV;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;不存在该运算符&quot;</span> + operation);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="逆波兰计算器完整版"><a href="#逆波兰计算器完整版" class="headerlink" title="逆波兰计算器完整版"></a>逆波兰计算器完整版</h1><ol><li>支持 + - * &#x2F; ( ) </li><li>多位数，支持小数,</li><li>兼容处理, 过滤任何空白字符，包括空格、制表符、换页符<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReversePolishMultiCalc</span> &#123;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配 + - * / ( ) 运算符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SYMBOL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\+|-|\\*|/|\\(|\\)&quot;</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LEFT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">RIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;)&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ADD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;+&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MINUS= <span class="hljs-string">&quot;-&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TIMES</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DIVISION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加減 + -</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LEVEL_01</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 乘除 * /</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LEVEL_02</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 括号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LEVEL_HIGH</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br><br><br>    <span class="hljs-keyword">static</span> Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span> List&lt;String&gt; data = Collections.synchronizedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 去除所有空白符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">replaceAllBlank</span><span class="hljs-params">(String s )</span>&#123;<br>        <span class="hljs-comment">// \\s+ 匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \f\n\r\t\v]</span><br>        <span class="hljs-keyword">return</span> s.replaceAll(<span class="hljs-string">&quot;\\s+&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是不是数字 int double long float</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNumber</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^[-\\+]?[.\\d]*$&quot;</span>);<br>        <span class="hljs-keyword">return</span> pattern.matcher(s).matches();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是不是运算符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymbol</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-keyword">return</span> s.matches(SYMBOL);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配运算等级</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calcLevel</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;+&quot;</span>.equals(s) || <span class="hljs-string">&quot;-&quot;</span>.equals(s))&#123;<br>            <span class="hljs-keyword">return</span> LEVEL_01;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;*&quot;</span>.equals(s) || <span class="hljs-string">&quot;/&quot;</span>.equals(s))&#123;<br>            <span class="hljs-keyword">return</span> LEVEL_02;<br>        &#125;<br>        <span class="hljs-keyword">return</span> LEVEL_HIGH;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">doMatch</span> <span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span>(s == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(s.trim())) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;data is empty&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!isNumber(s.charAt(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;data illeagle,start not with a number&quot;</span>);<br><br>        s = replaceAllBlank(s);<br><br>        String each;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(isSymbol(s.charAt(i)+<span class="hljs-string">&quot;&quot;</span>))&#123;<br>                each = s.charAt(i)+<span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-comment">//栈为空，(操作符，或者 操作符优先级大于栈顶优先级 &amp;&amp; 操作符优先级不是( )的优先级 及是 ) 不能直接入栈</span><br>                <span class="hljs-keyword">if</span>(stack.isEmpty() || LEFT.equals(each)<br>                        || ((calcLevel(each) &gt; calcLevel(stack.peek())) &amp;&amp; calcLevel(each) &lt; LEVEL_HIGH))&#123;<br>                    stack.push(each);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( !stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()))&#123;<br>                    <span class="hljs-comment">//栈非空，操作符优先级小于等于栈顶优先级时出栈入列，直到栈为空，或者遇到了(，最后操作符入栈</span><br>                    <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()) )&#123;<br>                        <span class="hljs-keyword">if</span>(calcLevel(stack.peek()) == LEVEL_HIGH)&#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        data.add(stack.pop());<br>                    &#125;<br>                    stack.push(each);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(RIGHT.equals(each))&#123;<br>                    <span class="hljs-comment">// ) 操作符，依次出栈入列直到空栈或者遇到了第一个)操作符，此时)出栈</span><br>                    <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; LEVEL_HIGH &gt;= calcLevel(stack.peek()))&#123;<br>                        <span class="hljs-keyword">if</span>(LEVEL_HIGH == calcLevel(stack.peek()))&#123;<br>                            stack.pop();<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        data.add(stack.pop());<br>                    &#125;<br>                &#125;<br>                start = i ;    <span class="hljs-comment">//前一个运算符的位置</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( i == s.length()-<span class="hljs-number">1</span> || isSymbol(s.charAt(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;&quot;</span>) )&#123;<br>                each = start == <span class="hljs-number">0</span> ? s.substring(start,i+<span class="hljs-number">1</span>) : s.substring(start+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(isNumber(each)) &#123;<br>                    data.add(each);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;data not match number&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果栈里还有元素，此时元素需要依次出栈入列，可以想象栈里剩下栈顶为/，栈底为+，应该依次出栈入列，可以直接翻转整个stack 添加到队列</span><br>        Collections.reverse(stack);<br>        data.addAll(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(stack));<br><br>        System.out.println(data);<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算出结果</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Double <span class="hljs-title function_">doCalc</span><span class="hljs-params">(List&lt;String&gt; list)</span>&#123;<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">0d</span>;<br>        <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span> || list.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">1</span>)&#123;<br>            System.out.println(list);<br>            d = Double.valueOf(list.get(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">return</span> d;<br>        &#125;<br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            list1.add(list.get(i));<br>            <span class="hljs-keyword">if</span>(isSymbol(list.get(i)))&#123;<br>                <span class="hljs-type">Double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> doTheMath(list.get(i - <span class="hljs-number">2</span>), list.get(i - <span class="hljs-number">1</span>), list.get(i));<br>                list1.remove(i);<br>                list1.remove(i-<span class="hljs-number">1</span>);<br>                list1.set(i-<span class="hljs-number">2</span>,d1+<span class="hljs-string">&quot;&quot;</span>);<br>                list1.addAll(list.subList(i+<span class="hljs-number">1</span>,list.size()));<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        doCalc(list1);<br>        <span class="hljs-keyword">return</span> d;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 运算</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbol</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Double <span class="hljs-title function_">doTheMath</span><span class="hljs-params">(String s1,String s2,String symbol)</span>&#123;<br>        Double result ;<br>        <span class="hljs-keyword">switch</span> (symbol)&#123;<br>            <span class="hljs-keyword">case</span> ADD : result = Double.valueOf(s1) + Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MINUS : result = Double.valueOf(s1) - Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TIMES : result = Double.valueOf(s1) * Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DIVISION : result = Double.valueOf(s1) / Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> : result = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//String math = &quot;9+(3-1)*3+10/2&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">math</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12.8 + (2 - 3.55)*4+10/5.0&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            doCalc(doMatch(math));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈（二）</title>
    <link href="/2019/06/10/%E6%A0%88%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2019/06/10/%E6%A0%88%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="使用栈完成计算-一个表达式的结果"><a href="#使用栈完成计算-一个表达式的结果" class="headerlink" title="使用栈完成计算 一个表达式的结果"></a>使用栈完成计算 一个表达式的结果</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281521144.png"><br>对计算机而言，它接收到的就是一个字符串</p><h2 id="使用栈完成表达式的计算-思路"><a href="#使用栈完成表达式的计算-思路" class="headerlink" title="使用栈完成表达式的计算 思路"></a>使用栈完成表达式的计算 思路</h2><ol><li>通过一个 index  值（索引），来遍历我们的表达式</li><li>如果我们发现是一个数字, 就直接入数栈</li><li>如果发现扫描到是一个符号,  就分如下情况</li></ol><ul><li>如果发现当前的符号栈为 空，就直接入栈</li><li>如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈， 如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</li></ul><ol start="4"><li>当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</li><li>最后在数栈只有一个数字，就是表达式的结果</li></ol><p>验证： 3+2*6-2 &#x3D; 13</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281522101.png"><br>这时-号优先级低于*，就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281522811.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281522061.png"><br>当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281522972.png"></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281522575.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//根据前面的思路，完成表达式的运算</span><br><span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;7*2*2-5+1-5+3-4&quot;</span>; <span class="hljs-comment">// 15//如何处理多位数的问题？</span><br><span class="hljs-comment">//创建两个栈，数栈，一个符号栈</span><br><span class="hljs-type">ArrayStack2</span> <span class="hljs-variable">numStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br><span class="hljs-type">ArrayStack2</span> <span class="hljs-variable">operStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//定义需要的相关变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//用于扫描</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">oper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">//将每次扫描得到char保存到ch</span><br><span class="hljs-type">String</span> <span class="hljs-variable">keepNum</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//用于拼接 多位数</span><br><span class="hljs-comment">//开始while循环的扫描expression</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">//依次得到expression 的每一个字符</span><br>ch = expression.substring(index, index+<span class="hljs-number">1</span>).charAt(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//判断ch是什么，然后做相应的处理</span><br><span class="hljs-keyword">if</span>(operStack.isOper(ch)) &#123;<span class="hljs-comment">//如果是运算符</span><br><span class="hljs-comment">//判断当前的符号栈是否为空</span><br><span class="hljs-keyword">if</span>(!operStack.isEmpty()) &#123;<br><span class="hljs-comment">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数,</span><br><span class="hljs-comment">//在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span><br><span class="hljs-keyword">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;<br>num1 = numStack.pop();<br>num2 = numStack.pop();<br>oper = operStack.pop();<br>res = numStack.cal(num1, num2, oper);<br><span class="hljs-comment">//把运算的结果如数栈</span><br>numStack.push(res);<br><span class="hljs-comment">//然后将当前的操作符入符号栈</span><br>operStack.push(ch);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span><br>operStack.push(ch);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//如果为空直接入符号栈..</span><br>operStack.push(ch); <span class="hljs-comment">// 1 + 3</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果是数，则直接入数栈</span><br><br><span class="hljs-comment">//numStack.push(ch - 48); //? &quot;1+3&quot; &#x27;1&#x27; =&gt; 1   &#x27;1&#x27; 的ascll 码是49</span><br><span class="hljs-comment">//分析思路</span><br><span class="hljs-comment">//1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span><br><span class="hljs-comment">//2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈</span><br><span class="hljs-comment">//3. 因此我们需要定义一个变量 字符串，用于拼接</span><br><br><span class="hljs-comment">//处理多位数</span><br>keepNum += ch;<br><br><span class="hljs-comment">//如果ch已经是expression的最后一位，就直接入栈</span><br><span class="hljs-keyword">if</span> (index == expression.length() - <span class="hljs-number">1</span>) &#123;<br>numStack.push(Integer.parseInt(keepNum));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br><span class="hljs-comment">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span><br><span class="hljs-comment">//注意是看后一位，不是index++</span><br><span class="hljs-keyword">if</span> (operStack.isOper(expression.substring(index+<span class="hljs-number">1</span>,index+<span class="hljs-number">2</span>).charAt(<span class="hljs-number">0</span>))) &#123;<br><span class="hljs-comment">//如果后一位是运算符，则入栈 keepNum = &quot;1&quot; 或者 &quot;123&quot;</span><br>numStack.push(Integer.parseInt(keepNum));<br><span class="hljs-comment">//重要的!!!!!!, keepNum清空</span><br>keepNum = <span class="hljs-string">&quot;&quot;</span>;<br><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//让index + 1, 并判断是否扫描到expression最后.</span><br>index++;<br><span class="hljs-keyword">if</span> (index &gt;= expression.length()) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">//如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】</span><br><span class="hljs-keyword">if</span>(operStack.isEmpty()) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>num1 = numStack.pop();<br>num2 = numStack.pop();<br>oper = operStack.pop();<br>res = numStack.cal(num1, num2, oper);<br>numStack.push(res);<span class="hljs-comment">//入栈</span><br>&#125;<br><span class="hljs-comment">//将数栈的最后数，pop出，就是结果</span><br><span class="hljs-type">int</span> <span class="hljs-variable">res2</span> <span class="hljs-operator">=</span> numStack.pop();<br>System.out.printf(<span class="hljs-string">&quot;表达式 %s = %d&quot;</span>, expression, res2);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//先创建一个栈,直接使用前面创建好</span><br><span class="hljs-comment">//定义一个 ArrayStack2 表示栈, 需要扩展功能</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack2</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize; <span class="hljs-comment">// 栈的大小</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] stack; <span class="hljs-comment">// 数组，数组模拟栈，数据就放在该数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">// top表示栈顶，初始化为-1</span><br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack2</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br><span class="hljs-built_in">this</span>.maxSize = maxSize;<br>stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-built_in">this</span>.maxSize];<br>&#125;<br><br><span class="hljs-comment">//增加一个方法，可以返回当前栈顶的值, 但是不是真正的pop</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> stack[top];<br>&#125;<br><br><span class="hljs-comment">//栈满</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//栈空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//入栈-push</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-comment">//先判断栈是否满</span><br><span class="hljs-keyword">if</span>(isFull()) &#123;<br>System.out.println(<span class="hljs-string">&quot;栈满&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>top++;<br>stack[top] = value;<br>&#125;<br><span class="hljs-comment">//出栈-pop, 将栈顶的数据返回</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//先判断栈是否空</span><br><span class="hljs-keyword">if</span>(isEmpty()) &#123;<br><span class="hljs-comment">//抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈空，没有数据~&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stack[top];<br>top--;<br><span class="hljs-keyword">return</span> value;<br>&#125;<br><span class="hljs-comment">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(isEmpty()) &#123;<br>System.out.println(<span class="hljs-string">&quot;栈空，没有数据~~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//需要从栈顶开始显示数据</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>System.out.printf(<span class="hljs-string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);<br>&#125;<br>&#125;<br><span class="hljs-comment">//返回运算符的优先级，优先级是程序员来确定, 优先级使用数字表示</span><br><span class="hljs-comment">//数字越大，则优先级就越高.</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">priority</span><span class="hljs-params">(<span class="hljs-type">int</span> oper)</span> &#123;<br><span class="hljs-keyword">if</span>(oper == <span class="hljs-string">&#x27;*&#x27;</span> || oper == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;+&#x27;</span> || oper == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 假定目前的表达式只有 +, - , * , /</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//判断是不是一个运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOper</span><span class="hljs-params">(<span class="hljs-type">char</span> val)</span> &#123;<br><span class="hljs-keyword">return</span> val == <span class="hljs-string">&#x27;+&#x27;</span> || val == <span class="hljs-string">&#x27;-&#x27;</span> || val == <span class="hljs-string">&#x27;*&#x27;</span> || val == <span class="hljs-string">&#x27;/&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//计算方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2, <span class="hljs-type">int</span> oper)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// res 用于存放计算的结果</span><br><span class="hljs-keyword">switch</span> (oper) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>res = num1 + num2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>res = num2 - num1;<span class="hljs-comment">// 注意顺序</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>res = num1 * num2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>res = num2 / num1;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈（一）</title>
    <link href="/2019/06/09/%E6%A0%88%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/06/09/%E6%A0%88%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><ol><li>栈的英文为(stack)</li><li>栈是一个先入后出(FILO-First In Last Out)的有序列表。</li><li>栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。</li><li>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</li><li>出栈(pop)和入栈(push)的概念(如图所示)</li></ol><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281524148.png"><br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281524427.png"></p><h1 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h1><ol><li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。 </li><li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li><li>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</li><li>二叉树的遍历。</li><li>图形的深度优先(depth一first)搜索法。</li></ol><h1 id="数组模拟栈"><a href="#数组模拟栈" class="headerlink" title="数组模拟栈"></a>数组模拟栈</h1><p>由于栈是一种有序列表，当然可以使用数组的结构来储存栈的数据内容，下面我们就用数组模拟栈的出栈，入栈等操作。<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281524112.png"></p><h2 id="实现-栈的-思路分析"><a href="#实现-栈的-思路分析" class="headerlink" title="实现 栈的 思路分析"></a>实现 栈的 思路分析</h2><ol><li>使用数组来模拟栈</li><li>定义一个 top  来表示栈顶，初始化 为  -1</li><li>入栈的操作，当有数据加入到栈时， top++;  stack[top] &#x3D; data;</li><li>出栈的操作， int value &#x3D; stack[top]; top–, return value<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个 ArrayStack 表示栈</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize; <span class="hljs-comment">// 栈的大小</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] stack; <span class="hljs-comment">// 数组，数组模拟栈，数据就放在该数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">// top表示栈顶，初始化为-1</span><br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br><span class="hljs-built_in">this</span>.maxSize = maxSize;<br>stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-built_in">this</span>.maxSize];<br>&#125;<br><br><span class="hljs-comment">//栈满</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//栈空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//入栈-push</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-comment">//先判断栈是否满</span><br><span class="hljs-keyword">if</span>(isFull()) &#123;<br>System.out.println(<span class="hljs-string">&quot;栈满&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>top++;<br>stack[top] = value;<br>&#125;<br><span class="hljs-comment">//出栈-pop, 将栈顶的数据返回</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//先判断栈是否空</span><br><span class="hljs-keyword">if</span>(isEmpty()) &#123;<br><span class="hljs-comment">//抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈空，没有数据~&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stack[top];<br>top--;<br><span class="hljs-keyword">return</span> value;<br>&#125;<br><span class="hljs-comment">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(isEmpty()) &#123;<br>System.out.println(<span class="hljs-string">&quot;栈空，没有数据~~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//需要从栈顶开始显示数据</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>System.out.printf(<span class="hljs-string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试代码</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStackDemo</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//测试一下ArrayStack 是否正确</span><br><span class="hljs-comment">//先创建一个ArrayStack对象-&gt;表示栈</span><br><span class="hljs-type">ArrayStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack</span>(<span class="hljs-number">4</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//控制是否退出菜单</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-keyword">while</span>(loop) &#123;<br>System.out.println(<span class="hljs-string">&quot;show: 表示显示栈&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;exit: 退出程序&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;push: 表示添加数据到栈(入栈)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;pop: 表示从栈取出数据(出栈)&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;请输入你的选择&quot;</span>);<br>key = scanner.next();<br><span class="hljs-keyword">switch</span> (key) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show&quot;</span>:<br>stack.list();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;push&quot;</span>:<br>System.out.println(<span class="hljs-string">&quot;请输入一个数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>stack.push(value);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pop&quot;</span>:<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> stack.pop();<br>System.out.printf(<span class="hljs-string">&quot;出栈的数据是 %d\n&quot;</span>, res);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>System.out.println(e.getMessage());<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>scanner.close();<br>loop = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;程序退出~~~&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表（二）</title>
    <link href="/2019/06/05/%E9%93%BE%E8%A1%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2019/06/05/%E9%93%BE%E8%A1%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><h2 id="单双链表的一些比较"><a href="#单双链表的一些比较" class="headerlink" title="单双链表的一些比较"></a>单双链表的一些比较</h2><ol><li>单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</li><li>单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面我们单链表删除时节点，总是找到temp,temp是待删除节点的前一个节点.<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281511967.png"></li></ol><h2 id="分析思路和代码实现"><a href="#分析思路和代码实现" class="headerlink" title="分析思路和代码实现"></a>分析思路和代码实现</h2><p>双向链表的遍历，添加，修改，删除的操作思路，代码实现</p><ol><li>遍历方式和单链表一样，只是可以向前，也可以向后查找</li><li>添加 (默认添加到双向链表的最后)</li></ol><ul><li>先找到双向链表的最后这个节点</li><li>temp.next &#x3D; newHeroNode</li><li>newHeroNode.pre &#x3D; temp</li></ul><ol start="3"><li>修改 思路和 原来的单向链表一样.</li><li>删除</li></ol><ul><li>因为是双向链表，因此，我们可以实现自我删除某个节点</li><li>直接找到要删除的这个节点，比如temp</li><li>temp.pre.next &#x3D; temp.next</li><li>temp.next.pre &#x3D; temp.pre;</li></ul><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281511714.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedListDemo</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 测试</span><br>System.out.println(<span class="hljs-string">&quot;双向链表的测试&quot;</span>);<br><span class="hljs-comment">// 先创建节点</span><br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">hero1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode2</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">hero2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode2</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">hero3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode2</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">hero4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode2</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><span class="hljs-comment">// 创建一个双向链表</span><br><span class="hljs-type">DoubleLinkedList</span> <span class="hljs-variable">doubleLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleLinkedList</span>();<br>doubleLinkedList.add(hero1);<br>doubleLinkedList.add(hero2);<br>doubleLinkedList.add(hero3);<br>doubleLinkedList.add(hero4);<br>doubleLinkedList.list();<br><span class="hljs-comment">// 修改</span><br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">newHeroNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode2</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;公孙胜&quot;</span>, <span class="hljs-string">&quot;入云龙&quot;</span>);<br>doubleLinkedList.update(newHeroNode);<br>System.out.println(<span class="hljs-string">&quot;修改后的链表情况&quot;</span>);<br>doubleLinkedList.list();<br><span class="hljs-comment">// 删除</span><br>doubleLinkedList.del(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;删除后的链表情况~~&quot;</span>);<br>doubleLinkedList.list();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 创建一个双向链表的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedList</span> &#123;<br><span class="hljs-comment">// 先初始化一个头节点, 头节点不要动, 不存放具体的数据</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">HeroNode2</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode2</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 返回头节点</span><br><span class="hljs-keyword">public</span> HeroNode2 <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-comment">// 遍历双向链表的方法</span><br><span class="hljs-comment">// 显示链表[遍历]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 判断链表是否为空</span><br><span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 因为头节点，不能动，因此我们需要一个辅助变量来遍历</span><br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">// 判断是否到链表最后</span><br><span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 输出节点的信息</span><br>System.out.println(temp);<br><span class="hljs-comment">// 将temp后移， 一定小心</span><br>temp = temp.next;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 添加一个节点到双向链表的最后.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HeroNode2 heroNode)</span> &#123;<br><span class="hljs-comment">// 因为head节点不能动，因此我们需要一个辅助遍历 temp</span><br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br><span class="hljs-comment">// 遍历链表，找到最后</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">// 找到链表的最后</span><br><span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 如果没有找到最后, 将将temp后移</span><br>temp = temp.next;<br>&#125;<br><span class="hljs-comment">// 当退出while循环时，temp就指向了链表的最后</span><br><span class="hljs-comment">// 形成一个双向链表</span><br>temp.next = heroNode;<br>heroNode.pre = temp;<br>&#125;<br><span class="hljs-comment">// 修改一个节点的内容, 可以看到双向链表的节点内容修改和单向链表一样</span><br><span class="hljs-comment">// 只是 节点类型改成 HeroNode2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HeroNode2 newHeroNode)</span> &#123;<br><span class="hljs-comment">// 判断是否空</span><br><span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;链表为空~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 找到需要修改的节点, 根据no编号</span><br><span class="hljs-comment">// 定义一个辅助变量</span><br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 表示是否找到该节点</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">// 已经遍历完链表</span><br>&#125;<br><span class="hljs-keyword">if</span> (temp.no == newHeroNode.no) &#123;<br><span class="hljs-comment">// 找到</span><br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next;<br>&#125;<br><span class="hljs-comment">// 根据flag 判断是否找到要修改的节点</span><br><span class="hljs-keyword">if</span> (flag) &#123;<br>temp.name = newHeroNode.name;<br>temp.nickname = newHeroNode.nickname;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 没有找到</span><br>System.out.printf(<span class="hljs-string">&quot;没有找到 编号 %d 的节点，不能修改\n&quot;</span>, newHeroNode.no);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 从双向链表中删除一个节点,</span><br><span class="hljs-comment">// 说明</span><br><span class="hljs-comment">// 1 对于双向链表，我们可以直接找到要删除的这个节点</span><br><span class="hljs-comment">// 2 找到后，自我删除即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br><span class="hljs-comment">// 判断当前链表是否为空</span><br><span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 空链表</span><br>System.out.println(<span class="hljs-string">&quot;链表为空，无法删除&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">HeroNode2</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next; <span class="hljs-comment">// 辅助变量(指针)</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标志是否找到待删除节点的</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 已经到链表的最后</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (temp.no == no) &#123;<br><span class="hljs-comment">// 找到的待删除节点的前一个节点temp</span><br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next; <span class="hljs-comment">// temp后移，遍历</span><br>&#125;<br><span class="hljs-comment">// 判断flag</span><br><span class="hljs-keyword">if</span> (flag) &#123; <span class="hljs-comment">// 找到</span><br><span class="hljs-comment">// 可以删除</span><br><span class="hljs-comment">// temp.next = temp.next.next;[单向链表]</span><br>temp.pre.next = temp.next;<br><span class="hljs-comment">// 这里我们的代码有问题?</span><br><span class="hljs-comment">// 如果是最后一个节点，就不需要执行下面这句话，否则出现空指针</span><br><span class="hljs-keyword">if</span> (temp.next != <span class="hljs-literal">null</span>) &#123;<br>temp.next.pre = temp.pre;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.printf(<span class="hljs-string">&quot;要删除的 %d 节点不存在\n&quot;</span>, no);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 定义HeroNode2 ， 每个HeroNode 对象就是一个节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> no;<br><span class="hljs-keyword">public</span> String name;<br><span class="hljs-keyword">public</span> String nickname;<br><span class="hljs-keyword">public</span> HeroNode2 next; <span class="hljs-comment">// 指向下一个节点, 默认为null</span><br><span class="hljs-keyword">public</span> HeroNode2 pre; <span class="hljs-comment">// 指向前一个节点, 默认为null</span><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode2</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name, String nickname)</span> &#123;<br><span class="hljs-built_in">this</span>.no = no;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.nickname = nickname;<br>&#125;<br><span class="hljs-comment">// 为了显示方法，我们重新toString</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, nickname=&quot;</span> + nickname + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h1><h2 id="Josephu-约瑟夫、约瑟夫环-问题"><a href="#Josephu-约瑟夫、约瑟夫环-问题" class="headerlink" title="Josephu(约瑟夫、约瑟夫环)  问题"></a>Josephu(约瑟夫、约瑟夫环)  问题</h2><p>Josephu  问题为：设编号为1，2，…n的n个人围坐一圈，约定编号为k（1&lt;&#x3D;k&lt;&#x3D;n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><ul><li>提示</li></ul><p>用一个不带头结点的循环链表来处理Josephu问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p><p>例：<br>n &#x3D; 5 , 即有5个人 。<br>k &#x3D; 1, 从第一个人开始报数。<br>m &#x3D; 2, 数2下。</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281511504.png"></p><h2 id="使用环形单向链表来解决-Josephu问题"><a href="#使用环形单向链表来解决-Josephu问题" class="headerlink" title="使用环形单向链表来解决 Josephu问题"></a>使用环形单向链表来解决 Josephu问题</h2><ul><li>构建一个单向的环形链表思路</li></ul><ol><li>先创建第一个节点, 让 first 指向该节点，并形成环形，当前节点为curBoy<br> <img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281511559.png"></li><li>后面当我们每创建一个新的节点，就把该节点，加入到已有的环形链表中即可.将新的节点称为boy,将curboy.next &#x3D; boy;boy.next&#x3D;first；curBoy &#x3D; boy;<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281512151.png"></li></ol><ul><li>遍历环形链表</li></ul><ol><li>先让一个辅助指针(变量) curBoy，指向first节点</li><li>然后通过一个while循环遍历 该环形链表即可 。当 curBoy.next  &#x3D;&#x3D; first 结束遍历</li></ol><ul><li>根据用户的输入，生成一个小孩出圈的顺序</li></ul><p>n &#x3D; 5 , 即有5个人</p><p>k &#x3D; 1, 从第一个人开始报数</p><p>m &#x3D; 2, 数2下</p><ol><li>需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点.<br>补充： 小孩报数前，先让 first 和  helper 移动 k - 1次<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281512357.png"></li><li>当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281512899.png"></li><li>这时就可以将first 指向的小孩节点 出圈<br>first &#x3D; first .next;<br>helper.next &#x3D; first<br>原来first 指向的节点就没有任何引用，就会被回收</li></ol><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281512096.png"><br>出圈的顺序<br>2-&gt;4-&gt;1-&gt;5-&gt;3</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="节点类"><a href="#节点类" class="headerlink" title="节点类"></a>节点类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个Boy类，表示一个节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boy</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<span class="hljs-comment">// 编号</span><br><span class="hljs-keyword">private</span> Boy next; <span class="hljs-comment">// 指向下一个节点,默认null</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Boy</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br><span class="hljs-built_in">this</span>.no = no;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> no;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br><span class="hljs-built_in">this</span>.no = no;<br>&#125;<br><br><span class="hljs-keyword">public</span> Boy <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> next;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Boy next)</span> &#123;<br><span class="hljs-built_in">this</span>.next = next;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个环形的单向链表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleSingleLinkedList</span> &#123;<br><span class="hljs-comment">// 创建一个first节点,当前没有编号</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Boy</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// 添加小孩节点，构建成一个环形的链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBoy</span><span class="hljs-params">(<span class="hljs-type">int</span> nums)</span> &#123;<br><span class="hljs-comment">// nums 做一个数据校验</span><br><span class="hljs-keyword">if</span> (nums &lt; <span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;nums的值不正确&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">Boy</span> <span class="hljs-variable">curBoy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 辅助指针，帮助构建环形链表</span><br><span class="hljs-comment">// 使用for来创建我们的环形链表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums; i++) &#123;<br><span class="hljs-comment">// 根据编号，创建小孩节点</span><br><span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>(i);<br><span class="hljs-comment">// 如果是第一个小孩</span><br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>first = boy;<br>first.setNext(first); <span class="hljs-comment">// 构成环</span><br>curBoy = first; <span class="hljs-comment">// 让curBoy指向第一个小孩</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>curBoy.setNext(boy);<span class="hljs-comment">//</span><br>boy.setNext(first);<span class="hljs-comment">//</span><br>curBoy = boy;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 遍历当前的环形链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBoy</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 判断链表是否为空</span><br><span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;没有任何小孩~~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 因为first不能动，因此我们仍然使用一个辅助指针完成遍历</span><br><span class="hljs-type">Boy</span> <span class="hljs-variable">curBoy</span> <span class="hljs-operator">=</span> first;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>System.out.printf(<span class="hljs-string">&quot;小孩的编号 %d \n&quot;</span>, curBoy.getNo());<br><span class="hljs-keyword">if</span> (curBoy.getNext() == first) &#123;<span class="hljs-comment">// 说明已经遍历完毕</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>curBoy = curBoy.getNext(); <span class="hljs-comment">// curBoy后移</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 根据用户的输入，计算出小孩出圈的顺序</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> startNo 表示从第几个小孩开始数数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> countNum 表示数几下</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nums 表示最初有多少小孩在圈中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countBoy</span><span class="hljs-params">(<span class="hljs-type">int</span> startNo, <span class="hljs-type">int</span> countNum, <span class="hljs-type">int</span> nums)</span> &#123;<br><span class="hljs-comment">// 先对数据进行校验</span><br><span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span> || startNo &lt; <span class="hljs-number">1</span> || startNo &gt; nums) &#123;<br>System.out.println(<span class="hljs-string">&quot;参数输入有误， 请重新输入&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 创建要给辅助指针,帮助完成小孩出圈</span><br><span class="hljs-type">Boy</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> first;<br><span class="hljs-comment">// 需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span> (helper.getNext() == first) &#123; <span class="hljs-comment">// 说明helper指向最后小孩节点</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>helper = helper.getNext();<br>&#125;<br><span class="hljs-comment">//小孩报数前，先让 first 和  helper 移动 k - 1次</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; startNo - <span class="hljs-number">1</span>; j++) &#123;<br>first = first.getNext();<br>helper = helper.getNext();<br>&#125;<br><span class="hljs-comment">//当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈</span><br><span class="hljs-comment">//这里是一个循环操作，知道圈中只有一个节点</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span>(helper == first) &#123; <span class="hljs-comment">//说明圈中只有一个节点</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//让 first 和 helper 指针同时 的移动 countNum - 1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; countNum - <span class="hljs-number">1</span>; j++) &#123;<br>first = first.getNext();<br>helper = helper.getNext();<br>&#125;<br><span class="hljs-comment">//这时first指向的节点，就是要出圈的小孩节点</span><br>System.out.printf(<span class="hljs-string">&quot;小孩%d出圈\n&quot;</span>, first.getNo());<br><span class="hljs-comment">//这时将first指向的小孩节点出圈</span><br>first = first.getNext();<br>helper.setNext(first); <span class="hljs-comment">//</span><br>&#125;<br>System.out.printf(<span class="hljs-string">&quot;最后留在圈中的小孩编号%d \n&quot;</span>, first.getNo());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Josepfu</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 测试一把看看构建环形链表，和遍历是否ok</span><br><span class="hljs-type">CircleSingleLinkedList</span> <span class="hljs-variable">circleSingleLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleSingleLinkedList</span>();<br>circleSingleLinkedList.addBoy(<span class="hljs-number">125</span>);<span class="hljs-comment">// 加入5个小孩节点</span><br>circleSingleLinkedList.showBoy();<br><br><span class="hljs-comment">//测试一把小孩出圈是否正确</span><br>circleSingleLinkedList.countBoy(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">125</span>); <span class="hljs-comment">// 2-&gt;4-&gt;1-&gt;5-&gt;3</span><br><span class="hljs-comment">//String str = &quot;7*2*2-5+1-5+3-3&quot;;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表（一）</title>
    <link href="/2019/06/04/%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/06/04/%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="链表-Linked-List-介绍"><a href="#链表-Linked-List-介绍" class="headerlink" title="链表(Linked List)介绍"></a>链表(Linked List)介绍</h1><p>链表是有序的列表，但是它在内存中是存储如下<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281513663.png"></p><ol><li>链表是以节点的方式来存储,是链式存储</li><li>每个节点包含 data 域， next 域：指向下一个节点.</li><li>发现链表的各个节点不一定是连续存储.</li><li>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</li></ol><h1 id="单链表介绍"><a href="#单链表介绍" class="headerlink" title="单链表介绍"></a>单链表介绍</h1><p>单链表(带头结点) 逻辑结构示意图如下<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281513158.png"></p><h1 id="单链表的应用实例"><a href="#单链表的应用实例" class="headerlink" title="单链表的应用实例"></a>单链表的应用实例</h1><p>使用带head头的单向链表实现 –水浒英雄排行榜管理</p><ol><li>完成对英雄人物的增删改查操作， 注: 删除和修改,查找</li><li>第一种方法在添加英雄时，直接添加到链表的尾部</li><li>第二种方式在添加英雄时，根据排名将英雄插入到指定位置 (如果有这个排名，则添加失败，并给出提示)<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281513290.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义HeroNode ， 每个HeroNode 对象就是一个节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> no;<br><span class="hljs-keyword">public</span> String name;<br><span class="hljs-keyword">public</span> String nickname;<br><span class="hljs-keyword">public</span> HeroNode next; <span class="hljs-comment">//指向下一个节点</span><br><span class="hljs-comment">//构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name, String nickname)</span> &#123;<br><span class="hljs-built_in">this</span>.no = no;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.nickname = nickname;<br>&#125;<br><span class="hljs-comment">//为了显示方法，我们重新toString</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, nickname=&quot;</span> + nickname + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="第一种方法在添加英雄时，直接添加到链表的尾部"><a href="#第一种方法在添加英雄时，直接添加到链表的尾部" class="headerlink" title="第一种方法在添加英雄时，直接添加到链表的尾部"></a>第一种方法在添加英雄时，直接添加到链表的尾部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义SingleLinkedList 管理我们的英雄</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedList</span> &#123;<br><span class="hljs-comment">//先初始化一个头节点, 头节点不要动, 不存放具体的数据</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">HeroNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//返回头节点</span><br><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">//添加节点到单向链表</span><br><span class="hljs-comment">//思路，当不考虑编号顺序时</span><br><span class="hljs-comment">//1. 找到当前链表的最后节点</span><br><span class="hljs-comment">//2. 将最后这个节点的next 指向 新的节点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br><br><span class="hljs-comment">//因为head节点不能动，因此我们需要一个辅助变量 temp</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br><span class="hljs-comment">//遍历链表，找到最后</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">//找到链表的最后</span><br><span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//如果没有找到最后, 将将temp后移</span><br>temp = temp.next;<br>&#125;<br><span class="hljs-comment">//当退出while循环时，temp就指向了链表的最后</span><br><span class="hljs-comment">//将最后这个节点的next 指向 新的节点</span><br>temp.next = heroNode;<br>&#125;<br><br><span class="hljs-comment">//显示链表[遍历]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//判断链表是否为空</span><br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">//判断是否到链表最后</span><br><span class="hljs-keyword">if</span>(temp == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//输出节点的信息</span><br>System.out.println(temp);<br><span class="hljs-comment">//将temp后移， 一定小心</span><br>temp = temp.next;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二种方式在添加英雄时，根据排名将英雄插入到指定位置"><a href="#第二种方式在添加英雄时，根据排名将英雄插入到指定位置" class="headerlink" title="第二种方式在添加英雄时，根据排名将英雄插入到指定位置"></a>第二种方式在添加英雄时，根据排名将英雄插入到指定位置</h2><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281514094.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第二种方式在添加英雄时，根据排名将英雄插入到指定位置</span><br><span class="hljs-comment">//(如果有这个排名，则添加失败，并给出提示)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br><span class="hljs-comment">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span><br><span class="hljs-comment">//因为单链表，因为我们找的temp 是位于 添加位置的前一个节点，否则插入不了</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// flag标志添加的编号是否存在，默认为false</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//说明temp已经在链表的最后</span><br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//</span><br>&#125; <br><span class="hljs-keyword">if</span>(temp.next.no &gt; heroNode.no) &#123; <span class="hljs-comment">//位置找到，就在temp的后面插入</span><br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no) &#123;<span class="hljs-comment">//说明希望添加的heroNode的编号已然存在</span><br><br>flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">//说明编号存在</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next; <span class="hljs-comment">//后移，遍历当前链表</span><br>&#125;<br><span class="hljs-comment">//判断flag 的值</span><br><span class="hljs-keyword">if</span>(flag) &#123; <span class="hljs-comment">//不能添加，说明编号存在</span><br>System.out.printf(<span class="hljs-string">&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\n&quot;</span>, heroNode.no);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//插入到链表中, temp的后面</span><br>heroNode.next = temp.next;<br>temp.next = heroNode;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单链表的修改实现"><a href="#单链表的修改实现" class="headerlink" title="单链表的修改实现"></a>单链表的修改实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改节点的信息, 根据no编号来修改，即no编号不能改.</span><br><span class="hljs-comment">//说明</span><br><span class="hljs-comment">//1. 根据 newHeroNode 的 no 来修改即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HeroNode newHeroNode)</span> &#123;<br><span class="hljs-comment">//判断是否空</span><br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;链表为空~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//找到需要修改的节点, 根据no编号</span><br><span class="hljs-comment">//定义一个辅助变量</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//表示是否找到该节点</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//已经遍历完链表</span><br>&#125;<br><span class="hljs-keyword">if</span>(temp.no == newHeroNode.no) &#123;<br><span class="hljs-comment">//找到</span><br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next;<br>&#125;<br><span class="hljs-comment">//根据flag 判断是否找到要修改的节点</span><br><span class="hljs-keyword">if</span>(flag) &#123;<br>temp.name = newHeroNode.name;<br>temp.nickname = newHeroNode.nickname;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//没有找到</span><br>System.out.printf(<span class="hljs-string">&quot;没有找到 编号 %d 的节点，不能修改\n&quot;</span>, newHeroNode.no);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除链表节点"><a href="#删除链表节点" class="headerlink" title="删除链表节点"></a>删除链表节点</h2><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281514533.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除节点</span><br><span class="hljs-comment">//思路</span><br><span class="hljs-comment">//1. head 不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点</span><br><span class="hljs-comment">//2. 说明我们在比较时，是temp.next.no 和  需要删除的节点的no比较</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标志是否找到待删除节点的</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//已经到链表的最后</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(temp.next.no == no) &#123;<br><span class="hljs-comment">//找到的待删除节点的前一个节点temp</span><br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next; <span class="hljs-comment">//temp后移，遍历</span><br>&#125;<br><span class="hljs-comment">//判断flag</span><br><span class="hljs-keyword">if</span>(flag) &#123; <span class="hljs-comment">//找到</span><br><span class="hljs-comment">//可以删除</span><br>temp.next = temp.next.next;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.printf(<span class="hljs-string">&quot;要删除的 %d 节点不存在\n&quot;</span>, no);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="单链表面试题"><a href="#单链表面试题" class="headerlink" title="单链表面试题"></a>单链表面试题</h1><ol><li>求单链表中有效节点的个数</li><li>查找单链表中的倒数第k个结点 【新浪面试题】</li><li>单链表的反转【腾讯面试题，有点难度】</li><li>从尾到头打印单链表 【百度，要求方式1：反向遍历 。 方式2：Stack栈】</li><li>合并两个有序的单链表，合并之后的链表依然有序</li></ol><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head 链表的头节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的就是有效节点的个数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">(HeroNode head)</span> &#123;<br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//空链表</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//定义一个辅助的变量, 这里我们没有统计头节点</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br><span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>length++;<br>cur = cur.next; <span class="hljs-comment">//遍历</span><br>&#125;<br><span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查找单链表中的倒数第k个结点 【新浪面试题】</span><br><span class="hljs-comment">//思路</span><br><span class="hljs-comment">//1. 编写一个方法，接收head节点，同时接收一个index </span><br><span class="hljs-comment">//2. index 表示是倒数第index个节点</span><br><span class="hljs-comment">//3. 先把链表从头到尾遍历，得到链表的总的长度 getLength</span><br><span class="hljs-comment">//4. 得到size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到</span><br><span class="hljs-comment">//5. 如果找到了，则返回该节点，否则返回nulll</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title function_">findLastIndexNode</span><span class="hljs-params">(HeroNode head, <span class="hljs-type">int</span> index)</span> &#123;<br><span class="hljs-comment">//判断如果链表为空，返回null</span><br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没有找到</span><br>&#125;<br><span class="hljs-comment">//第一个遍历得到链表的长度(节点个数)</span><br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> getLength(head);<br><span class="hljs-comment">//第二次遍历  size-index 位置，就是我们倒数的第K个节点</span><br><span class="hljs-comment">//先做一个index的校验</span><br><span class="hljs-keyword">if</span>(index &lt;=<span class="hljs-number">0</span> || index &gt; size) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <br>&#125;<br><span class="hljs-comment">//定义给辅助变量， for 循环定位到倒数的index</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next; <span class="hljs-comment">//3 // 3 - 1 = 2</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt; size - index; i++) &#123;<br>cur = cur.next;<br>&#125;<br><span class="hljs-keyword">return</span> cur;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281514967.png"></p><p>思路: </p><ol><li>先定义一个节点 reverseHead &#x3D; new HeroNode();</li><li>从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端.</li><li>原来的链表的head.next &#x3D; reverseHead.next<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281515357.png"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将单链表反转</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversetList</span><span class="hljs-params">(HeroNode head)</span> &#123;<br><span class="hljs-comment">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span><br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span> || head.next.next == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-comment">//定义一个辅助的指针(变量)，帮助我们遍历原来的链表</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// 指向当前节点[cur]的下一个节点</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">reverseHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span><br><span class="hljs-comment">//动脑筋</span><br><span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123; <br>next = cur.next;<span class="hljs-comment">//先暂时保存当前节点的下一个节点，因为后面需要使用</span><br>cur.next = reverseHead.next;<span class="hljs-comment">//将cur的下一个节点指向新的链表的最前端</span><br>reverseHead.next = cur; <span class="hljs-comment">//将cur 连接到新的链表上</span><br>cur = next;<span class="hljs-comment">//让cur后移</span><br>&#125;<br><span class="hljs-comment">//将head.next 指向 reverseHead.next , 实现单链表的反转</span><br>head.next = reverseHead.next;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p>思路</p><ol><li>方式1： 先将单链表进行反转操作，然后再遍历即可，这样的做的问题是会破坏原来的单链表的结构，不建议</li><li>方式2：可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式2：</span><br><span class="hljs-comment">//可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(HeroNode head)</span> &#123;<br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<span class="hljs-comment">//空链表，不能打印</span><br>&#125;<br><span class="hljs-comment">//创建要给一个栈，将各个节点压入栈</span><br>Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;HeroNode&gt;();<br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br><span class="hljs-comment">//将链表的所有节点压入栈</span><br><span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>stack.push(cur);<br>cur = cur.next; <span class="hljs-comment">//cur后移，这样就可以压入下一个节点</span><br>&#125;<br><span class="hljs-comment">//将栈中的节点进行打印,pop 出栈</span><br><span class="hljs-keyword">while</span> (stack.size() &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(stack.pop()); <span class="hljs-comment">//stack的特点是先进后出</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(HeroNode list1,HeroNode list2)</span> &#123;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 创建一个新的</span><br>    head.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head;    <span class="hljs-comment">// 现存一下head,后续会用到</span><br>    <span class="hljs-keyword">while</span>(list1 != <span class="hljs-literal">null</span> &amp;&amp; list2 != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(list1.no &lt;= list2.no)&#123;<span class="hljs-comment">//按从小到大的顺序，如果数值相等取list1</span><br>            head.next = list1;<br>            head = list1;<br>            list1 = list1.next;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            head.next = list2;<br>            head = list2;<br>            list2 = list2.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(list1 == <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//如果有链表为空，将另一个剩余的结点完整取过来</span><br>        head.next = list2;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list2 == <span class="hljs-literal">null</span>)&#123;<br>        head.next = list1;<br>    &#125;<br>    <span class="hljs-keyword">return</span> node.next;<br>&#125;<br></code></pre></td></tr></table></figure><p>#全文完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedListDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//进行测试</span><br>        <span class="hljs-comment">//先创建节点</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br><br>        <span class="hljs-comment">//创建要给链表</span><br>        <span class="hljs-type">SingleLinkedList</span> <span class="hljs-variable">singleLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleLinkedList</span>();<br><br><br>        <span class="hljs-comment">//加入</span><br>        singleLinkedList.add(hero1);<br>        singleLinkedList.add(hero4);<br>        singleLinkedList.add(hero2);<br>        singleLinkedList.add(hero3);<br><br>        <span class="hljs-comment">// 测试一下单链表的反转功能</span><br>        System.out.println(<span class="hljs-string">&quot;原来链表的情况~~&quot;</span>);<br>        singleLinkedList.list();<br><br>        <span class="hljs-comment">// 测试merge</span><br>        <span class="hljs-type">SingleLinkedList</span> <span class="hljs-variable">singleLinkedList2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleLinkedList</span>();<br>        <span class="hljs-type">SingleLinkedList</span> <span class="hljs-variable">singleLinkedList3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleLinkedList</span>();<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;林&quot;</span>, <span class="hljs-string">&quot;豹子&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;冲&quot;</span>, <span class="hljs-string">&quot;子头&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-string">&quot;医德&quot;</span>);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">hero8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-string">&quot;子龙&quot;</span>);<br>        singleLinkedList2.add(hero5);<br>        singleLinkedList2.add(hero6);<br><br>        singleLinkedList3.add(hero7);<br>        singleLinkedList3.add(hero8);<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> mergeTwoLists(hero5,hero7);<br>        System.out.println(<span class="hljs-string">&quot;合并后的单链表~~&quot;</span>);<br>        System.out.println(newHead);<br>        System.out.println(newHead.next);<br>        System.out.println(newHead.next.next);<br>        System.out.println(newHead.next.next.next);<br><br><br><span class="hljs-comment">//System.out.println(&quot;反转单链表~~&quot;);</span><br><span class="hljs-comment">//reversetList(singleLinkedList.getHead());</span><br><span class="hljs-comment">//singleLinkedList.list();</span><br><br><span class="hljs-comment">//        System.out.println(&quot;测试逆序打印单链表, 没有改变链表的结构~~&quot;);</span><br><span class="hljs-comment">//        reversePrint(singleLinkedList.getHead());</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">//加入按照编号的顺序</span><br><span class="hljs-comment">singleLinkedList.addByOrder(hero1);</span><br><span class="hljs-comment">singleLinkedList.addByOrder(hero4);</span><br><span class="hljs-comment">singleLinkedList.addByOrder(hero2);</span><br><span class="hljs-comment">singleLinkedList.addByOrder(hero3);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//显示一把</span><br><span class="hljs-comment">singleLinkedList.list();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//测试修改节点的代码</span><br><span class="hljs-comment">HeroNode newHeroNode = new HeroNode(2, &quot;小卢&quot;, &quot;玉麒麟~~&quot;);</span><br><span class="hljs-comment">singleLinkedList.update(newHeroNode);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;修改后的链表情况~~&quot;);</span><br><span class="hljs-comment">singleLinkedList.list();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//删除一个节点</span><br><span class="hljs-comment">singleLinkedList.del(1);</span><br><span class="hljs-comment">singleLinkedList.del(4);</span><br><span class="hljs-comment">System.out.println(&quot;删除后的链表情况~~&quot;);</span><br><span class="hljs-comment">singleLinkedList.list();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//测试一下 求单链表中有效节点的个数</span><br><span class="hljs-comment">System.out.println(&quot;有效的节点个数=&quot; + getLength(singleLinkedList.getHead()));//2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//测试一下看看是否得到了倒数第K个节点</span><br><span class="hljs-comment">HeroNode res = findLastIndexNode(singleLinkedList.getHead(), 3);</span><br><span class="hljs-comment">System.out.println(&quot;res=&quot; + res);</span><br><span class="hljs-comment">*/</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//方式2：</span><br>    <span class="hljs-comment">//可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<span class="hljs-comment">//空链表，不能打印</span><br>        &#125;<br>        <span class="hljs-comment">//创建要给一个栈，将各个节点压入栈</span><br>        Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;HeroNode&gt;();<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-comment">//将链表的所有节点压入栈</span><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>            stack.push(cur);<br>            cur = cur.next; <span class="hljs-comment">//cur后移，这样就可以压入下一个节点</span><br>        &#125;<br>        <span class="hljs-comment">//将栈中的节点进行打印,pop 出栈</span><br>        <span class="hljs-keyword">while</span> (stack.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(stack.pop()); <span class="hljs-comment">//stack的特点是先进后出</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//将单链表反转</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversetList</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>        <span class="hljs-comment">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span> || head.next.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-comment">//定义一个辅助的指针(变量)，帮助我们遍历原来的链表</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// 指向当前节点[cur]的下一个节点</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">reverseHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span><br>        <span class="hljs-comment">//动脑筋</span><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>            next = cur.next;<span class="hljs-comment">//先暂时保存当前节点的下一个节点，因为后面需要使用</span><br>            cur.next = reverseHead.next;<span class="hljs-comment">//将cur的下一个节点指向新的链表的最前端</span><br>            reverseHead.next = cur; <span class="hljs-comment">//将cur 连接到新的链表上</span><br>            cur = next;<span class="hljs-comment">//让cur后移</span><br>        &#125;<br>        <span class="hljs-comment">//将head.next 指向 reverseHead.next , 实现单链表的反转</span><br>        head.next = reverseHead.next;<br>    &#125;<br><br>    <span class="hljs-comment">//查找单链表中的倒数第k个结点 【新浪面试题】</span><br>    <span class="hljs-comment">//思路</span><br>    <span class="hljs-comment">//1. 编写一个方法，接收head节点，同时接收一个index</span><br>    <span class="hljs-comment">//2. index 表示是倒数第index个节点</span><br>    <span class="hljs-comment">//3. 先把链表从头到尾遍历，得到链表的总的长度 getLength</span><br>    <span class="hljs-comment">//4. 得到size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到</span><br>    <span class="hljs-comment">//5. 如果找到了，则返回该节点，否则返回nulll</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title function_">findLastIndexNode</span><span class="hljs-params">(HeroNode head, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断如果链表为空，返回null</span><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没有找到</span><br>        &#125;<br>        <span class="hljs-comment">//第一个遍历得到链表的长度(节点个数)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> getLength(head);<br>        <span class="hljs-comment">//第二次遍历  size-index 位置，就是我们倒数的第K个节点</span><br>        <span class="hljs-comment">//先做一个index的校验</span><br>        <span class="hljs-keyword">if</span>(index &lt;=<span class="hljs-number">0</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义给辅助变量， for 循环定位到倒数的index</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next; <span class="hljs-comment">//3 // 3 - 1 = 2</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt; size - index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur;<br><br>    &#125;<br><br>    <span class="hljs-comment">//方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head 链表的头节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回的就是有效节点的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//空链表</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//定义一个辅助的变量, 这里我们没有统计头节点</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>            length++;<br>            cur = cur.next; <span class="hljs-comment">//遍历</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(HeroNode list1,HeroNode list2)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 创建一个新的</span><br>        head.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head;    <span class="hljs-comment">// 现存一下head,后续会用到</span><br>        <span class="hljs-keyword">while</span>(list1 != <span class="hljs-literal">null</span> &amp;&amp; list2 != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(list1.no &lt;= list2.no)&#123;<span class="hljs-comment">//按从小到大的顺序，如果数值相等取list1</span><br>                head.next = list1;<br>                head = list1;<br>                list1 = list1.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                head.next = list2;<br>                head = list2;<br>                list2 = list2.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list1 == <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//如果有链表为空，将另一个剩余的结点完整取过来</span><br>            head.next = list2;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list2 == <span class="hljs-literal">null</span>)&#123;<br>            head.next = list1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.next;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//定义SingleLinkedList 管理我们的英雄</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedList</span> &#123;<br>    <span class="hljs-comment">//先初始化一个头节点, 头节点不要动, 不存放具体的数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">HeroNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br><br>    <span class="hljs-comment">//返回头节点</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">//添加节点到单向链表</span><br>    <span class="hljs-comment">//思路，当不考虑编号顺序时</span><br>    <span class="hljs-comment">//1. 找到当前链表的最后节点</span><br>    <span class="hljs-comment">//2. 将最后这个节点的next 指向 新的节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br><br>        <span class="hljs-comment">//因为head节点不能动，因此我们需要一个辅助变量 temp</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//遍历链表，找到最后</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//找到链表的最后</span><br>            <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//如果没有找到最后, 将将temp后移</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">//当退出while循环时，temp就指向了链表的最后</span><br>        <span class="hljs-comment">//将最后这个节点的next 指向 新的节点</span><br>        temp.next = heroNode;<br>    &#125;<br><br>    <span class="hljs-comment">//第二种方式在添加英雄时，根据排名将英雄插入到指定位置</span><br>    <span class="hljs-comment">//(如果有这个排名，则添加失败，并给出提示)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br>        <span class="hljs-comment">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span><br>        <span class="hljs-comment">//因为单链表，因为我们找的temp 是位于 添加位置的前一个节点，否则插入不了</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// flag标志添加的编号是否存在，默认为false</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//说明temp已经在链表的最后</span><br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp.next.no &gt; heroNode.no) &#123; <span class="hljs-comment">//位置找到，就在temp的后面插入</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no) &#123;<span class="hljs-comment">//说明希望添加的heroNode的编号已然存在</span><br><br>                flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">//说明编号存在</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next; <span class="hljs-comment">//后移，遍历当前链表</span><br>        &#125;<br>        <span class="hljs-comment">//判断flag 的值</span><br>        <span class="hljs-keyword">if</span>(flag) &#123; <span class="hljs-comment">//不能添加，说明编号存在</span><br>            System.out.printf(<span class="hljs-string">&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\n&quot;</span>, heroNode.no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//插入到链表中, temp的后面</span><br>            heroNode.next = temp.next;<br>            temp.next = heroNode;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//修改节点的信息, 根据no编号来修改，即no编号不能改.</span><br>    <span class="hljs-comment">//说明</span><br>    <span class="hljs-comment">//1. 根据 newHeroNode 的 no 来修改即可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HeroNode newHeroNode)</span> &#123;<br>        <span class="hljs-comment">//判断是否空</span><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空~&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//找到需要修改的节点, 根据no编号</span><br>        <span class="hljs-comment">//定义一个辅助变量</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//表示是否找到该节点</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//已经遍历完链表</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp.no == newHeroNode.no) &#123;<br>                <span class="hljs-comment">//找到</span><br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">//根据flag 判断是否找到要修改的节点</span><br>        <span class="hljs-keyword">if</span>(flag) &#123;<br>            temp.name = newHeroNode.name;<br>            temp.nickname = newHeroNode.nickname;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//没有找到</span><br>            System.out.printf(<span class="hljs-string">&quot;没有找到 编号 %d 的节点，不能修改\n&quot;</span>, newHeroNode.no);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除节点</span><br>    <span class="hljs-comment">//思路</span><br>    <span class="hljs-comment">//1. head 不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点</span><br>    <span class="hljs-comment">//2. 说明我们在比较时，是temp.next.no 和  需要删除的节点的no比较</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标志是否找到待删除节点的</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//已经到链表的最后</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp.next.no == no) &#123;<br>                <span class="hljs-comment">//找到的待删除节点的前一个节点temp</span><br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next; <span class="hljs-comment">//temp后移，遍历</span><br>        &#125;<br>        <span class="hljs-comment">//判断flag</span><br>        <span class="hljs-keyword">if</span>(flag) &#123; <span class="hljs-comment">//找到</span><br>            <span class="hljs-comment">//可以删除</span><br>            temp.next = temp.next.next;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;要删除的 %d 节点不存在\n&quot;</span>, no);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//显示链表[遍历]</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//判断链表是否为空</span><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//判断是否到链表最后</span><br>            <span class="hljs-keyword">if</span>(temp == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//输出节点的信息</span><br>            System.out.println(temp);<br>            <span class="hljs-comment">//将temp后移， 一定小心</span><br>            temp = temp.next;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义HeroNode ， 每个HeroNode 对象就是一个节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String nickname;<br>    <span class="hljs-keyword">public</span> HeroNode next; <span class="hljs-comment">//指向下一个节点</span><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name, String nickname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.nickname = nickname;<br>    &#125;<br>    <span class="hljs-comment">//为了显示方法，我们重新toString</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, nickname=&quot;</span> + nickname + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2019/06/04/%E9%98%9F%E5%88%97/"/>
    <url>/2019/06/04/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是一个有序列表，可以用数组或是链表来实现。<br>遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出</p><h2 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h2><ul><li>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队列的最大容量</li><li>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量front及rear分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear则是随着数据输入而改变。<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281405184.png"></li></ul><p>当我们将数据存入队列时称为”addQueue”，addQueue 的处理需要有两个步骤：思路分析 </p><ul><li>将尾指针往后移：rear+1 , 当front &#x3D;&#x3D; rear 【空】</li><li>若尾指针 rear 小于队列的最大下标maxSize-1，则将数据存入rear所指的数组元素中，否则无法存入数据。 rear  &#x3D;&#x3D; maxSize - 1[队列满]</li><li>rear 是队列最后[含] ；front 是队列最前元素[不含]</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用数组模拟队列-编写一个ArrayQueue类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize; <span class="hljs-comment">// 表示数组的最大容量</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front; <span class="hljs-comment">// 队列头</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear; <span class="hljs-comment">// 队列尾</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr; <span class="hljs-comment">// 该数据用于存放数据, 模拟队列</span><br><br><span class="hljs-comment">// 创建队列的构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span> &#123;<br>maxSize = arrMaxSize;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>front = -<span class="hljs-number">1</span>; <span class="hljs-comment">// 指向队列头部，分析出front是指向队列头的前一个位置.</span><br>rear = -<span class="hljs-number">1</span>; <span class="hljs-comment">// 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)</span><br>&#125;<br><br><span class="hljs-comment">// 判断队列是否满</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> rear == maxSize - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> rear == front;<br>&#125;<br><br><span class="hljs-comment">// 添加数据到队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-comment">// 判断队列是否满</span><br><span class="hljs-keyword">if</span> (isFull()) &#123;<br>System.out.println(<span class="hljs-string">&quot;队列满，不能加入数据~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>rear++; <span class="hljs-comment">// 让rear 后移</span><br>arr[rear] = n;<br>&#125;<br><br><span class="hljs-comment">// 获取队列的数据, 出队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 判断队列是否空</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br><span class="hljs-comment">// 通过抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能取数据&quot;</span>);<br>&#125;<br>front++; <span class="hljs-comment">// front后移</span><br><span class="hljs-keyword">return</span> arr[front];<br><br>&#125;<br><br><span class="hljs-comment">// 显示队列的所有数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>System.out.println(<span class="hljs-string">&quot;队列空的，没有数据~~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.printf(<span class="hljs-string">&quot;arr[%d]=%d\n&quot;</span>, i, arr[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 显示队列的头数据， 注意不是取出数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">headQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 判断</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空的，没有数据~~&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> arr[front + <span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是会有一个问题，出队后，前面数组的空间就会空缺出来导致队列已经满了，所以这时需要改造成一个环形队列</p><h1 id="使用数组模拟环形队列的思路分析"><a href="#使用数组模拟环形队列的思路分析" class="headerlink" title="使用数组模拟环形队列的思路分析"></a>使用数组模拟环形队列的思路分析</h1><p>思路如下:</p><ol><li>front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素 ，front 的初始值 &#x3D; 0</li><li>rear 变量的含义做一个调整：rear指向队列的最后一个元素的后一个位置.因为希望空出一个空间做为约定.rear 的初始值 &#x3D; 0</li><li>当队列满时，条件是  (rear  + 1) % maxSize &#x3D;&#x3D; front 【满】</li><li>对队列为空的条件， rear &#x3D;&#x3D; front 空</li><li>当我们这样分析， 队列中有效的数据的个数   (rear + maxSize - front) % maxSize   &#x2F;&#x2F; rear &#x3D; 1 front &#x3D; 0 </li><li>我们就可以在原来的队列上修改得到，一个环形队列<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 循环队列</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleArray</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize; <span class="hljs-comment">// 表示数组的最大容量</span><br><span class="hljs-comment">//front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素 </span><br><span class="hljs-comment">//front 的初始值 = 0</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front; <br><span class="hljs-comment">//rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.</span><br><span class="hljs-comment">//rear 的初始值 = 0</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear; <span class="hljs-comment">// 队列尾</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr; <span class="hljs-comment">// 该数据用于存放数据, 模拟队列</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CircleArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span> &#123;<br>maxSize = arrMaxSize;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否满</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> (rear  + <span class="hljs-number">1</span>) % maxSize == front;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> rear == front;<br>&#125;<br><br><span class="hljs-comment">// 添加数据到队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-comment">// 判断队列是否满</span><br><span class="hljs-keyword">if</span> (isFull()) &#123;<br>System.out.println(<span class="hljs-string">&quot;队列满，不能加入数据~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//直接将数据加入</span><br>arr[rear] = n;<br><span class="hljs-comment">//将 rear 后移, 这里必须考虑取模</span><br>rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>&#125;<br><br><span class="hljs-comment">// 获取队列的数据, 出队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 判断队列是否空</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br><span class="hljs-comment">// 通过抛出异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能取数据&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 这里需要分析出 front是指向队列的第一个元素</span><br><span class="hljs-comment">// 1. 先把 front 对应的值保留到一个临时变量</span><br><span class="hljs-comment">// 2. 将 front 后移, 考虑取模</span><br><span class="hljs-comment">// 3. 将临时保存的变量返回</span><br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> arr[front];<br>front = (front + <span class="hljs-number">1</span>) % maxSize;<br><span class="hljs-keyword">return</span> value;<br><br>&#125;<br><br><span class="hljs-comment">// 显示队列的所有数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>System.out.println(<span class="hljs-string">&quot;队列空的，没有数据~~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 思路：从front开始遍历，遍历多少个元素</span><br><span class="hljs-comment">// 动脑筋</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> front; i &lt; front + size() ; i++) &#123;<br>System.out.printf(<span class="hljs-string">&quot;arr[%d]=%d\n&quot;</span>, i % maxSize, arr[i % maxSize]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 求出当前队列有效数据的个数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// rear = 2</span><br><span class="hljs-comment">// front = 1</span><br><span class="hljs-comment">// maxSize = 3 </span><br><span class="hljs-keyword">return</span> (rear + maxSize - front) % maxSize;   <br>&#125;<br><br><span class="hljs-comment">// 显示队列的头数据， 注意不是取出数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">headQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 判断</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空的，没有数据~~&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> arr[front];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试方法</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleArrayQueueDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//测试一把</span><br>System.out.println(<span class="hljs-string">&quot;测试数组模拟环形队列的案例~~~&quot;</span>);<br><br><span class="hljs-comment">// 创建一个环形队列</span><br><span class="hljs-type">CircleArray</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleArray</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">//说明设置4, 其队列的有效数据最大是3</span><br><span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 接收用户输入</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 输出一个菜单</span><br><span class="hljs-keyword">while</span> (loop) &#123;<br>System.out.println(<span class="hljs-string">&quot;s(show): 显示队列&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;e(exit): 退出程序&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;a(add): 添加数据到队列&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;g(get): 从队列取出数据&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;h(head): 查看队列头的数据&quot;</span>);<br>key = scanner.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">// 接收一个字符</span><br><span class="hljs-keyword">switch</span> (key) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>queue.showQueue();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>System.out.println(<span class="hljs-string">&quot;输出一个数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>queue.addQueue(value);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>: <span class="hljs-comment">// 取出数据</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> queue.getQueue();<br>System.out.printf(<span class="hljs-string">&quot;取出的数据是%d\n&quot;</span>, res);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>System.out.println(e.getMessage());<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>: <span class="hljs-comment">// 查看队列头的数据</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> queue.headQueue();<br>System.out.printf(<span class="hljs-string">&quot;队列头的数据是%d\n&quot;</span>, res);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>System.out.println(e.getMessage());<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-comment">// 退出</span><br>scanner.close();<br>loop = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;程序退出~~&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>稀疏数组</title>
    <link href="/2019/06/03/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2019/06/03/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h1><p>稀疏数组就是数组中，大部分的元素值都未被使用（或都为0），在数组中仅有少 部分的空间使用。因此造成内存空间的浪费，为了解决这问题，并且不影响数组中原 有的元素值，我们采用了一种压缩的方式来 表示稀疏数组的内容。<br>如图二维数组所示，有大部分的空间是无用的。<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281521656.png"><br>在这里可以使用稀疏数组进行压缩。其中在稀疏数组中第一部分所记录的是原数组的列数和行数以及元素使用的个数、第二部分所记录的是原数组中元素的位置和内容。经过压缩之后，原来需要声明大小为63的数组，而使用压缩后，只需要声明大小为6*3的数组，仅需18个存储空间。<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281521190.png"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="将二维数组变成稀疏数组"><a href="#将二维数组变成稀疏数组" class="headerlink" title="将二维数组变成稀疏数组"></a>将二维数组变成稀疏数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SparseArray</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个原始的二维数组</span><br>        <span class="hljs-type">int</span> arr[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[row][col];<br>        arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>        arr[<span class="hljs-number">3</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        arr[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">4</span>;<br>        arr[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">7</span>;<br>        arr[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">5</span>;<br>        System.out.println(<span class="hljs-string">&quot;输入原始二维数组-----------------&quot;</span>);<br>        prt(arr);<br>        System.out.println(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 将二维数组变成稀疏数组</span><br>        <span class="hljs-comment">// 遍历得到非零数据个数</span><br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[i][j]!=<span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 创建对应稀疏数组</span><br>        <span class="hljs-type">int</span> sparse[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        <span class="hljs-comment">// 给稀疏数组赋值</span><br>        sparse[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = arr.length;<br>        sparse[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = arr[<span class="hljs-number">0</span>].length;<br>        sparse[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br><br>        <span class="hljs-comment">// 遍历二维数组。将非零值存放到稀疏数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; <span class="hljs-comment">// 用于记录第几个非零</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[i][j]!=<span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    sparse[count][<span class="hljs-number">0</span>] = i;<br>                    sparse[count][<span class="hljs-number">1</span>] = j;<br>                    sparse[count][<span class="hljs-number">2</span>] = arr[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 输出稀疏数组</span><br>        System.out.println(<span class="hljs-string">&quot;输出稀疏数组&quot;</span>);<br>        prt(sparse);<br><br>        <span class="hljs-comment">// 将稀疏数组还原成二维数组</span><br>        <span class="hljs-type">int</span> arr2[][] =<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparse[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparse[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;sparse.length ; i++) &#123;<br>            arr2[sparse[i][<span class="hljs-number">0</span>]][sparse[i][<span class="hljs-number">1</span>]] = sparse[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;输出还原的二维数组&quot;</span>);<br>        prt(arr2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prt</span><span class="hljs-params">(<span class="hljs-type">int</span> [][] arr )</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>                System.out.print(arr[i][j]+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题0206_reverse-linked-list</title>
    <link href="/2019/06/02/LeetCode%E5%88%B7%E9%A2%980206-reverse-linked-list/"/>
    <url>/2019/06/02/LeetCode%E5%88%B7%E9%A2%980206-reverse-linked-list/</url>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>Reverse a singly linked list.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL<br><span class="hljs-attribute">Output</span>: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL<br></code></pre></td></tr></table></figure><h1 id="方法一-迭代"><a href="#方法一-迭代" class="headerlink" title="方法一:迭代"></a>方法一:迭代</h1><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281528492.png"></p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度：O(n)，假设 n 是列表的长度，那么时间复杂度为 O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val; // 数据域</span><br><span class="hljs-comment"> *     ListNode *next;  //指针域</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125; //构造函数</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    ListNode *new_head = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//指向新链表头结点的指针</span><br>    <span class="hljs-keyword">while</span> (head)&#123;<br>      ListNode *next = head-&gt;next;<span class="hljs-comment">// 备份head-&gt;next</span><br>      head-&gt;next = new_head;<span class="hljs-comment">//更新head-&gt;next</span><br>      new_head = head;<span class="hljs-comment">// 移动new_head</span><br>      head=next; <span class="hljs-comment">// 遍历链表</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> new_head;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>在遍历列表时，将当前节点的 next 指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span>head;<br>        <span class="hljs-keyword">while</span> (curr!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">nextTemp</span> <span class="hljs-operator">=</span> curr.next;<br>            curr.next = prev;<br>            prev=curr;<br>            curr=nextTemp;  <span class="hljs-comment">// 遍历链表</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>leetcode</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java注解</title>
    <link href="/2019/06/01/java%E6%B3%A8%E8%A7%A3/"/>
    <url>/2019/06/01/java%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="系统自带的注解"><a href="#系统自带的注解" class="headerlink" title="系统自带的注解"></a>系统自带的注解</h1><ul><li>@Override   </li><li>@Deprecated   申明该方法已经被废弃</li><li>@SuppressWarnings(“deprecation”) 我想强制使用这个被废弃的方法</li></ul><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>　元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：</p><ul><li>@Target</li><li>@Retention</li><li>@Documented</li><li>@Inherited</li></ul><h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><blockquote><p>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p></blockquote><p>取值(ElementType)有：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">1.CONSTRUCTOR:用于描述构造器</span><br><span class="hljs-section">2.FIELD:用于描述域</span><br><span class="hljs-section">3.LOCAL_VARIABLE:用于描述局部变量</span><br><span class="hljs-section">4.METHOD:用于描述方法</span><br><span class="hljs-section">5.PACKAGE:用于描述包</span><br><span class="hljs-section">6.PARAMETER:用于描述参数</span><br><span class="hljs-section">7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</span><br></code></pre></td></tr></table></figure><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><blockquote><p>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>.<span class="hljs-keyword">SOURCE</span>:在源文件中有效（即源文件保留）<br><span class="hljs-number">2</span>.<span class="hljs-keyword">CLASS</span>:在<span class="hljs-keyword">class</span>文件中有效（即<span class="hljs-keyword">class</span>保留）<br><span class="hljs-number">3</span>.<span class="hljs-keyword">RUNTIME</span>:在运行时有效（即运行时保留）<br></code></pre></td></tr></table></figure><h2 id="Inherited："><a href="#Inherited：" class="headerlink" title="@Inherited："></a>@Inherited：</h2><blockquote><p>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p></blockquote><p>　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。</p><h2 id="Documented"><a href="#Documented" class="headerlink" title="@Documented:"></a>@Documented:</h2><blockquote><p>@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p></blockquote><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>1：使用@interface关键字定义注解<br><br>2：成员方法以无参无异常的方式声明<br><br>3：可以使用default为成员方法指定一个默认值<br><br>4：成员的类型是有限制的，合法的成员类型包括原始类型&#x2F;String&#x2F;Class&#x2F;Annotation&#x2F;Enumeration<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Description &#123;<br>    <span class="hljs-comment">// 如果注解只有一个成员，成员名必须取名为value</span><br>    String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span>; <span class="hljs-comment">//成员使用无参数，无异常声明，类型是受限的.包括原始类型，String ,Class,Annotation,Enumeration</span><br>    String <span class="hljs-title function_">author</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">18</span>;<span class="hljs-comment">// 可以自带默认值</span><br>&#125;<br><br><span class="hljs-comment">// 注解可以没有成员，叫做标识注解</span><br></code></pre></td></tr></table></figure><p>　</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux学习</title>
    <link href="/2019/06/01/linux%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/06/01/linux%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>记录一些我曾经遇到过的问题————–勿看</p><h1 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>ps -aux | grep java   检查java进程是否存在<br><br></code></pre></td></tr></table></figure><h3 id="ubuntu-的软件安装"><a href="#ubuntu-的软件安装" class="headerlink" title="ubuntu 的软件安装"></a>ubuntu 的软件安装</h3><ul><li><p>1 deb 包的安装方式<br>deb 是 debian 系 Linux 的包管理方式, ubuntu 是属于 debian 系的 Linux 发行版,所<br>以默认支持这种软件安装方式,当下载到一个 deb 格式的软件后,在终端输入这<br>个命令就能安装:<br>sudo dpkg -i *.deb</p></li><li><p>2编译安装方式<br>(小贴士:使用编译安装前,需要先建立编译环境,使用以下命令建立基本的编译环境:<br>sudo apt-get install build-essential)<br>在 linux 的世界,有很多软件只提供了源代码给你,需要你自己进行编译安装,一般开源<br>的软件都会使用 tar.gz 压缩档来进行发布,当然也有其他的形式。拿到源代码的压缩文档<br>把它解压到&#x2F;tmp 目录下,进入&#x2F;tmp&#x2F;软件目录,然后执行以下三个命令:<br>1 .&#x2F;configure<br>2 make<br>3 sudo make install<br>在第一步 .&#x2F;configure 时可能会提示说有某某软件找不到,例如提示“ libgnome”这个开<br>发包找不到,那就把 libgnome 这个关键词 copy,然后打开新立得软件管理器,在里面<br>搜索 libgnome 这个关键词,就会找到 libgnome 相关的项目,把前面有个 ubuntu 符号<br>的 libgnome 包(注意:同样需要安装 dev 包,但可以不装 doc 包)全部安装,通过这个方<br>法把.&#x2F;configure 过程中缺失的开发包都全部装上就 OK 了,第一步能顺利通过,第二 ,三<br>步基本问题不大。<br>以上就是一般初学 ubuntu 的朋友必须掌握的编译安装的基本方法!</p></li><li><p>3。 apt-get 安装方法<br>ubuntu 世界有许多软件源,在系统安装篇已经介绍过如何添加源, apt-get 的基本软件<br>安装命令是:<br>sudo apt-get install 软件名</p></li><li><p>4。新立得软件包管理<br>打开:系统–系统管理–新立得软件包管理,这个工具其实跟 apt 一样,可以搜索,下<br>载,安装 ubuntu 源里的软件,具体安装方式很简单,看着界面应该会懂,就不详细介绍<br>了</p><blockquote><p>在使用 dpkg -i 安装deb包后，会出现依赖关系而不能正常安装软件，这个时候先更新下源然后解决依赖关系后重装即可。</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo apt-<span class="hljs-keyword">get</span> update <span class="hljs-comment"># 检查是否有更新</span><br>sudo apt-<span class="hljs-keyword">get</span> upgrate <span class="hljs-comment"># 更新</span><br>sudo apt-<span class="hljs-keyword">get</span> -f install <span class="hljs-comment"># 解决依赖关系</span><br>sudo dpkg -i xxx.deb <span class="hljs-comment"># 重新安装</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="安装搜狗"><a href="#安装搜狗" class="headerlink" title="安装搜狗"></a>安装搜狗</h4><p><a href="http://blog.csdn.net/qq_21792169/article/details/53152700">http://blog.csdn.net/qq_21792169/article/details/53152700</a></p><h4 id="配置用户变量"><a href="#配置用户变量" class="headerlink" title="配置用户变量"></a>配置用户变量</h4><ul><li><a href="http://blog.csdn.net/qiao1245/article/details/44650929">http://blog.csdn.net/qiao1245/article/details/44650929</a></li><li><a href="https://www.cnblogs.com/imayi/p/6082122.html">https://www.cnblogs.com/imayi/p/6082122.html</a></li><li><a href="https://blog.csdn.net/white_idiot/article/details/78253004">https://blog.csdn.net/white_idiot/article/details/78253004</a></li><li><a href="https://blog.csdn.net/gaoanchen/article/details/77692451">https://blog.csdn.net/gaoanchen/article/details/77692451</a></li></ul><h4 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h4><p><a href="https://zhuanlan.zhihu.com/p/36200924">https://zhuanlan.zhihu.com/p/36200924</a></p><h4 id="查看分区信息："><a href="#查看分区信息：" class="headerlink" title="查看分区信息："></a>查看分区信息：</h4><p>sudo fdisk -l</p><h4 id="Ubuntu-Linux-开机自动挂载磁盘"><a href="#Ubuntu-Linux-开机自动挂载磁盘" class="headerlink" title="Ubuntu(Linux)开机自动挂载磁盘"></a>Ubuntu(Linux)开机自动挂载磁盘</h4><p><a href="https://jingyan.baidu.com/article/63acb44a27686961fcc17ec9.html">https://jingyan.baidu.com/article/63acb44a27686961fcc17ec9.html</a></p><ul><li>sudo gedit &#x2F;etc&#x2F;fstab</li></ul><h4 id="Ubuntu如何添加删除PPA"><a href="#Ubuntu如何添加删除PPA" class="headerlink" title="Ubuntu如何添加删除PPA"></a>Ubuntu如何添加删除PPA</h4><ul><li><p><a href="https://blog.csdn.net/li_hai/article/details/8189290">https://blog.csdn.net/li_hai/article/details/8189290</a></p></li><li><p>删除一个PPA源</p><ul><li><p>1,到 源的 目 录:cd  &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;</p></li><li><p>2,可以看 到 关 于 源的 文件,删除即可 .</p></li><li></li></ul></li></ul><h4 id="显示网速"><a href="#显示网速" class="headerlink" title="显示网速"></a>显示网速</h4><ul><li><a href="https://github.com/fossfreedom/indicator-sysmonitor">https://github.com/fossfreedom/indicator-sysmonitor</a></li></ul><h3 id="错误：error-while-loading-shared-libraries-libcurl-so-4-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#错误：error-while-loading-shared-libraries-libcurl-so-4-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="错误：error while loading shared libraries: libcurl.so.4: cannot open shared object file: No such file or directory"></a>错误：error while loading shared libraries: libcurl.so.4: cannot open shared object file: No such file or directory</h3><ul><li>sudo apt-get install curl libcurl3</li></ul><h1 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h1><h2 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h2><p>ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</p><p>查看时间 date</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>deepin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac使用</title>
    <link href="/2019/06/01/mac%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/06/01/mac%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>此不为技术文，作为本人记录使用。。。。</p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><blockquote><p>.bash_profile</p></blockquote><p>在.zshrc最后一行加上 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># nvm </span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">NVM_DIR</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.nvm&quot;</span><br>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; . <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> # This loads nvm<br><span class="hljs-comment"># deno</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=/Users/shoukailiang/.deno/bin:$PATH<br><br><span class="hljs-comment"># vscode</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin:<span class="hljs-variable">$PATH</span><br><br></code></pre></td></tr></table></figure><h1 id="苹果下挂载efi-分区"><a href="#苹果下挂载efi-分区" class="headerlink" title="苹果下挂载efi 分区"></a>苹果下挂载efi 分区</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mkdir <span class="hljs-regexp">/Volumes/</span>EFI<br>sudo mount_msdos <span class="hljs-regexp">/dev/</span>disk0s1 <span class="hljs-regexp">/Volumes/</span>EFI<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题0001_two-sum</title>
    <link href="/2019/06/01/LeetCode%E5%88%B7%E9%A2%980001-two-sum/"/>
    <url>/2019/06/01/LeetCode%E5%88%B7%E9%A2%980001-two-sum/</url>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">Given</span> nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>,<br><br><span class="hljs-symbol">Because</span> nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> + <span class="hljs-number">7</span> = <span class="hljs-number">9</span>,<br>return [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>].<br></code></pre></td></tr></table></figure><h1 id="方法一：暴力破解法"><a href="#方法一：暴力破解法" class="headerlink" title="方法一：暴力破解法"></a>方法一：暴力破解法</h1><p>暴力法很简单，遍历每个元素 xx，并查找是否存在一个值与 target−x 相等的目标元素。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h2 id="代码实现java"><a href="#代码实现java" class="headerlink" title="代码实现java"></a>代码实现java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; nums.length; i ++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; nums.length ; j ++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i] + nums[j] == target)&#123;<br>          <span class="hljs-type">int</span>[] res = &#123;i, j&#125;;<br>          <span class="hljs-keyword">return</span> res;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;the input has no solution&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h1><p>使用HashMap,基本思路是：用数组的值作为key，index作为value。对数组进行迭代的时候，将元素插入到hashMap中的，这时我们回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 nn 个元素。</li></ul><h2 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span>target-nums[i];<br>            <span class="hljs-keyword">if</span>(map.containsKey(temp))&#123;  <span class="hljs-comment">// 返回布尔</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> []&#123;map.get(temp),i&#125;;<br>            &#125;<br>            map.put(nums[i],i);   <span class="hljs-comment">// key value</span><br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;the input has no solution&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript数据结构与算法-链表</title>
    <link href="/2018/11/20/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/"/>
    <url>/2018/11/20/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。</p><h1 id="方法和属性"><a href="#方法和属性" class="headerlink" title="方法和属性"></a>方法和属性</h1><ul><li>count属性 数量</li><li>head属性  指向head对象</li><li>push(element)</li><li>getElementAt(index) 根据索引获取,返回node对象</li><li>insert(element, index) 向链表中插入对象</li><li>removeAt(index) 根据索引移除</li><li>remove(element)</li><li>indexOf(element) 作用类似于数组的indexOf 返回索引</li><li>isEmpty() 判断是否为空</li><li>size() 长度</li><li>getHead() 获得链表头</li><li>clear()  清空链表</li><li>toString() 由于链表中使用了Node 类，就需要重写继承自javascript对象默认的toString方法</li></ul><h1 id="代码实现链表"><a href="#代码实现链表" class="headerlink" title="代码实现链表"></a>代码实现链表</h1><p>先创建一个Node 类，即为辅助类，构建出这样的一个对象,他包含一个element属性，即要添加到列表的值，以及一个next属性，即指向下一个节点的指针</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">element, next</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = element;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">next</span> = next;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>辅助方法,用来判断两个值是否相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defaultEquals</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a === b;<br>&#125;<br></code></pre></td></tr></table></figure><p>LinkedList类,链表的关键就是他不像是数组一样，可以直接拿到当前索引的值，他必须从head开始找，不停的找next。</p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>push的时候，判断是否是第一个，或是，将头变成当前插入的node,若不是，循环找到最后一项，将他的next执行当前插入的node，循环的时候，若找到有个node的next为空，即把这个node的next指向当前这个node</p><h4 id="getElementAt"><a href="#getElementAt" class="headerlink" title="getElementAt"></a>getElementAt</h4><p>根据索引返回node对象,注意循环的终止条件</p><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>插入，也要判断是否是第一个</p><h4 id="removeAt"><a href="#removeAt" class="headerlink" title="removeAt"></a>removeAt</h4><p>若是第一个，把头改成下一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">equalsFn = defaultEquals</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">equalsFn</span> = equalsFn;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-literal">undefined</span>;<br>&#125;<br><span class="hljs-title function_">push</span>(<span class="hljs-params">element</span>) &#123;<br><span class="hljs-keyword">const</span> node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(element);<br><span class="hljs-keyword">let</span> current;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = node;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br><span class="hljs-keyword">while</span> (current.<span class="hljs-property">next</span> != <span class="hljs-literal">null</span>) &#123;<br>current = current.<span class="hljs-property">next</span>;<br>&#125;<br>current.<span class="hljs-property">next</span> = node;<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;<br>&#125;<br><span class="hljs-title function_">getElementAt</span>(<span class="hljs-params">index</span>) &#123;<br><span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>) &#123;<br><span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; index &amp;&amp; node != <span class="hljs-literal">null</span>; i++) &#123;<br>node = node.<span class="hljs-property">next</span>;<br>&#125;<br><span class="hljs-keyword">return</span> node;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br><span class="hljs-title function_">insert</span>(<span class="hljs-params">element, index</span>) &#123;<br><span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>) &#123;<br><span class="hljs-keyword">const</span> node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(element);<br><span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">const</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br>node.<span class="hljs-property">next</span> = current;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = node;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">const</span> previous = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getElementAt</span>(index - <span class="hljs-number">1</span>);<br>node.<span class="hljs-property">next</span> = previous.<span class="hljs-property">next</span>;<br>previous.<span class="hljs-property">next</span> = node;<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-title function_">removeAt</span>(<span class="hljs-params">index</span>) &#123;<br><span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>) &#123;<br><span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br><span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = current.<span class="hljs-property">next</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">const</span> previous = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getElementAt</span>(index - <span class="hljs-number">1</span>);<br>current = previous.<span class="hljs-property">next</span>;<br>previous.<span class="hljs-property">next</span> = current.<span class="hljs-property">next</span>;<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>--;<br><span class="hljs-keyword">return</span> current.<span class="hljs-property">element</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br><span class="hljs-title function_">remove</span>(<span class="hljs-params">element</span>) &#123;<br><span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">indexOf</span>(element);<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">removeAt</span>(index);<br>&#125;<br><span class="hljs-title function_">indexOf</span>(<span class="hljs-params">element</span>) &#123;<br><span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">size</span>() &amp;&amp; current != <span class="hljs-literal">null</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">equalsFn</span>(element, current.<span class="hljs-property">element</span>)) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>current = current.<span class="hljs-property">next</span>;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">size</span>() === <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>;<br>&#125;<br><span class="hljs-title function_">getHead</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br>&#125;<br><span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">let</span> objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.head.element&#125;</span>`</span>;<br><span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">size</span>() &amp;&amp; current != <span class="hljs-literal">null</span>; i++) &#123;<br>objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;objString&#125;</span>,<span class="hljs-subst">$&#123;current.element&#125;</span>`</span>;<br>current = current.<span class="hljs-property">next</span>;<br>&#125;<br><span class="hljs-keyword">return</span> objString;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript数据结构与算法-队列</title>
    <link href="/2018/11/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%98%9F%E5%88%97/"/>
    <url>/2018/11/16/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。<br>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。</p><h1 id="方法和属性"><a href="#方法和属性" class="headerlink" title="方法和属性"></a>方法和属性</h1><ul><li>push方法 入队</li><li>shift方法  删除队头的元素</li><li>peek方法 查看当前队头的元素</li><li>isEmpty方法 查看队列是否为空</li><li>length属性 队列的元素个数</li><li>list属性  存储队列</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>这里依然用js的数组模拟队列，毕竟高级语言（落泪），数组的shift时删除数组的第一个元素,这里list还是公用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>=[];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 入队 */</span><br><span class="hljs-title function_">enquequ</span>(<span class="hljs-params">value</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>++;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(value);<br>&#125;<br><br><span class="hljs-comment">/* 出队 */</span><br><span class="hljs-title function_">dequeue</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">shift</span>();<br>&#125;<br><span class="hljs-comment">/* 查看队头 */</span><br><span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">0</span>];<br>  &#125;<br><span class="hljs-comment">/* 查看队头 */</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> ===<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><p>简单来说，比方说我是会员，我就要排在你的前面，hhhhhh</p><p>实现一个优先队列，有两种选项：设置优先级，然后在正确位置添加元素；或者用入列操作添加元素，然后按照优先级移除他们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">PriorityQueue</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">let</span> items = [];<br><span class="hljs-comment">// 辅助类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">QueueElement</span>(<span class="hljs-params">element,priority</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = element;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">priority</span> = priority;<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">enquequ</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">element,priority</span>)&#123;<br>    <span class="hljs-keyword">let</span> queueElement = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueueElement</span>(element,priority);<br>    <span class="hljs-keyword">let</span> added =<span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 比较优先级</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; items.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">// 如果说我的优先级比较大</span><br>        <span class="hljs-keyword">if</span>(queueElement.<span class="hljs-property">priority</span>&gt;items[i].<span class="hljs-property">priority</span>)&#123;<br>            <span class="hljs-comment">// 数组切割，实现添加操作</span><br>            items.<span class="hljs-title function_">splice</span>(i,<span class="hljs-number">0</span>,queueElement);<br>            added=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果没有插入就是说我的优先级都比他们小，就放到队尾</span><br>    <span class="hljs-keyword">if</span>(!added)&#123;<br>        items.<span class="hljs-title function_">push</span>(queueElement);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 打印</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">print</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; items.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;items[i].element&#125;</span>- <span class="hljs-subst">$&#123;items[i].priority&#125;</span>`</span>);<br>    &#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>();<br>priorityQueue.<span class="hljs-title function_">enquequ</span>(<span class="hljs-string">&quot;skl&quot;</span>,<span class="hljs-number">2</span>);<br>priorityQueue.<span class="hljs-title function_">enquequ</span>(<span class="hljs-string">&quot;skl2&quot;</span>,<span class="hljs-number">1</span>);<br>priorityQueue.<span class="hljs-title function_">enquequ</span>(<span class="hljs-string">&quot;skl3&quot;</span>,<span class="hljs-number">3</span>);<br>priorityQueue.<span class="hljs-title function_">print</span>();<br></code></pre></td></tr></table></figure><p>如果队列为空，就直接插入，如果不为空，就进行优先级比较操作。中间使用了一个辅助类，用来创建名字和优先级的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">element</span>:<span class="hljs-string">&#x27;skl&#x27;</span>,<br>  <span class="hljs-attr">priority</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实现击鼓传花"><a href="#实现击鼓传花" class="headerlink" title="实现击鼓传花"></a>实现击鼓传花</h1><p>不懂得网上百度一下啥事击鼓传花</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hotPotato</span>(<span class="hljs-params">nameList,num</span>)&#123;<br><span class="hljs-keyword">let</span> queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>();<br><span class="hljs-comment">// 先入队</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nameList.<span class="hljs-property">length</span>; i++) &#123;<br>    queue.<span class="hljs-title function_">enquequ</span>(nameList[i]);<br>&#125;<br><span class="hljs-comment">// 被淘汰者</span><br><span class="hljs-keyword">let</span> eliminated=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span>(queue.<span class="hljs-property">length</span>&gt;<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-comment">// 出队后入队，就是从队头到队尾去</span><br>        queue.<span class="hljs-title function_">enquequ</span>(queue.<span class="hljs-title function_">dequeue</span>());<br>    &#125;<br>    <span class="hljs-comment">// 等于num的那个被淘汰</span><br>    eliminated=queue.<span class="hljs-title function_">dequeue</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(eliminated+<span class="hljs-string">&quot;在击鼓传花中淘汰&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 循环结束后只有一个人的时候他就是获胜者了</span><br><span class="hljs-keyword">return</span> queue.<span class="hljs-title function_">dequeue</span>();<br>&#125;<br><span class="hljs-keyword">let</span> names = [<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-string">&quot;Camilia&quot;</span>,<span class="hljs-string">&quot;Ingrid&quot;</span>,<span class="hljs-string">&quot;Carl&quot;</span>];<br><span class="hljs-keyword">let</span> winner = <span class="hljs-title function_">hotPotato</span>(names,<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获胜者是&quot;</span>+winner);<br></code></pre></td></tr></table></figure><p>输出过程</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">John在击鼓传花中淘汰</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Jack在击鼓传花中淘汰</span><br><span class="hljs-keyword"></span>Camilia在击鼓传花中淘汰<br>Ingrid在击鼓传花中淘汰<br>获胜者是Carl<br></code></pre></td></tr></table></figure><p>下图模拟了这个过程<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281527257.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript数据结构与算法-栈</title>
    <link href="/2018/11/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%88/"/>
    <url>/2018/11/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。<br>栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</p><h1 id="方法和属性"><a href="#方法和属性" class="headerlink" title="方法和属性"></a>方法和属性</h1><ul><li>push方法 入栈</li><li>pop方法  删除栈顶的元素</li><li>peek方法 查看当前栈顶的元素</li><li>isEmpty方法</li><li>size方法</li><li>toString方法 打印出所有元素</li><li>length属性 栈的元素个数</li><li>list属性  存储栈<br>下面是出栈和入栈的示意图，照片来自网络<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281527078.png"></li></ul><h1 id="代码实现栈"><a href="#代码实现栈" class="headerlink" title="代码实现栈"></a>代码实现栈</h1><p>这里我们用js数组来模拟栈，应为js是一门强大的高级语言，数组的push和pop方法在栈中也同样适用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>++;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(value);<br>  &#125;<br>  <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">pop</span>();<br>  &#125;<br>  <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>;   <br>  &#125;<br>  <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;<br>  &#125;<br>  <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br>  &#125;<br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.list[<span class="hljs-number">0</span>]&#125;</span>`</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;objString&#125;</span>,<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.list[i]&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> objString;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="或者用对象来实现栈，但是没有数组原生的那些函数了"><a href="#或者用对象来实现栈，但是没有数组原生的那些函数了" class="headerlink" title="或者用对象来实现栈，但是没有数组原生的那些函数了"></a>或者用对象来实现栈，但是没有数组原生的那些函数了</h1><p>入栈的时候，索引会变成对象的下标，就能set和get了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">element</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>] = element;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>++;<br>  &#125;<br>  <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>--;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>];<br>    <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>];<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>  <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br>  &#125;<br>  <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;<br>  &#125;<br>  <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* while (!this.isEmpty()) &#123;</span><br><span class="hljs-comment">        this.pop();</span><br><span class="hljs-comment">      &#125; */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.items[<span class="hljs-number">0</span>]&#125;</span>`</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;objString&#125;</span>,<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.items[i]&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> objString;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="用ts实现一遍"><a href="#用ts实现一遍" class="headerlink" title="用ts实现一遍"></a>用ts实现一遍</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">items</span>: <span class="hljs-built_in">any</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">element: T</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>] = element;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;<br>  &#125;<br><br>  <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>--;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>];<br>    <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>];<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> - <span class="hljs-number">1</span>];<br>  &#125;<br><br>  <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> === <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* while (!this.isEmpty()) &#123;</span><br><span class="hljs-comment">      this.pop();</span><br><span class="hljs-comment">    &#125; */</span><br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.items[<span class="hljs-number">0</span>]&#125;</span>`</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>; i++) &#123;<br>      objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;objString&#125;</span>,<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.items[i]&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> objString;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>尽管代码看起来还行，但是我们发现list时公用的，es6貌似不能声明私有变量和私有函数,毕竟别的语言的 private 太强大了,网上有很多种实现形式，目前比较让人认可的，主要是weakmap和symbol两种，但我觉得这样写代码也太不优雅了，先公共着吧，hhhhh</p><h1 id="用栈实现10进制向n进制转换"><a href="#用栈实现10进制向n进制转换" class="headerlink" title="用栈实现10进制向n进制转换"></a>用栈实现10进制向n进制转换</h1><p>我们知道二进制是除2取余再从下往上拿余数，取余数是%，从下往上拿余数和从循环栈顶拿元素相似。同理转8 进制就是除8取余….<br>实现思路：</p><ul><li>最高位为 num % base 然后直接压入栈;</li><li>使用 num &#x2F; base 来代替 num ;</li><li>重复上面的步骤，直到 n 为 0 ，并且没有余数；</li><li>以此将栈内元素弹出，直到栈空，并依次将这些元素排列，就得到了转换后的形式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">mulBase</span> =(<span class="hljs-params">num,base</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>();<br>    <span class="hljs-keyword">while</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>        s.<span class="hljs-title function_">push</span>(num%base);<br>        num = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(num/=base);<br>    &#125;<br>    <span class="hljs-keyword">var</span> converted = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">while</span>(s.<span class="hljs-title function_">size</span>()&gt;<span class="hljs-number">0</span>)&#123;<br>        converted+=s.<span class="hljs-title function_">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> converted;<br>&#125; <br></code></pre></td></tr></table></figure></li></ul><h1 id="用栈实现回文判断"><a href="#用栈实现回文判断" class="headerlink" title="用栈实现回文判断"></a>用栈实现回文判断</h1><p>实现思路：将字符串的每一次一次入栈，探后循环出栈，判断出栈后的字符串和原来的字符串是否是相等的，若一致，则是回文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">isPalindrome</span>=(<span class="hljs-params">str</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;str.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-comment">// 依次入栈</span><br>        s.<span class="hljs-title function_">push</span>(str[i]);<br>    &#125;<br>    <span class="hljs-keyword">let</span> newStr = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">while</span>(s.<span class="hljs-title function_">size</span>()&gt;<span class="hljs-number">0</span>)&#123;<br>        newStr+=s.<span class="hljs-title function_">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(newStr===str)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isPalindrome</span>(<span class="hljs-string">&quot;123321&quot;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>另一种方法字符串直接翻转就好了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> <span class="hljs-title function_">isPalindrome</span> =(<span class="hljs-params"> word </span>)=&gt;&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>(word).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>) == word ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react受控组件与非受控组件</title>
    <link href="/2018/09/07/react%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/"/>
    <url>/2018/09/07/react%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h1><blockquote><p>在HTML中，标签<strong>input</strong>、<strong>textarea</strong>、<strong>select</strong>的值的改变通常是根据用户输入进行更新。在React中，可变状态通常保存在组件的状态属性中，并且只能使用 setState() 更新，而呈现表单的React组件也控制着在后续用户输入时该表单中发生的情况，以这种由React控制的输入表单元素而改变其值的方式，称为：“受控组件”,例如下面，input的value值依赖于state</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">name</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> &#125;);<br>    &#125;;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.name&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;/</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="非受控制组件"><a href="#非受控制组件" class="headerlink" title="非受控制组件"></a>非受控制组件</h1><blockquote><p>表单数据由DOM本身处理。即不受setState()的控制，与传统的HTML表单输入相似，input输入值即显示最新值（使用 ref 从DOM获取表单值）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleSubmit</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleSubmit</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;name: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">input</span>.<span class="hljs-property">value</span>);<br>    event.<span class="hljs-title function_">preventDefault</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          Name:</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(input)</span> =&gt;</span> this.input = input&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考 <a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/">https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2018/07/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2018/07/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><h3 id="1、什么是-Singleton-？"><a href="#1、什么是-Singleton-？" class="headerlink" title="1、什么是 Singleton ？"></a>1、什么是 Singleton ？</h3><ul><li>Singleton：在 Java 中即指单例设计模式，它是软件开发中最常用的设计模式之一。</li><li>单：唯一</li><li>例：实例</li><li>单例设计模式，即某个类在整个系统中只能有一个实例对象可被获取和使用的代码模式。</li><li>例如：代表 JVM 运行环境的 Runtime 类。</li></ul><h3 id="2、要点"><a href="#2、要点" class="headerlink" title="2、要点"></a>2、要点</h3><p>1）某个类只能有一个实例（构造器私有化）<br>2）它必须自行创建实例（​ 含有一个该类的静态变量来保存这个唯一的实例）<br>3）它必须自行向整个系统提供这个实例（对外提供获取该类实例对象的方式直接暴露，用静态变量声明的方法获取）</p><h3 id="3、常见的形式"><a href="#3、常见的形式" class="headerlink" title="3、常见的形式"></a>3、常见的形式</h3><p>常见单例有三种饿汉式和三种懒汉式共六种。</p><h4 id="饿汉式：直接创建对象，不存在线程安全问题。"><a href="#饿汉式：直接创建对象，不存在线程安全问题。" class="headerlink" title="饿汉式：直接创建对象，不存在线程安全问题。"></a>饿汉式：直接创建对象，不存在线程安全问题。</h4><p>1）直接实例化饿汉式（简洁直观）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 直接实例化饿汉式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code_02_Singleton1</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、构造器私有化</span><br><span class="hljs-comment">     * 2、自行创建，并且用静态变量保存</span><br><span class="hljs-comment">     * 3、向外提供实例</span><br><span class="hljs-comment">     * 4、强调这是一个单例，我们可以用final修改</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Code_02_Singleton1</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Code_02_Singleton1</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Code_02_Singleton1</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2） 静态代码块饿汉式（适合复杂实例化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态代码块饿汉式(适合复杂实例化)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code_02_Singleton2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Code_02_Singleton2 INSTANCE;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Code_02_Singleton2</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Code_02_Singleton2</span><span class="hljs-params">()</span> &#123;<br>        <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3）枚举式 (最简洁)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枚举式 (最简洁)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Code_02_Singleton3</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 枚举类型：表示该类型是有限的几个</span><br><span class="hljs-comment">     */</span><br>    INSTANCE<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式：延迟创建对象。"><a href="#懒汉式：延迟创建对象。" class="headerlink" title="懒汉式：延迟创建对象。"></a>懒汉式：延迟创建对象。</h4><p>1）线程不安全(适用于单线程)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程不安全(使用于单线程)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code_02_Singleton4</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、构造器私有化</span><br><span class="hljs-comment">     * 2、用一个静态变量保存这个唯一的实例</span><br><span class="hljs-comment">     * 3、提供一个静态方法，获取这个实例对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Code_02_Singleton4 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Code_02_Singleton4</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Code_02_Singleton4 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Code_02_Singleton4</span>();<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>2）双重检查(线程安全，适用于多线程)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双重检查(线程安全，适用于多线程)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code_02_Singleton5</span> &#123;<br><br>    <span class="hljs-comment">// 加 volatile 作用：防止指令重排, 当实例变量有修改时，能刷到主存中去是一个原子操作，并且保证可见性。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Code_02_Singleton5 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Code_02_Singleton5</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Code_02_Singleton5 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Code_02_Singleton5.class) &#123;<br>                <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Code_02_Singleton5</span>();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>3）静态内部类模式 (适用于多线程)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态内部类模式 (适用于多线程)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code_02_Singleton6</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、内部类被加载和初始化时，才创建INSTANCE实例对象</span><br><span class="hljs-comment">     * 2、静态内部类不会自动创建, 不会随着外部类的加载初始化而初始化，他是要单独去加载和实例化的</span><br><span class="hljs-comment">     * 3、因为是在内部类加载和初始化时，创建的，因此线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Code_02_Singleton6</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Code_02_Singleton6</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Code_02_Singleton6</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Code_02_Singleton6 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Inner.INSTANCE;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>总结：<br>1、如果是饿汉式，枚举形式最简单<br>2、如果是懒汉式，静态内部类形式最简单</strong></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot两小时入门笔记</title>
    <link href="/2018/07/29/spring-boot%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/07/29/spring-boot%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化好工程之后-入门新建一个HelloController-java在浏览器中输入localhost-8080-x2F-girl内容就是1111111-启动方式-1-idea直接启动-2-mvn-mvn-spring-boot-run-3-打包成jar包启动-mvn-install-cd-target-java-jar-jar包名"><a href="#初始化好工程之后-入门新建一个HelloController-java在浏览器中输入localhost-8080-x2F-girl内容就是1111111-启动方式-1-idea直接启动-2-mvn-mvn-spring-boot-run-3-打包成jar包启动-mvn-install-cd-target-java-jar-jar包名" class="headerlink" title="初始化好工程之后# 入门新建一个HelloController.java在浏览器中输入localhost:8080&#x2F;girl内容就是1111111# 启动方式## 1. idea直接启动## 2. mvn- mvn spring-boot:run## 3. 打包成jar包启动- mvn install- cd target- java -jar jar包名"></a>初始化好工程之后<br># 入门<br>新建一个HelloController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.girl1;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>  <span class="hljs-meta">@RequestMapping(value = &quot;/girl&quot;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1111111&quot;</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br>在浏览器中输入localhost:8080&#x2F;girl<br>内容就是1111111<br># 启动方式<br>## 1. idea直接启动<br>## 2. mvn<br>- mvn spring-boot:run<br>## 3. 打包成jar包启动<br>- mvn install<br>- cd target<br>- java -jar jar包名</h2><h1 id="项目属性配置"><a href="#项目属性配置" class="headerlink" title="项目属性配置"></a>项目属性配置</h1><p>resource 目录下 将application.xxx修改成application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/first</span><br></code></pre></td></tr></table></figure><p>之后访问就得 ：<a href="http://localhost:8080/first/girl">http://localhost:8080/first/girl</a></p><h2 id="配置文件属性的使用"><a href="#配置文件属性的使用" class="headerlink" title="配置文件属性的使用"></a>配置文件属性的使用</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">cupSize:</span> <span class="hljs-string">A</span><br><br></code></pre></td></tr></table></figure><p>HelloController.java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>  <span class="hljs-comment">// 通过注解把配置文件中的cupSize注入到变量中</span><br>  <span class="hljs-meta">@Value(&quot;$&#123;cupSize&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String cupSize;<br>  <span class="hljs-meta">@RequestMapping(value = &quot;/girl&quot;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> cupSize;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开浏览器就能看到cupSize了 </p><h3 id="属性多的时候就加个前缀来区分"><a href="#属性多的时候就加个前缀来区分" class="headerlink" title="属性多的时候就加个前缀来区分"></a>属性多的时候就加个前缀来区分</h3><h4 id="新建一个类-GirlProperties-java"><a href="#新建一个类-GirlProperties-java" class="headerlink" title="新建一个类 GirlProperties.java"></a>新建一个类 GirlProperties.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.girl1;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">// 获取前缀是girl的配置</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;girl&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlProperties</span> &#123;<br>  <span class="hljs-keyword">private</span>  String cupSize;<br>  <span class="hljs-keyword">private</span>  Integer age;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> age;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCupSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> cupSize;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCupSize</span><span class="hljs-params">(String cupSize)</span> &#123;<br>    <span class="hljs-built_in">this</span>.cupSize = cupSize;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">girl:</span><br>  <span class="hljs-attr">cupSize:</span> <span class="hljs-string">A</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlProperties girlProperties;<br>  <span class="hljs-meta">@RequestMapping(value = &quot;/girl&quot;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> girlProperties.getAge();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就能做到用前缀来区分，自己打开浏览器看看就明白了</p><h3 id="配置的开发环境和生产环境"><a href="#配置的开发环境和生产环境" class="headerlink" title="配置的开发环境和生产环境"></a>配置的开发环境和生产环境</h3><ul><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">//</span> <span class="hljs-string">application.yml</span><br> <span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span>   <br></code></pre></td></tr></table></figure></li><li><p>application-dev.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">girl:</span><br>  <span class="hljs-attr">cupSize:</span> <span class="hljs-string">B</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br><br></code></pre></td></tr></table></figure></li><li><p>application-prod.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">girl:</span><br>  <span class="hljs-attr">cupSize:</span> <span class="hljs-string">A</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br><br></code></pre></td></tr></table></figure></li><li><p>可以在idea中启动开发环境，</p></li><li><p>在mvn install 后生成的jar包启动开发环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar jar包名 --spring.profiles.active=prod<br></code></pre></td></tr></table></figure></li></ul><h1 id="Controller的使用"><a href="#Controller的使用" class="headerlink" title="Controller的使用"></a>Controller的使用</h1><ul><li>@Controller  处理http请求</li><li>@RestController Spring4之后新加的注解，原来返回json需要@RequestBody配合@Controller(RestController相当于这两个的组合RequestBody和Controller)</li><li>@RequestMapping 配置url映射</li></ul><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果想访问两个</span><br><span class="hljs-meta">@RequestMapping(value = &#123;&quot;/girl&quot;,&quot;/hello&quot;&#125;,method = RequestMethod.GET)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 可以给类加，访问就得 ：localhost:8080/hello/girl了</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlProperties girlProperties;<br>  <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/girl&quot;&#125;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> girlProperties.getAge();<br>  &#125;<br>&#125;<br><span class="hljs-comment">// RequestMethod方式有很多</span><br>可以使用postman来测试api<br></code></pre></td></tr></table></figure><h2 id="处理url里面的参数"><a href="#处理url里面的参数" class="headerlink" title="处理url里面的参数"></a>处理url里面的参数</h2><ul><li>@PathVariable 获取url里面的数据</li><li>@RequestParam  获取请求参数的值</li><li>@GetMapping  组合注解</li></ul><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlProperties girlProperties;<br>  <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/girl/&#123;id&#125;&quot;&#125;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">say</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer myId)</span>&#123;<br>    <span class="hljs-keyword">return</span> myId;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// localhost:8080/girl/100</span><br></code></pre></td></tr></table></figure><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//localhost:8080/girl?id=100</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlProperties girlProperties;<br>  <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/girl&quot;&#125;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">say</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer myId)</span>&#123;<br>    <span class="hljs-keyword">return</span> myId;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 另一种写法</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlProperties girlProperties;<br>  <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/girl&quot;&#125;,method = RequestMethod.GET)</span><br>  <span class="hljs-comment">// 默认值和是否必须传入</span><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">say</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;id&quot;,required = false,defaultValue = &quot;10&quot;)</span> Integer myId)</span>&#123;<br>    <span class="hljs-keyword">return</span> myId;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// RequestMapping 可以写成GetMapping</span><br></code></pre></td></tr></table></figure><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><p>在pom.xml导入包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">// jpa和mysql的<br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结束后导入一下包</p><h3 id="配置文件的配置"><a href="#配置文件的配置" class="headerlink" title="配置文件的配置"></a>配置文件的配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">//</span> <span class="hljs-string">运行前先新建一个dbgirl的数据库，utf8mb4</span><br><span class="hljs-string">//</span> <span class="hljs-string">application.yml</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/dbgirl</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span> <span class="hljs-string">//</span> <span class="hljs-string">create会把之前的表删掉在新建一个</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="新建一个Girl类"><a href="#新建一个Girl类" class="headerlink" title="新建一个Girl类"></a>新建一个Girl类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.girl1;<br><br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><span class="hljs-comment">// 这个注解表示这个类就是对应数据库中的表</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Girl</span> &#123;<br>  <span class="hljs-meta">@Id</span><br>  <span class="hljs-meta">@GeneratedValue</span><br>  <span class="hljs-keyword">private</span> Integer id;<br><br>  <span class="hljs-keyword">private</span> String cupSize;<br><br>  <span class="hljs-keyword">private</span> Integer age;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Girl</span><span class="hljs-params">()</span> &#123;<br><br>  &#125;<br><br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> age;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> id;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCupSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> cupSize;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCupSize</span><span class="hljs-params">(String cupSize)</span> &#123;<br>    <span class="hljs-built_in">this</span>.cupSize = cupSize;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 之后表中的那些字段就是girl类中对应过去的</span><br></code></pre></td></tr></table></figure><h2 id="接口编写"><a href="#接口编写" class="headerlink" title="接口编写"></a>接口编写</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">get</span>    /girls    获取女生列表<br><br>post    /girls    创建一个女生<br><br><span class="hljs-keyword">get</span>    /girls/<span class="hljs-built_in">id</span>   通过<span class="hljs-built_in">id</span>查询一个女生<br><br><span class="hljs-keyword">put</span>    /girls/<span class="hljs-built_in">id</span>    通过<span class="hljs-built_in">id</span>更新一个女生<br><br>delete    /girls/<span class="hljs-built_in">id</span>    通过<span class="hljs-built_in">id</span>删除一个女生<br></code></pre></td></tr></table></figure><h3 id="获取女生列表"><a href="#获取女生列表" class="headerlink" title="获取女生列表"></a>获取女生列表</h3><p>新建一个GirlRepository.java的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.girl1;<br><br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><span class="hljs-comment">// Girl类名，Integer是id的类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GirlRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Girl,Integer&gt; &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>新建GirlController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.girl1;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlController</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlRepository girlRepository;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 查询女生列表</span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-meta">@GetMapping(value = &quot;/girls&quot;)</span><br>  <span class="hljs-keyword">public</span> List&lt;Girl&gt; <span class="hljs-title function_">girlList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> girlRepository.findAll();<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 使用postman测试</span><br></code></pre></td></tr></table></figure><h3 id="创建一个女生"><a href="#创建一个女生" class="headerlink" title="创建一个女生"></a>创建一个女生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 新增一个女生</span><br><span class="hljs-comment">  * */</span><br> <span class="hljs-meta">@PostMapping(value = &quot;/girls&quot;)</span><br> <span class="hljs-keyword">public</span> Girl <span class="hljs-title function_">girlAdd</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;cupSize&quot;)</span> String cupSize,</span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span>&#123;<br>   <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>   girl.setCupSize(cupSize);<br>   girl.setAge(age);<br>   <span class="hljs-keyword">return</span>  girlRepository.save(girl);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="通过id查询一个女生"><a href="#通过id查询一个女生" class="headerlink" title="通过id查询一个女生"></a>通过id查询一个女生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询一个女生</span><br> <span class="hljs-meta">@GetMapping(value = &quot;/girls/&#123;id&#125;&quot;)</span><br> <span class="hljs-keyword">public</span> Girl <span class="hljs-title function_">girlFindOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>   <span class="hljs-keyword">return</span>  girlRepository.findById(id).orElse(<span class="hljs-literal">null</span>);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="通过id更新一个女生"><a href="#通过id更新一个女生" class="headerlink" title="通过id更新一个女生"></a>通过id更新一个女生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 更新</span><br><span class="hljs-meta">@PutMapping(value = &quot;/girls/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Girl  <span class="hljs-title function_">girlUpdate</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,<span class="hljs-meta">@RequestParam(&quot;cupSize&quot;)</span> String cupSize,</span><br><span class="hljs-params">                        <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span>&#123;<br>  <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>  girl.setId(id);<br>  girl.setCupSize(cupSize);<br>  girl.setAge(age);<br>  <span class="hljs-keyword">return</span> girlRepository.save(girl);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过id删除一个女生"><a href="#通过id删除一个女生" class="headerlink" title="通过id删除一个女生"></a>通过id删除一个女生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除</span><br>   <span class="hljs-meta">@DeleteMapping(value = &quot;/girls/&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">girlDelete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>        girlRepository.deleteById(id);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="通过年龄查询女生列表"><a href="#通过年龄查询女生列表" class="headerlink" title="通过年龄查询女生列表"></a>通过年龄查询女生列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过年龄查询女生列表</span><br>   <span class="hljs-meta">@GetMapping(value = &quot;/girls/age/&#123;age&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> List&lt;Girl&gt; <span class="hljs-title function_">girlListByAge</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>&#123;<br>       <span class="hljs-keyword">return</span>  girlRepository.findByAge(age);<br>   &#125;<br></code></pre></td></tr></table></figure><p>GirlRepository.java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.first.first;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GirlRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Girl,Integer&gt; &#123;<br>    <span class="hljs-comment">// 通过年龄查询</span><br>    <span class="hljs-keyword">public</span> List&lt;Girl&gt; <span class="hljs-title function_">findByAge</span><span class="hljs-params">(Integer age)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h1><blockquote><p>需求是如果我有两条数据，一条插入失败的话另一条就不能插入，这时候需要加一个事务</p></blockquote><p>GirlService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.girl1;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlService</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlRepository girlRepository;<br>  <span class="hljs-meta">@Transactional</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertTwo</span><span class="hljs-params">()</span>&#123;<br>    Girl girlA= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>    girlA.setAge(<span class="hljs-number">10</span>);<br>    girlA.setCupSize(<span class="hljs-string">&quot;B&quot;</span>);<br>    girlRepository.save(girlA);<br><br>    Girl girlB= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>    girlA.setAge(<span class="hljs-number">11</span>);<br>    girlA.setCupSize(<span class="hljs-string">&quot;F&quot;</span>);<br>    girlRepository.save(girlB);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 在Girlcontroller里新增</span><br><br><span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlService girlService;<br>  <br><span class="hljs-meta">@PostMapping(value = &quot;/girls/two&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">girlTwo</span><span class="hljs-params">()</span>&#123;<br>    girlService.insertTwo();<br>  &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mysql</tag>
      
      <tag>spring</tag>
      
      <tag>spring-boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-8.0的一些简单的配置</title>
    <link href="/2018/07/28/mysql-8-0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2018/07/28/mysql-8-0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载后，将zip解压后放到一个目录下，配置好环境变量</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>下载好后，下载的根目录没有 my.ini 文件（或my-default.ini），没有my.ini文件，没关系可以自行创建。在安装根目录下添加 my.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment"># 设置3306端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录</span><br><span class="hljs-attr">basedir</span>=C:\Program Files\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">12</span>-winx64<br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=D:\mysql\data<br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 服务端使用的字符集默认为UTF8</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-section">[client]</span><br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br></code></pre></td></tr></table></figure><blockquote><p>注意，里面的 basedir 是我本地的安装目录，datadir 是我数据库数据文件要存放的位置，各项配置需要根据自己的环境进行配置。</p></blockquote><h1 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h1><p>在MySQL安装目录的 bin 目录下执行命令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">mysqld</span> <span class="hljs-literal">--</span><span class="hljs-comment">initialize</span> <span class="hljs-literal">--</span><span class="hljs-comment">console</span><br><br></code></pre></td></tr></table></figure><p>执行完成后，会打印 root 用户的初始默认密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">C:\Program Files\mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.12</span>-winx64\bin<br>λ mysqld <span class="hljs-comment">--initialize --console</span><br><span class="hljs-number">2018</span><span class="hljs-number">-07</span><span class="hljs-number">-28</span>T08:<span class="hljs-number">09</span>:<span class="hljs-number">39.819831</span>Z <span class="hljs-number">0</span> [<span class="hljs-keyword">System</span>] [MY<span class="hljs-number">-013169</span>] [<span class="hljs-keyword">Server</span>] C:\Program Files\mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.12</span>-winx64\bin\mysqld.exe (mysqld <span class="hljs-number">8.0</span><span class="hljs-number">.12</span>) initializing <span class="hljs-keyword">of</span> <span class="hljs-keyword">server</span> <span class="hljs-keyword">in</span> progress <span class="hljs-keyword">as</span> process <span class="hljs-number">8624</span><br><span class="hljs-number">2018</span><span class="hljs-number">-07</span><span class="hljs-number">-28</span>T08:<span class="hljs-number">09</span>:<span class="hljs-number">46.120948</span>Z <span class="hljs-number">5</span> [Note] [MY<span class="hljs-number">-010454</span>] [<span class="hljs-keyword">Server</span>] A <span class="hljs-keyword">temporary</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">generated</span> <span class="hljs-keyword">for</span> root@localhost: thbVf;<span class="hljs-number">1</span>w7(Zy<br><span class="hljs-number">2018</span><span class="hljs-number">-07</span><span class="hljs-number">-28</span>T08:<span class="hljs-number">09</span>:<span class="hljs-number">48.278535</span>Z <span class="hljs-number">0</span> [<span class="hljs-keyword">System</span>] [MY<span class="hljs-number">-013170</span>] [<span class="hljs-keyword">Server</span>] C:\Program Files\mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.12</span>-winx64\bin\mysqld.exe (mysqld <span class="hljs-number">8.0</span><span class="hljs-number">.12</span>) initializing <span class="hljs-keyword">of</span> <span class="hljs-keyword">server</span> has completed<br></code></pre></td></tr></table></figure><blockquote><p>thbVf;1w7(Zy就是初始密码（不含首位空格）</p></blockquote><p>如果删掉初始化的 datadir 目录，再执行一遍初始化命令，又会重新生成的</p><h1 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h1><p>在MySQL安装目录的 bin目录下执行命令（以管理员身份打开cmd命令行）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">mysqld <span class="hljs-attr">--install</span> <span class="hljs-selector-attr">[服务名]</span><br><br></code></pre></td></tr></table></figure><p>后面的服务名可以不写，默认的名字为 mysql。当然，如果你的电脑上需要安装多个MySQL服务，就可以用不同的名字区分了，比如 mysql5 和 mysql8。</p><blockquote><p>安装完成之后，就可以通过命令net start mysql启动MySQL的服务了。</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Program Files\mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.12</span>-winx64\bin<br>λ mysqld <span class="hljs-comment">--install</span><br>Service successfully installed.<br><br><span class="hljs-name">C</span>:\Program Files\mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.12</span>-winx64\bin<br>λ net start mysql<br>MySQL 服务正在启动 .<br>MySQL 服务已经启动成功。<br></code></pre></td></tr></table></figure><h1 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h1><p>在MySQL安装目录的 bin 目录下执行命令：<br>mysql -u root -p</p><p>　　这时候会提示输入密码，刚刚的初始密码<br>进去后：修改密码如下代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">C:\Program Files\mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.12</span>-winx64\bin<br>λ mysql -u root -p<br>Enter <span class="hljs-keyword">password</span>: ************<br>Welcome <span class="hljs-keyword">to</span> the MySQL monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-keyword">or</span> \g.<br>Your MySQL <span class="hljs-keyword">connection</span> id <span class="hljs-keyword">is</span> <span class="hljs-number">8</span><br><span class="hljs-keyword">Server</span> <span class="hljs-keyword">version</span>: <span class="hljs-number">8.0</span><span class="hljs-number">.12</span><br><br>Copyright (c) <span class="hljs-number">2000</span>, <span class="hljs-number">2018</span>, Oracle <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> its affiliates. <span class="hljs-keyword">All</span> rights reserved.<br><br>Oracle <span class="hljs-keyword">is</span> a registered trademark <span class="hljs-keyword">of</span> Oracle Corporation <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> its<br>affiliates. Other names may be trademarks <span class="hljs-keyword">of</span> their respective<br>owners.<br><br><span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;help;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help. <span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;\c&#x27;</span> <span class="hljs-keyword">to</span> clear the <span class="hljs-keyword">current</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">statement</span>.<br><br>mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.08</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>util.promisify</title>
    <link href="/2018/07/21/util-promisify/"/>
    <url>/2018/07/21/util-promisify/</url>
    
    <content type="html"><![CDATA[<h1 id="原始的写法回调函数"><a href="#原始的写法回调函数" class="headerlink" title="原始的写法回调函数"></a>原始的写法回调函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>  data=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">name</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="用了promise"><a href="#用了promise" class="headerlink" title="用了promise"></a>用了promise</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readFileAsync</span>(<span class="hljs-params">path</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(path,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">if</span>(err) <span class="hljs-title function_">reject</span>(err)<br>      <span class="hljs-keyword">else</span> <span class="hljs-title function_">resolve</span>(data)<br>    &#125;)<br>  &#125;)<br>&#125;<br><span class="hljs-title function_">readFileAsync</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>  data=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">name</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="使用-util-promisify"><a href="#使用-util-promisify" class="headerlink" title="使用 util.promisify"></a>使用 util.promisify</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> until =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)<br>until.<span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>)(<span class="hljs-string">&#x27;./package.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>  data=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">name</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="加上async"><a href="#加上async" class="headerlink" title="加上async"></a>加上async</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> until = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)<br><span class="hljs-keyword">const</span> readAsync = until.<span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>)<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readAsync</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>)<br>data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">name</span>)<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>&#125;<br>&#125;<br><span class="hljs-title function_">init</span>()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>前端</tag>
      
      <tag>promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java程序执行过程中内存分析（转）</title>
    <link href="/2018/07/08/java%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <url>/2018/07/08/java%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h1><p>Java程序运行在JVM上，可以把JVM理解成Java程序和操作系统之间的桥梁，JVM实现了Java的平台无关性，由此可见JVM的重要性。所以在学习Java内存分配原理的时候一定要牢记这一切都是在JVM中进行的，JVM是内存分配原理的基础与前提。</p><h3 id="一个完整的Java程序运行过程会涉及以下内存区域："><a href="#一个完整的Java程序运行过程会涉及以下内存区域：" class="headerlink" title="一个完整的Java程序运行过程会涉及以下内存区域："></a>一个完整的Java程序运行过程会涉及以下内存区域：</h3><ul><li><strong>寄存器</strong>： JVM内部虚拟寄存器，存取速度非常快，程序不可控制。</li><li><strong>栈</strong>： 保存局部变量的值，包括：a.用来保存基本数据类型的值；b.保存类的 <strong>实例</strong> ，即堆区 <strong>对象</strong> 的引用(指针)。也可以用来保存加载方法时的帧。</li><li><strong>堆</strong>： 用来存放动态产生的数据，比如new出来的 <strong>对象</strong> 。注意创建出来的对象只包含属于各自的成员变量，并不包括成员方法。因为同一个类的对象拥有各自的成员变量，存储在各自的堆中，但是他们共享该类的方法，并不是每创建一个对象就把成员方法复制一次。</li><li><strong>常量池</strong>： JVM为每个已加载的类型维护一个常量池，常量池就是这个类型用到的常量的一个有序集合。包括直接常量(基本类型，String)和对其他类型、方法、字段的 <strong>符号引用(1)</strong> 。池中的数据和数组一样通过索引访问。由于常量池包含了一个类型所有的对其他类型、方法、字段的符号引用，所以常量池在Java的动态链接中起了核心作用。 <strong>常量池存在于堆中</strong> 。</li><li><strong>代码段</strong>： 用来存放从硬盘上读取的源程序代码。</li><li><strong>全局数据段</strong>： 用来存放static定义的静态成员或全局变量。分配该区时内存全部清0，结果变量的初始化为0。</li></ul><h3 id="栈-stack-："><a href="#栈-stack-：" class="headerlink" title="栈(stack)："></a>栈(stack)：</h3><p>存放：局部变量；</p><h3 id="堆-heap-："><a href="#堆-heap-：" class="headerlink" title="堆(heap)："></a>堆(heap)：</h3><p>　存放new出来的对象；</p><h3 id="方法区-method-："><a href="#方法区-method-：" class="headerlink" title="方法区(method)："></a>方法区(method)：</h3><p>　存放：类的信息（代码）、static变量、常量池（字符串常量）等.<br>栈的特点：自动分配连续的空间，后进先出；一般放置局部变量<br>堆的特点：不连续的空间；放置创建new出的对象；</p><h4 id="下面对如下图进行分析："><a href="#下面对如下图进行分析：" class="headerlink" title="下面对如下图进行分析："></a>下面对如下图进行分析：</h4><p><img src="https://images2015.cnblogs.com/blog/690102/201601/690102-20160128142634442-1002493288.png"></p><p><img src="https://images2015.cnblogs.com/blog/690102/201601/690102-20160128152115754-1747667539.png"><br>具体内存分析图如下所示：<br><img src="https://images2015.cnblogs.com/blog/690102/201601/690102-20160128152521395-1714268880.png"><br>现对图2进行分析：</p><p>Student类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> &#123;<br><br>    <span class="hljs-comment">//静态数据</span><br>    String name;<br>    <span class="hljs-built_in">int</span> id;<br>    <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-built_in">int</span> weight;<br>    <br>    Computer computer;<span class="hljs-comment">//每个学生有台电脑</span><br>    <br>    <span class="hljs-comment">//动态的行为</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(name+<span class="hljs-string">&quot;在学习&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">String sname</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(name + <span class="hljs-string">&quot;向&quot;</span> +sname +<span class="hljs-string">&quot;说，你好~&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>Computer类：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Computer</span> &#123;<br><br>    String brand;<span class="hljs-comment">//品牌</span><br>    <span class="hljs-built_in">int</span> cpuSpeed;<span class="hljs-comment">//cpu</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">public class Test2 &#123;<br>    public static void main(String[] args) &#123;<br>        Student s1<span class="hljs-operator">=</span>new Student()<span class="hljs-comment">;</span><br>        s1.name<span class="hljs-operator">=</span><span class="hljs-string">&quot;熊二&quot;</span><span class="hljs-comment">;</span><br>        s1.age<span class="hljs-operator">=</span><span class="hljs-number">18</span><span class="hljs-comment">;</span><br>        <br>        Computer c<span class="hljs-operator">=</span>new Computer()<span class="hljs-comment">;</span><br>        c.brand<span class="hljs-operator">=</span><span class="hljs-string">&quot;联想&quot;</span><span class="hljs-comment">;</span><br>        c.cpuSpeed<span class="hljs-operator">=</span><span class="hljs-number">100</span><span class="hljs-comment">;</span><br>        <br>        s1.computer <span class="hljs-operator">=</span>c<span class="hljs-comment">;</span><br>        <br>        //c.brand<span class="hljs-operator">=</span> <span class="hljs-string">&quot;戴尔&quot;</span><span class="hljs-comment">; </span><br>  System.out.println(s1.computer.brand)<span class="hljs-comment">; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>具体内存分析如下：</p><p><img src="https://images2015.cnblogs.com/blog/690102/201601/690102-20160128163238395-1613853502.png"></p><p>注：如果加上注释部分”c.brand&#x3D; “戴尔”;”,s1.computer.brand最后输出的就是”戴尔”.因为它们指向的是同一个地方。</p><h1 id="对于java-和内存之间的注意事项"><a href="#对于java-和内存之间的注意事项" class="headerlink" title="对于java 和内存之间的注意事项"></a>对于java 和内存之间的注意事项</h1><ul><li>一个Java文件，只要有main入口方法，我们就认为这是一个Java程序，可以单独编译运行。</li><li>无论是普通类型的变量还是引用类型的变量(俗称实例)，都可以作为局部变量，他们都可以出现在栈中。只不过普通类型的变量在栈中直接保存它所对应的值，而引用类型的变量保存的是一个指向堆区的指针，通过这个指针，就可以找到这个实例在堆区对应的对象。因此，普通类型变量只在栈区占用一块内存，而引用类型变量要在栈区和堆区各占一块内存。</li><li>分清什么是实例什么是对象。Class a&#x3D; new Class();此时a叫实例，而不能说a是对象。实例在栈中，对象在堆中，操作实例实际上是通过实例的指针间接操作对象。多个实例可以指向同一个对象。</li><li>栈中的数据和堆中的数据销毁并不是同步的。方法一旦结束，栈中的局部变量立即销毁，但是堆中对象不一定销毁。因为可能有其他变量也指向了这个对象，直到栈中没有变量指向堆中的对象时，它才销毁，而且还不是马上销毁，要等垃圾回收扫描时才可以被销毁。</li><li>以上的栈、堆、代码段、数据段等等都是相对于应用程序而言的。每一个应用程序都对应唯一的一个JVM实例，每一个JVM实例都有自己的内存区域，互不影响。并且这些内存区域是所有线程共享的。这里提到的栈和堆都是整体上的概念，这些堆栈还可以细分。</li><li>类的成员变量在不同对象中各不相同，都有自己的存储空间(成员变量在堆中的对象中)。而类的方法却是该类的所有对象共享的，只有一套，对象使用方法的时候方法才被压入栈，方法不使用则不占用内存。</li></ul><h2 id="可以参考的文章："><a href="#可以参考的文章：" class="headerlink" title="可以参考的文章："></a>可以参考的文章：</h2><p><a href="http://www.cnblogs.com/WJ5888/p/4374791.html">JVM内存堆布局图解分析</a></p><p><a href="https://www.kancloud.cn/digest/java20151229/130204">【java】内存分析</a></p><p>转载自：<a href="https://www.cnblogs.com/Qian123/p/5166351.html">https://www.cnblogs.com/Qian123/p/5166351.html</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven学习笔记</title>
    <link href="/2018/07/07/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/07/07/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">mvn -v 查看版本<br>compile 编译<br><span class="hljs-keyword">test </span>测试<br>package 打包<br>clean 删除target<br>install 安装jar包到本地仓库<br></code></pre></td></tr></table></figure><h1 id="自动建立项目骨架"><a href="#自动建立项目骨架" class="headerlink" title="自动建立项目骨架"></a>自动建立项目骨架</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">mvn archetype:<span class="hljs-keyword">generate</span>   按照提示进行选择<br></code></pre></td></tr></table></figure><blockquote><p> 若卡在 [INFO] Generating project in Interactive mode</p></blockquote><h2 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">加个参数 -DarchetypeCatalog=internal 让它不要从远程服务器上取catalog:<br>mvn archetype:<span class="hljs-keyword">generate</span> -DarchetypeCatalog=internal <br></code></pre></td></tr></table></figure><p>或者直接设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn archetype:generate <span class="hljs-attribute">-DarchetypeCatalog</span>=internal <span class="hljs-attribute">-DgroupId</span>=org.sonatype.mavenbook.simple <span class="hljs-attribute">-DartifactId</span>=simple <span class="hljs-attribute">-Dpackage</span>=org.sonatype.mavenbook <span class="hljs-attribute">-Dversion</span>=1.0-SNAPSHOT<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">DgroupId 组织名等等<br>DartifactId 项目名-模块名<br>D<span class="hljs-keyword">version</span> 版本号<br>Dpackage 项目所在的包名<br></code></pre></td></tr></table></figure><h1 id="设置阿里的源"><a href="#设置阿里的源" class="headerlink" title="设置阿里的源"></a>设置阿里的源</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">// 安装文件的conf文件下的setting.xml<br>// 更改<br><span class="hljs-comment">&lt;!--设置镜像中央仓库为阿里云--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="默认存放位置"><a href="#默认存放位置" class="headerlink" title="默认存放位置"></a>默认存放位置</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\Users\shouk\.m2   用户下<br></code></pre></td></tr></table></figure><p>修改默认安装位置,也是配置文件里面</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;localRepository&gt;D:<span class="hljs-regexp">/maven/</span>repository&lt;/localRepository&gt;<br>将setting.xml也复制到D:<span class="hljs-regexp">/maven/</span>repository下<br></code></pre></td></tr></table></figure><h1 id="maven生命周期"><a href="#maven生命周期" class="headerlink" title="maven生命周期"></a>maven生命周期</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">clean compile test <span class="hljs-keyword">package</span> <span class="hljs-title">install </span><br></code></pre></td></tr></table></figure><h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 反写的公司网址+项目名</span><br>  &lt;groupId&gt;org.<span class="hljs-property">sonatype</span>.<span class="hljs-property">mavenbook</span>.<span class="hljs-property">simple</span>&lt;/groupId&gt;<br>  <span class="hljs-comment">// 项目名+模块名</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br>  <span class="hljs-comment">// 版本号 第一个大版本号，第二个分支版本，第三个小版本号</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br>  <span class="hljs-comment">// 默认是jar </span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></span><br>  <span class="hljs-comment">// 项目描述名</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>simple<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br>  <span class="hljs-comment">// 项目地址</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br>  <br>  <br>  <span class="hljs-comment">// 依赖</span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">      // 依赖范围，测试范围有用</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>打包的时候会进行单元测试，例如 mvn clean package<br>若想打包的时候跳过单元测试：mvn clean package -Dmaven.test.skip&#x3D;true</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create-react-app 配置scss,ant-design，装饰器，代理，node支持最新语法，express es6 后端，链接mongodb</title>
    <link href="/2018/03/28/create-react-app%20%E9%85%8D%E7%BD%AEscss,ant-design%EF%BC%8C%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%8C%E4%BB%A3%E7%90%86%EF%BC%8Cnode%E6%94%AF%E6%8C%81%E6%9C%80%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%8Cexpress%20es6%20%E5%90%8E%E7%AB%AF%EF%BC%8C%E9%93%BE%E6%8E%A5mongodb/"/>
    <url>/2018/03/28/create-react-app%20%E9%85%8D%E7%BD%AEscss,ant-design%EF%BC%8C%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%8C%E4%BB%A3%E7%90%86%EF%BC%8Cnode%E6%94%AF%E6%8C%81%E6%9C%80%E6%96%B0%E8%AF%AD%E6%B3%95%EF%BC%8Cexpress%20es6%20%E5%90%8E%E7%AB%AF%EF%BC%8C%E9%93%BE%E6%8E%A5mongodb/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g create-react-app<br>create-react-app my-app<br>cd my-app<br>npm i<br>npm start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者，npm 5.1版本以上自带npx,以下官方推荐</span><br>npx create-react-app my-app<br>cd my-app<br>npm start<br></code></pre></td></tr></table></figure><h2 id="暴露配置文件"><a href="#暴露配置文件" class="headerlink" title="暴露配置文件"></a>暴露配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">暴露配置文件，输入<span class="hljs-built_in">yes</span>就好</span><br>npm eject<br></code></pre></td></tr></table></figure><h2 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">scss依赖</span><br>npm install sass-loader node-sass --save-dev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果node-sass下载不下来的话，即node-sass安装失败使用：</span><br> npm install --save node-sass --registry=https://registry.npm.taobao.org --disturl=https://npm.taobao.org/dist --sass-binary-site=http://npm.taobao.org/mirrors/node-sass<br><span class="hljs-meta prompt_"># </span><span class="language-bash">说明</span><br>--registry=https://registry.npm.taobao.org 淘宝npm包镜像<br>--disturl=https://npm.taobao.org/dist 淘宝node源码镜像，一些二进制包编译时用<br>--sass-binary-site=http://npm.taobao.org/mirrors/node-sass 这个才是node-sass镜像<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ant-design</span><br>npm install antd --save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">按需加载的依赖</span><br>npm install babel-plugin-import --save<br></code></pre></td></tr></table></figure><h2 id="配置webpack参数"><a href="#配置webpack参数" class="headerlink" title="配置webpack参数"></a>配置webpack参数</h2><h2 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h2><p>在config 里面的webpack.config.dev.js和webpack.config.prod.js里面，前面一个是开发的配置文件，后面的是生产时的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">大约160行左右<br><span class="hljs-meta prompt_"># </span><span class="language-bash">第一处是：</span>  <br>test: /\.css$/ 变成 test: /\.s?css$/  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二处是：</span> <br>&#123;loader: require.resolve(&#x27;sass-loader&#x27;)&#125;<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281525283.png"><br>之后你随便新建一个a.scss ，import “路径&#x2F;a.scss”就可以了</p><blockquote><p>缺点就是css代码会是全局的，一个人开发还好，多人的话，css命名冲突就很难受了，css-moudle是一种解决方案，但是我不怎么喜欢，我个人推荐可以用下style-component</p></blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html">css-moudle阮一峰</a></p><p><a href="https://www.styled-components.com/">style-component</a></p><h2 id="ant-design"><a href="#ant-design" class="headerlink" title="ant-design"></a>ant-design</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># 修改babel配置，在package.<span class="hljs-property">json</span>里面<br># 装饰器的包：npm i babel-plugin-transform-decorators-legacy --D<br># <span class="hljs-number">1.</span>按需加载,让nodejs支持最新的语法，装饰器<br># package.<span class="hljs-property">json</span>里面不能写注释，记得删掉<br> <span class="hljs-string">&quot;babel&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<br>      <span class="hljs-string">&quot;react-app&quot;</span>,<br>      [<br>        <span class="hljs-string">&quot;env&quot;</span>,<br>        &#123;<br>          <span class="hljs-string">&quot;targets&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;node&quot;</span>: <span class="hljs-literal">true</span><br>          &#125;<br>        &#125;<br>      ]<br>    ],<br>    <span class="hljs-comment">// 这边是按需加载ant-design的css</span><br>    <span class="hljs-string">&quot;plugins&quot;</span>: [<br>      [<br>        <span class="hljs-string">&quot;import&quot;</span>,<br>        &#123;<br>          <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;antd&quot;</span>,<br>          <span class="hljs-string">&quot;libraryDirectory&quot;</span>: <span class="hljs-string">&quot;es&quot;</span>,<br>          <span class="hljs-string">&quot;style&quot;</span>: <span class="hljs-string">&quot;css&quot;</span><br>        &#125;<br>      ],<br>      <span class="hljs-comment">// 装饰器</span><br>      <span class="hljs-string">&quot;transform-decorators-legacy&quot;</span><br>    ]<br>  &#125;,<br>  <span class="hljs-comment">//设置代理,应为前端开启了一个服务器，后端又开启了一个服务器，导致跨域的问题，设置代理能解决这个问题</span><br>    <span class="hljs-string">&quot;proxy&quot;</span>: <span class="hljs-string">&quot;http://localhost:8888&quot;</span>,<br></code></pre></td></tr></table></figure><p>之后就ok了。你引入一个ant的组件试试就知道了</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># 导入<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./msgCircle.scss&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MsgCircle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;msg-circle&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MsgCircle</span>;<br># 有人说为什么不用导入css,应为前面已经配置了按需加载<br></code></pre></td></tr></table></figure><h1 id="如果我又想用antd的主题怎么办"><a href="#如果我又想用antd的主题怎么办" class="headerlink" title="如果我又想用antd的主题怎么办"></a>如果我又想用antd的主题怎么办</h1><blockquote><p>这里就给一个官方的解决方案</p></blockquote><p><a href="https://gist.github.com/Kruemelkatze/057f01b8e15216ae707dc7e6c9061ef7">传送门</a></p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281525084.png"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>修改配置文件后要重新npm start一下的</p></blockquote><ul><li>若配置装饰器后，发现 <code>vscode</code> 有红色波浪线，解决方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># 新建一个tsconfig.<span class="hljs-property">json</span>，内容如下<br>&#123;<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;experimentalDecorators&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="链接mongodb，后端node"><a href="#链接mongodb，后端node" class="headerlink" title="链接mongodb，后端node"></a>链接mongodb，后端node</h1><blockquote><p>梦想还是要有的，万一实现了呢</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在根目录新建一个server</span> <br>cd server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">init后就会生成一个package.json，记录你每次安装的包</span><br>npm init <br><span class="hljs-meta prompt_"># </span><span class="language-bash">为什么把模块装在server里面，装在外面的package.json不好吗，可以啊，不过我喜欢分开</span><br>npm i bluebird express mongoose nodemon --save <br>mkdir server.js<br></code></pre></td></tr></table></figure><p>准备启动后端了，链接mongodb</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// mongoose的Promise已经废弃了，这里就用下bluebird</span><br>mongoose.<span class="hljs-property">Promise</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bluebird&#x27;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>  mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost/test&#x27;</span>, &#123;<br>    <span class="hljs-comment">// 不加参数会报警告</span><br>    <span class="hljs-comment">// useMongoClient: true</span><br>  &#125;)<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>&#125;<br>mongoose.<span class="hljs-property">connection</span><br>  .<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mongoose connection&#x27;</span>)<br>  &#125;)<br>  .<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务开启在8888&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>前面代理的端口要和后端启动的端口一致的</p></blockquote><p>修改package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># nodemon 就是你不用每次再去手动node server.<span class="hljs-property">js</span>了，他会自动的帮你的（在外层的package.<span class="hljs-property">json</span>）<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;server&quot;</span>: <span class="hljs-string">&quot;nodemon server/server.js&quot;</span><br>  &#125;,<br></code></pre></td></tr></table></figure><h1 id="express怎么不是es6的语法"><a href="#express怎么不是es6的语法" class="headerlink" title="express怎么不是es6的语法?"></a>express怎么不是es6的语法?</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">那就实现一下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用babel-cli</span> <br>npm i bebel-cli --save <br>修改scripts命令<br>  &quot;server&quot;: &quot;NODE_ENV=test nodemon --exec babel-node server/server.js&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">不指定babel-node的话，默认是node</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">之后你把里面的require改成import是不会报错的</span><br></code></pre></td></tr></table></figure><h1 id="mongodb-存储配置"><a href="#mongodb-存储配置" class="headerlink" title="mongodb 存储配置"></a>mongodb 存储配置</h1><ul><li>默认你已经安装好mongodb,配好mongodb的环境变量，不配也没关系，多打几个路径而已</li><li>在某一盘符下新建一个test(名字随意)，里面新建data,etc,logs三个文件夹</li><li>data是存放数据的，etc是配置文件，logs是日志</li><li>在etc下新建mongo.conf<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">内容范例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">数据库路径 (你自己的路径)</span><br>dbpath=/home/skl/Desktop/test/data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志输出文件路径</span> <br>logpath=/home/skl/Desktop/test/logs/mongodb.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">错误日志采用追加模式，配置这个选项后mongodb的日志文件会追加到现有的日志文件，而不是重新创建一个文件</span> <br>logappend=true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">过滤一些无用的日志</span> <br>quiet=false<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动日志文件，默认启动</span> <br>journal=true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口号，默认是27017</span> <br>port=27018<br></code></pre></td></tr></table></figure></li><li>需要注意的是：linux和window的文件分隔符是不一样的，pwd打一下就知道了</li><li>在etc文件里面运行 mongod –config mongo.conf （指定配置文件）<blockquote><p>启动server.js前先链接数据库 ，在etc文件里面运行 mongod –config mongo.conf （指定配置文件）</p></blockquote></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd server<br>npm start<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281525730.png"><br>访问localhost:8888，会出现</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281526050.png"></p><p><a href="https://github.com/shoukailiang/react-scaffolding">传送门</a>  项目放github上了，可以自己查看</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>ant-design</tag>
      
      <tag>scss</tag>
      
      <tag>create-react-app</tag>
      
      <tag>webpack</tag>
      
      <tag>express</tag>
      
      <tag>mongodb</tag>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git命令速查</title>
    <link href="/2018/03/20/git%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/"/>
    <url>/2018/03/20/git%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="克隆项目："><a href="#克隆项目：" class="headerlink" title="克隆项目："></a>克隆项目：</h3><p>git clone <a href="https://github.com/shoukailiang/test.git">https://github.com/shoukailiang/test.git</a></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><blockquote><p>如果你不设置可能还push不上去，第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p></blockquote><ul><li>git config –global user.name “shoukailiang”</li><li>git config –global user.email <a href="mailto:&#x73;&#x68;&#x6f;&#117;&#x6b;&#97;&#105;&#108;&#x69;&#97;&#x6e;&#103;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#x73;&#x68;&#x6f;&#117;&#x6b;&#97;&#105;&#108;&#x69;&#97;&#x6e;&#103;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;</a></li></ul><h3 id="git-status-查看状态"><a href="#git-status-查看状态" class="headerlink" title="git status 查看状态"></a>git status 查看状态</h3><ul><li><p>[master ≡ +2 ~0 -0!]（红色代表是工作区）：工作区有两个添加的文件，0个修改，0个删除   </p></li><li><p>[master ≡ +1 ~0 -0（绿色） | +1 ~0 -0 !（红色）]：绿色表示暂存区   ！表示有冲突</p></li><li><p>git add 添加到暂存区</p></li><li><p>git commit 提交到版本库，会弹出一个文件填注释</p></li><li><p>git add .把修改过得文件全部提交到暂存区（后面是.）</p></li><li><p>git commit -m “change demo01”:注释写在引号里面，不会弹出记事本</p></li><li><p>git commit -a -m “drag.js”：先添加到暂存区后添加到版本库的简写，引号里面写注释</p></li><li><p>git log：查看提交的历史，历史多了之后要按回车来显示，退出按q</p></li><li><p>git diff :工作区和暂存区的文件的差异的对比</p></li><li><p>git diff –cached：暂存区与版本库之间的对比（或者git diff –staged）</p></li><li><p>git diff master:工作区与版本库之间的差异 ，master那个是分支的名字</p></li></ul><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><ul><li>git reset HEAD drag.js  从暂存区撤销回工作区</li><li>git checkout – drag.js 从版本库撤销回工作区（会先从暂存区撤销，如果没有才会到版本库中撤销）</li><li>git commit -m “change3 drag.js and demo01.html” –amend  ：比如有两个文件1,2 我把1 add到暂存区，然后commit了全部，<br>这时候就除了错误，可以使用上述代码：就达到了撤销上一次的commit 然后把文件全部commit ；使用git log 并不会有那次commit的注释信息</li></ul><h3 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h3><ul><li>git rm test.txt ：把暂存区中的test.txt删除（要先把工作区中的这个文件删除，否侧会报错）</li><li>git rm -f test.txt 会把暂存区和工作区的test.txt删掉（要先把test.txt  add 到暂存区）</li><li>git rm –cached test.txt 把暂存区的test.txt删掉，不会吧工作区的test.txt删掉</li></ul><h3 id="恢复："><a href="#恢复：" class="headerlink" title="恢复："></a>恢复：</h3><ul><li><p>指定文件：比如一不小心在工作区把一个文件给误删了，这时候git log 后找到commit 的id  然后 git checkout e154cb8c45eb drag.js</p></li><li><p>git reset –hard e154cb8c45eb   恢复版本，不管有多少文件，可以去过去也可以去未来（未来至回退之后的未来）</p></li><li><p>git reset  –hard HEAD^ 回到上一个版本</p></li><li><p>git reset  –hard HEAD~2 回退两个版本（跳过两个，回退到第三个）</p></li><li><p>git reflog：把历史版本全都打印出来</p></li><li><p>git remote 查看远程仓库的名字</p></li><li><p>git remote -v 查看名字所对应的远程仓库的地址</p></li><li><p>git push origin master  （origin是远程仓库的名字  master是分支名）</p></li></ul><h3 id="解决冲突："><a href="#解决冲突：" class="headerlink" title="解决冲突："></a>解决冲突：</h3><ul><li><p>git fetch 拉取远端仓库代码但不进行合并，需要手动合并（在工作区内并不会直接合并还是原来的代码，可以先查看区别后再合并）</p><ul><li>查看区别 git diff master origin&#x2F;master</li><li>合并: git merge origin&#x2F;master,合并会把两个都合并，让我们自己选择（多余的删除）</li></ul></li><li><p>git pull  拉取远端仓库代码直接合并</p></li></ul><h3 id="开源项目协作（没权限）："><a href="#开源项目协作（没权限）：" class="headerlink" title="开源项目协作（没权限）："></a>开源项目协作（没权限）：</h3><ul><li>fork:相当于一个镜像放在自己的仓库，克隆在本地，修改代码，（也可以在github上直接修改）发布到自己的仓库，<br>然后pull request  ,写一些留言，对方会看到，对方可以选择 合并</li></ul><h3 id="分支："><a href="#分支：" class="headerlink" title="分支："></a>分支：</h3><ul><li><p>git branch 查看分支</p></li><li><p>git branch new1 创建new1的新分支</p></li><li><p>git checkout new1 切换到new1的分支</p></li><li><p>git checkout -b new2 创建new2分支并且切换到new2分支上</p></li><li><p>（先切换到master分支上）， git merge new1   将new1与master合并</p></li><li><p>git branch –merged ：可以知道当前分支下有被合并的分支 ，比如master分支下合并了new1</p></li><li><p>git branch –no-merged 当前分支下没有被合并的分支</p></li><li><p>git branch -d new1          </p><ul><li>new1和branch合并后，把new1删除，只能删掉被合并的分支，比如new2没有和master合并就不能删除new2</li></ul></li><li><p>git branch -D new2 强制把没有合并的分支删掉</p></li><li><p>有冲突的合并（两个分支不同）</p><ul><li>在master上git merge new1  会让你自己选择留下哪个然后 git commit -a -m “…..”</li></ul></li><li><p>git push origin  new1  把new1分支提交到远端仓库上</p></li><li><p>git tag 查看标签</p></li><li><p>git tag v1.0   v1.0版<br>之后：git push origin v1.0 （这里v1.0不是分支）</p></li><li><p>git reset HEAD~  撤销回上一次提交的，和之前在暂存区里提交前一样的状态</p></li></ul><h3 id="推荐git-教程"><a href="#推荐git-教程" class="headerlink" title="推荐git 教程"></a>推荐git 教程</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰git，非常的好</a></li><li><a href="http://www.ituring.com.cn/book/1870">git小书</a></li><li><a href="https://git-scm.com/book/zh/v2">官方</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>命令行</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es6，es7的一些语法（笔记）</title>
    <link href="/2018/03/15/es6%EF%BC%8Ces7%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <url>/2018/03/15/es6%EF%BC%8Ces7%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a=<span class="hljs-number">3</span>; <span class="hljs-comment">//定义常量</span><br><span class="hljs-comment">// 如果要用es 5的方式怎么写呢？？</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&quot;a&quot;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">37</span>,<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">a</span>)<br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>es6的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br><span class="hljs-comment">// ReferenceError: i is not defined</span><br></code></pre></td></tr></table></figure><p>在es5中,并没有块级作用域，先用es5写一个作用域看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  a[i] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>  &#125;;<br>&#125;<br>a[<span class="hljs-number">6</span>](); <span class="hljs-comment">// 10</span><br>a[<span class="hljs-number">5</span>](); <span class="hljs-comment">// 10</span><br>a[<span class="hljs-number">4</span>](); <span class="hljs-comment">// 10</span><br>a[<span class="hljs-number">3</span>](); <span class="hljs-comment">// 10</span><br>a[<span class="hljs-number">2</span>](); <span class="hljs-comment">// 10</span><br>a[<span class="hljs-number">1</span>](); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。</p></blockquote><h4 id="ES6-定义属性"><a href="#ES6-定义属性" class="headerlink" title="ES6 定义属性"></a>ES6 定义属性</h4><p>es5怎么写呢</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>, y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">object</span> = &#123;<br>　　<span class="hljs-attr">x</span>: x,<br>　　<span class="hljs-attr">y</span>: y<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">x</span>); <span class="hljs-comment">//output &quot;1&quot;</span><br><span class="hljs-string">``</span><span class="hljs-string">`javascript</span><br><span class="hljs-string">在es6中</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;给一个属性赋一个变量值，如果变量名和属性名相同，ES6 提供了一个简洁的语法，可以省略变量名</p><p>let x &#x3D; 1, y &#x3D; 2;<br>let object &#x3D; {<br>　　x,<br>　　y<br>};<br>console.log(object.x); &#x2F;&#x2F;output “1”</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><br><br>### 箭头函数<br>```javascript<br><span class="hljs-comment">// es5中的this</span><br><span class="hljs-keyword">var</span> A = function () &#123;<br>    <span class="hljs-keyword">this</span>.a = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">this</span>.b = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    <span class="hljs-keyword">this</span>.c = &#123;<br>        a: <span class="hljs-string">&#x27;a++&#x27;</span>,<br>        b: function () &#123;<br>            console.log(<span class="hljs-keyword">this</span>.a);<br>        &#125;<br>    &#125;<br>&#125;<br><br>console.log(new A().c.b()) <span class="hljs-comment">// a++ 因为es5中的this即谁调用它，this就指向谁</span><br><span class="hljs-comment">//es6</span><br><span class="hljs-keyword">var</span> A = function () &#123;<br>    <span class="hljs-keyword">this</span>.a = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">this</span>.b = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    <span class="hljs-keyword">this</span>.c = &#123;<br>        a: <span class="hljs-string">&#x27;a++&#x27;</span>,<br>        b:  ()=&gt;&#123;<br>            console.log(<span class="hljs-keyword">this</span>.a);<br>        &#125;<br>    &#125;<br>&#125;<br><br>console.log(new A().c.b()) <span class="hljs-comment">// a,箭头函数this的指向是定义时this的指向，b函数在定义的时候this就指向函数体里面的this</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//带有默认参数的箭头函数</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">hello</span> =(<span class="hljs-params">name=<span class="hljs-string">&#x27;world&#x27;</span></span>)=&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>) <span class="hljs-comment">//注意这边不是单引号</span><br>&#125;<br><span class="hljs-title function_">hello</span>() <span class="hljs-comment">//hello world</span><br><span class="hljs-title function_">hello</span>(<span class="hljs-string">&#x27;skl&#x27;</span>)<span class="hljs-comment">//hello skl</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//多个参数</span><br>let cal1 =<span class="hljs-function">(<span class="hljs-params">num1,num2</span>)=&gt;</span>num1*num2<br>let arr=[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(cal1(...arr))<span class="hljs-comment">//展开</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name1,name2</span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name1,name2)<br>&#125;<br>let arr =[<span class="hljs-string">&#x27;skl1&#x27;</span>,<span class="hljs-string">&#x27;skl2&#x27;</span>];<br><span class="hljs-comment">//es5</span><br><span class="hljs-comment">//hello.apply(null,arr)</span><br><span class="hljs-comment">//es6</span><br>hello(...arr)<br><br></code></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// es5</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,y </span>) &#123;<br>    x=x||<span class="hljs-number">1</span>;<br>    y=y||<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">// es6</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">x=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;   <span class="hljs-comment">//es5</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>        a.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>            sum += item;<br>        &#125;)<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <br>&#125;<br>&#123;<br>    <span class="hljs-comment">//es5</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">...a</span>) &#123;<br>        <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>        a.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>            sum += item;<br>        &#125;)<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <br>&#125;<br><span class="hljs-comment">// 扩展运算符的使用</span><br><span class="hljs-comment">// 合并数组 es5</span><br>&#123;<br>    <span class="hljs-keyword">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">var</span> b=[<span class="hljs-number">11</span>,<span class="hljs-number">111</span>,<span class="hljs-number">111</span>];<br>    <span class="hljs-keyword">var</span> c=b.<span class="hljs-title function_">concat</span>(a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c)<br>&#125;<br><span class="hljs-comment">// 合并数组 es6运用扩展运算符</span><br>&#123;<br>    <span class="hljs-keyword">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">var</span> b=[<span class="hljs-number">11</span>,<span class="hljs-number">111</span>,<span class="hljs-number">111</span>];<br>    <span class="hljs-keyword">var</span> c=[...a,...b];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj=&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;skl&#x27;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj))<span class="hljs-comment">//[&quot;name&quot;,&quot;age&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj))<span class="hljs-comment">//[&quot;skl&quot;,18]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj))<span class="hljs-comment">// key 和value变成一个数组</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;skl&#x27;</span><br><span class="hljs-keyword">const</span> age=<span class="hljs-string">&#x27;nian&#x27;</span>;<br><span class="hljs-keyword">const</span> height=<span class="hljs-string">&#x27;shengao&#x27;</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>  [age]:<span class="hljs-number">18</span>,<br>  height<br>&#125;<br>obj[name] = <span class="hljs-string">&#x27;hello skl&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<span class="hljs-comment">//&#123;nian: 18, height: &quot;shengao&quot;, skl: &quot;hello skl&quot;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;skl&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-keyword">const</span> obj2=&#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;ha&#x27;</span>,<span class="hljs-attr">aa</span>:<span class="hljs-number">90</span>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;...obj1,...obj2&#125;)<span class="hljs-comment">//&#123;name: &quot;skl&quot;, age: 18, type: &quot;ha&quot;, aa: 90&#125;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//结构赋值</span><br><span class="hljs-keyword">const</span> arr =[<span class="hljs-string">&#x27;skl&#x27;</span>,<span class="hljs-string">&#x27;sk2&#x27;</span>];<br><span class="hljs-keyword">let</span> [arg1,arg2]=arr;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg1,arg2)<span class="hljs-comment">//skl sk2</span><br><br><span class="hljs-keyword">const</span> obj=&#123;<span class="hljs-attr">nian</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;shengao&quot;</span>, <span class="hljs-attr">skl</span>: <span class="hljs-string">&quot;hello skl&quot;</span>&#125;<br><span class="hljs-keyword">const</span> &#123;nian,height&#125;=obj;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nian,height)<span class="hljs-comment">//18 shengao</span><br></code></pre></td></tr></table></figure><h3 id="代理做数据保护"><a href="#代理做数据保护" class="headerlink" title="代理做数据保护"></a>代理做数据保护</h3><h4 id="es5中的数据保护"><a href="#es5中的数据保护" class="headerlink" title="es5中的数据保护"></a>es5中的数据保护</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">// 数据保护（相当于私有变量）es5的写法,定义一个构造函数</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> data = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;es5&#x27;</span>,<br>      <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>    &#125;<br>    <span class="hljs-comment">// getter 和setter</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>      <span class="hljs-keyword">return</span> data[key]<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;<br>      <span class="hljs-keyword">if</span> (key !== <span class="hljs-string">&#x27;sex&#x27;</span>) &#123;<br>        data[key] = value;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 声明实例</span><br>  <span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>  <span class="hljs-comment">// 读取</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>(&#123;<br>    <span class="hljs-attr">name</span>: person.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>),<br>    <span class="hljs-attr">sex</span>: person.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sex&#x27;</span>),<br>    <span class="hljs-attr">aeg</span>: person.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;ageqe3w&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-comment">// 修改</span><br>  person.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;啦啦啦&#x27;</span>);<span class="hljs-comment">// 这时候console的结果就会变了</span><br>  person.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>)<span class="hljs-comment">// console出来发现没有用因为数据被保护了</span><br>&#125;<br>&#123;<br>  <span class="hljs-comment">// 另一种写法</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-title class_">Person</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;skl&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>  &#125;<br>  <span class="hljs-comment">// sex只可读不可写</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(<span class="hljs-title class_">Person</span>, <span class="hljs-string">&#x27;sex&#x27;</span>, &#123;<br>    <span class="hljs-attr">writeable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">Person</span>.<span class="hljs-property">name</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-title class_">Person</span>.<span class="hljs-property">age</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-title class_">Person</span>.<span class="hljs-property">sex</span>,<br>  &#125;)<br>  <span class="hljs-comment">// 若强行给只读属性复制会报错</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="es6中通过代理的方式做数据保护"><a href="#es6中通过代理的方式做数据保护" class="headerlink" title="es6中通过代理的方式做数据保护"></a>es6中通过代理的方式做数据保护</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">// es的代理 </span><br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">Person</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;11&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>  &#125;<br>  <span class="hljs-comment">//person是暴露给用户的，吧上面的Person保护起来</span><br>  <span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-title class_">Person</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>      <span class="hljs-keyword">return</span> target[key]<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value</span>) &#123;<br>      <span class="hljs-keyword">if</span> (key !== <span class="hljs-string">&#x27;sex&#x27;</span>) &#123;<br>        target[key] = value;<br>      &#125;<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>在es5中，凭借字符串要不断的+,尤其是在html模板的时候，变得特别不方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`skl<span class="hljs-subst">$&#123;a&#125;</span>`</span>)<span class="hljs-comment">//skl3</span><br><span class="hljs-string">`Hello <span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;World&#x27;</span>&#125;</span>`</span><br><span class="hljs-comment">// &quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><h3 id="for…-of…"><a href="#for…-of…" class="headerlink" title="for… of…"></a>for… of…</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> iterator = arr.<span class="hljs-title function_">entries</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator) <span class="hljs-comment">//Array Iterator &#123;&#125;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> e <span class="hljs-keyword">of</span> iterator) &#123;  <span class="hljs-comment">//返回有下标的数组</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <br>    <span class="hljs-comment">//[0, &quot;a&quot;]</span><br>    <span class="hljs-comment">//[1, &quot;b&quot;]</span><br>    <span class="hljs-comment">//[2, &quot;c&quot;]</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> iterator = arr;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> e <span class="hljs-keyword">of</span> iterator) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    <span class="hljs-comment">//a b c</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> iterator = arr.<span class="hljs-title function_">entries</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [index,e] <span class="hljs-keyword">of</span> iterator) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index,e);<br>    <span class="hljs-comment">// 0 &quot;a&quot;</span><br>    <span class="hljs-comment">// 1 &quot;b&quot;</span><br>    <span class="hljs-comment">// 2 &quot;c&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> iterator = arr.<span class="hljs-title function_">entries</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [index,e] <span class="hljs-keyword">of</span> iterator) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;<br><span class="hljs-comment">// a </span><br><span class="hljs-comment">// b</span><br><span class="hljs-comment">// c</span><br></code></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> state = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">step1</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1.开始-做饭&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (state == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;做饭--完成&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;做饭--出错&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">step2</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2.开始-吃饭&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (state == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;吃饭--完成&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;吃饭--出错&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">step3</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3.开始-收拾&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (state == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;收拾--完成&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;收拾--出错&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(step1)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(step2)<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(step3)<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>  &#125;)<br></code></pre></td></tr></table></figure><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">testAsync</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello async&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> result =<span class="hljs-title function_">testAsync</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 返回的是一个promise</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSomething</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;something&#x27;</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">testAsync</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello async&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> v1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getSomething</span>();<br>  <span class="hljs-keyword">const</span> v2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">testAsync</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v1,v2)<br><br>&#125;<br><span class="hljs-title function_">test</span>()<br><br></code></pre></td></tr></table></figure><p> 模拟异步请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">takeLongTime</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;long_time_value&quot;</span>)<br>    &#125;,<span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> v = <span class="hljs-keyword">await</span> <span class="hljs-title function_">takeLongTime</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-title function_">test</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>es6</tag>
      
      <tag>es7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js作用域（变量提升，预解析）例题</title>
    <link href="/2018/03/10/js%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%EF%BC%8C%E9%A2%84%E8%A7%A3%E6%9E%90%EF%BC%89%E4%BE%8B%E9%A2%98/"/>
    <url>/2018/03/10/js%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%EF%BC%8C%E9%A2%84%E8%A7%A3%E6%9E%90%EF%BC%89%E4%BE%8B%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="典型例题如下："><a href="#典型例题如下：" class="headerlink" title="典型例题如下："></a>典型例题如下：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(a)   <span class="hljs-comment">// function</span><br><span class="hljs-title function_">a</span>()    <span class="hljs-comment">//10</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-number">10</span>)<br>&#125;<br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">//3</span><br>a=<span class="hljs-number">6</span>;<br><span class="hljs-title function_">a</span>()  <span class="hljs-comment">// 没有a这个函数了啊</span><br></code></pre></td></tr></table></figure><blockquote><p>为什么会有这样的结果呢？请看下面的例题</p></blockquote><h3 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*1</span><br><span class="hljs-comment">alert(a); //underfined（未定义）</span><br><span class="hljs-comment">var a=1;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*2</span><br><span class="hljs-comment">alert(a)</span><br><span class="hljs-comment">a=1; //报错,a is not defined</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">js解析器</span><br><span class="hljs-comment">1.“找一些东西”（js预解析）var function 参数</span><br><span class="hljs-comment"> 根据var找到； a=未定义，所有的变量在正式运行前都提前都赋值了未定义</span><br><span class="hljs-comment"> fn1=function fn1() &#123;alert(2)&#125;</span><br><span class="hljs-comment"> 所有的函数，在正式运行代码之前，都是整个函数快</span><br><span class="hljs-comment">2.逐行解读代码</span><br><span class="hljs-comment">  表达式：= + - * 、/ % ++ --! 参数 .......</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> alert(a)</span><br><span class="hljs-comment"> var a=1;</span><br><span class="hljs-comment"> function fn1() &#123;alert(2)&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">js预解析只会留下一个，！！！变量和函数重名了，只留下函数 </span><br><span class="hljs-comment">第一步：</span><br><span class="hljs-comment">a=未定义</span><br><span class="hljs-comment">a=function a() &#123;alert(2)&#125;，那么上面的那个就被干掉了；</span><br><span class="hljs-comment">最后，在预解析仓库里面只有：</span><br><span class="hljs-comment"> a=function a() &#123;alert(4)&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//开始逐行解读</span><br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//function a() &#123;alert(4)&#125;</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<span class="hljs-comment">//表达式：a就被改成1了;</span><br><span class="hljs-title function_">alert</span>(a)<span class="hljs-comment">//1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-title function_">alert</span>(<span class="hljs-number">2</span>)&#125;<span class="hljs-comment">//是函数声明，不是表达式，不会改变a的值</span><br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//3</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-title function_">alert</span>(<span class="hljs-number">4</span>)&#125;;<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//3</span><br><br><span class="hljs-title function_">a</span>()<span class="hljs-comment">//报错，读完代码之后，js仓库里面只有a=3;</span><br></code></pre></td></tr></table></figure><h3 id="例题三"><a href="#例题三" class="headerlink" title="例题三"></a>例题三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!--<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-comment">&lt;!--//1.预解析--&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-comment">&lt;!--//2.执行--&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>--&gt;<br><br>&lt;!--<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-comment">&lt;!--//3.预解析--&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-comment">&lt;!--//4.执行--&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>--&gt;<br><br> &lt;!--<br> <span class="hljs-number">1.</span><br>  &lt;script&gt;<br>    <span class="hljs-keyword">var</span> a=<span class="hljs-number">3</span>;<br>  &lt;/script&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//3</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br> --&gt;<br><br>  &lt;!--<br>  <span class="hljs-number">2.</span> &lt;script&gt;<br>      <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//报错；a is not defined</span><br>    &lt;/script&gt;<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> a=<span class="hljs-number">3</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>  --&gt;<br><br></code></pre></td></tr></table></figure><h3 id="例题四"><a href="#例题四" class="headerlink" title="例题四"></a>例题四</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//undefined</span><br>  <span class="hljs-keyword">var</span> a=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-title function_">fn1</span>();<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.预解析</span><br><span class="hljs-comment">全局的   a=未定义</span><br><span class="hljs-comment">fn1=function fn1() &#123;alert(a);var a=2;&#125;</span><br><span class="hljs-comment">2.逐行解读代码:</span><br><span class="hljs-comment">表达式 a=1;</span><br><span class="hljs-comment">函数调用</span><br><span class="hljs-comment">  1）预解析</span><br><span class="hljs-comment">  局部的   a =未定义</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  2）逐行解读代码</span><br><span class="hljs-comment">  alert(a)=&gt;未定义</span><br><span class="hljs-comment">        a=2;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="例题4-1"><a href="#例题4-1" class="headerlink" title="例题4-1"></a>例题4-1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br>   a=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-title function_">fn1</span>();<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//2</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.预解析</span><br><span class="hljs-comment">全局的   a=未定义</span><br><span class="hljs-comment">fn1=function fn1() &#123;alert(a); a=2;&#125;</span><br><span class="hljs-comment">2.逐行解读代码:</span><br><span class="hljs-comment">表达式 a=1;</span><br><span class="hljs-comment">函数调用</span><br><span class="hljs-comment">  1）预解析</span><br><span class="hljs-comment">  顺着这一层的作用域跳到上一层去找（作用域链）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  2）逐行解读代码</span><br><span class="hljs-comment">  alert(a)//当前作用域没有，顺着这一层的作用域跳到上一层去找（作用域链）</span><br><span class="hljs-comment">  a=2也是</span><br><span class="hljs-comment">  先弹出1,再弹出2</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><h3 id="例题4-2"><a href="#例题4-2" class="headerlink" title="例题4-2"></a>例题4-2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a</span>) &#123;<span class="hljs-comment">//参数相当于是一个局部变量   相当于括号里面是var a;</span><br>  <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//undefined</span><br>   a=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-title function_">fn1</span>();<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.预解析</span><br><span class="hljs-comment">   a=未定义</span><br><span class="hljs-comment">fn1=function fn1(a) &#123;alert(a); a=2;&#125;</span><br><span class="hljs-comment">2.逐行解读代码:</span><br><span class="hljs-comment">表达式 a=1;</span><br><span class="hljs-comment">函数调用</span><br><span class="hljs-comment">  1）预解析</span><br><span class="hljs-comment">  里面的a=未定义</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  2）逐行解读代码</span><br><span class="hljs-comment">        里面的a=2;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="例题4-3"><a href="#例题4-3" class="headerlink" title="例题4-3"></a>例题4-3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<span class="hljs-comment">//标志1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a</span>) &#123;<span class="hljs-comment">//参数相当于是一个局部变量   相当于括号里面是var a;</span><br>  <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1,这个a和标志1处的a是不相同的,这个a是局部的，外面的a是全局的</span><br>  a=<span class="hljs-number">2</span>;<br>  <span class="hljs-title function_">alert</span>(a)<span class="hljs-comment">//2</span><br>&#125;<br><span class="hljs-title function_">fn1</span>(a);<span class="hljs-comment">//这个a是全局</span><br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.预解析</span><br><span class="hljs-comment">   a=未定义</span><br><span class="hljs-comment">fn1=function fn1(a) &#123;alert(a); a=2;&#125;</span><br><span class="hljs-comment">2.逐行解读代码:</span><br><span class="hljs-comment">表达式 a=1;</span><br><span class="hljs-comment">函数调用</span><br><span class="hljs-comment">  1）预解析</span><br><span class="hljs-comment">  里面的a=未定义</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  2）逐行解读代码</span><br><span class="hljs-comment">        读到fn1(a)的时候  就function fn1(var a=1)</span><br><span class="hljs-comment">        找到局部的a=2</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="例题4-4"><a href="#例题4-4" class="headerlink" title="例题4-4"></a>例题4-4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a</span>) &#123;       <span class="hljs-comment">//相当于var a;a=1(外面的)</span><br>  <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br>   <span class="hljs-keyword">var</span> a=<span class="hljs-number">2</span>;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//2</span><br>&#125;<br><span class="hljs-title function_">fn1</span>(a);<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><h3 id="例题4-5"><a href="#例题4-5" class="headerlink" title="例题4-5"></a>例题4-5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a</span>) &#123; <br>  <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>;<br>  <span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//3</span><br>  <span class="hljs-keyword">var</span> a=<span class="hljs-number">2</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//2</span><br>&#125;<br><span class="hljs-title function_">fn1</span>(a);<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><h3 id="例题5-想要获取函数内的值"><a href="#例题5-想要获取函数内的值" class="headerlink" title="例题5 想要获取函数内的值"></a>例题5 想要获取函数内的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//想要获取函数内的值</span><br><span class="hljs-comment">// 一</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">var str=&#x27;&#x27;</span><br><span class="hljs-comment">function fn1() &#123;</span><br><span class="hljs-comment">  var a=&#x27;1&#x27;;</span><br><span class="hljs-comment">  str=a;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">fn1();</span><br><span class="hljs-comment">alert(str)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 二</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;100元&#x27;</span>;<br>  <span class="hljs-title function_">fn3</span>(a);<br>&#125;<br><span class="hljs-title function_">fn2</span>()<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params">b</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(b)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="例题6"><a href="#例题6" class="headerlink" title="例题6"></a>例题6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数的大括号才是一个域</span><br><span class="hljs-comment">if条件判断的大括号不是一个作用域，var 写在大括号里面和外面是一样的</span><br><span class="hljs-comment"> if(1)&#123;</span><br><span class="hljs-comment"> var a=1;</span><br><span class="hljs-comment"> &#125;</span><br><span class="hljs-comment"> alert(a);</span><br><span class="hljs-comment"> for 循环的&#123;&#125;也不是一个块级作用域</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">是作用域的标志是先解析后执行</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">alert(a);//undefined</span><br><span class="hljs-comment">if(true)&#123;</span><br><span class="hljs-comment">  var a=1;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">alert( fn1 );//underfine(最新的浏览器)，ie10及以下是可以弹出函数的。。。</span><br><span class="hljs-comment">if(true)&#123;</span><br><span class="hljs-comment">  var a=1;</span><br><span class="hljs-comment">  function fn1() &#123;</span><br><span class="hljs-comment">    alert(123)</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">//所以，以上代码要写成</span><br><span class="hljs-comment">alert( fn1 );</span><br><span class="hljs-comment">var a=1;</span><br><span class="hljs-comment">function fn1() &#123;</span><br><span class="hljs-comment">  alert(123)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">if(true)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;*/</span><br><br></code></pre></td></tr></table></figure><h3 id="例题7"><a href="#例题7" class="headerlink" title="例题7"></a>例题7</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    //1.</span><br><span class="hljs-comment">    window.onload=function () &#123;</span><br><span class="hljs-comment">      var oBtn=document.getElementsByTagName(&#x27;input&#x27;);</span><br><span class="hljs-comment">      for(var i=0;i&lt;oBtn.length;i++)&#123;</span><br><span class="hljs-comment">        oBtn[i].onclick=function () &#123;</span><br><span class="hljs-comment">          console.log(i);//3</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <br><span class="hljs-comment">/*     //2</span><br><span class="hljs-comment">    window.onload=function () &#123;</span><br><span class="hljs-comment">      var oBtn=document.getElementsByTagName(&#x27;input&#x27;);</span><br><span class="hljs-comment">      for(var i=0;i&lt;oBtn.length;i++)&#123;</span><br><span class="hljs-comment">        oBtn[i].onclick=function () &#123;</span><br><span class="hljs-comment">          console.log(i);//undefined     因为函数域解析了,来自下面for的var i;</span><br><span class="hljs-comment">          for(var i=0;i&lt;oBtn.length;i++)&#123;</span><br><span class="hljs-comment">            oBtn[i].style.background=&#x27;yellow&#x27;</span><br><span class="hljs-comment">          &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125; */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react生命周期笔记</title>
    <link href="/2018/03/03/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/03/03/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="组件的生命周期分成三个状态"><a href="#组件的生命周期分成三个状态" class="headerlink" title="组件的生命周期分成三个状态"></a>组件的生命周期分成三个状态</h3><ul><li>Mounting：已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移出真实 DOM</li></ul><h2 id="Mounting-装载"><a href="#Mounting-装载" class="headerlink" title="Mounting(装载)"></a>Mounting(装载)</h2><ul><li>getInitialState(): 在组件挂载之前调用一次。返回值将会作为 this.state 的初始值。</li><li>componentWillMount()：服务器端和客户端都只调用一次，在初始化渲染执行之前立刻调用。不会触发再次渲染。</li><li>componentDidMount()：在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）,可以设置state，会触发再次渲染，组件内部可以通过</li></ul><h2 id="Updating-更新"><a href="#Updating-更新" class="headerlink" title="Updating (更新)"></a>Updating (更新)</h2><ul><li>componentWillReceiveProps(nextProps) 在组件接收到新的 props 的时候调用。在初始化渲染的时候，该方法不会调用。通常可以调用this.setState方法来比较this.props和nextProps的执行状态，完成对state的修改。在该函数中调用 this.setState() 将不会引起第二次渲染。</li><li>shouldComponentUpdate(nextProps,nextState): 在接收到新的 props 或者 state，将要渲染之前调用。该方法用来拦截新的props或state，然后判断是否更新组件</li></ul><p>该方法在初始化渲染的时候不会调用，在使用 forceUpdate 方法的时候也不会。如果确定新的 props 和 state 不会导致组件更新，则此处应该 返回 false。</p><ul><li>componentWillUpdate(nextProps, nextState)：在接收到新的 props 或者 state 之前立刻调用，即更新之前调用</li></ul><p>在初始化渲染的时候该方法不会被调用。使用该方法做一些更新之前的准备工作。</p><blockquote><p>注意：你不能在该方法中使用 this.setState()。如果需要更新 state 来响应某个 prop 的改变，请使用 componentWillReceiveProps。</p></blockquote><ul><li>componentDidUpdate(prevProps, prevState): 在组件的更新已经同步到 DOM 中之后立刻被调用。</li></ul><p>该方法不会在初始化渲染的时候调用。使用该方法可以在组件更新之后操作 DOM 元素。</p><h2 id="Unmounting-移除"><a href="#Unmounting-移除" class="headerlink" title="Unmounting(移除)"></a>Unmounting(移除)</h2><ul><li>componentWillUnmount：在组件从 DOM 中移除的时候立刻被调用。</li></ul><p>在该方法中执行任何必要的清理,收尾工作，比如无效的定时器，或者清除在 componentDidMount 中创建的 DOM 元素。</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281528605.png"></p><p>参考文章:</p><ul><li><a href="http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD)/">React-Native之React速学教程-(中)</a></li><li><a href="https://www.jianshu.com/p/c36a0601b00c">react生命周期</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>react</tag>
      
      <tag>生命周期</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>styled-components</title>
    <link href="/2018/02/26/%E4%BD%BF%E7%94%A8%20styled-components/"/>
    <url>/2018/02/26/%E4%BD%BF%E7%94%A8%20styled-components/</url>
    
    <content type="html"><![CDATA[<p>styled-components 是一个常用的 css in js 类库。使得css代码也有了作用域。和所有同类型的类库一样，通过 js 赋能解决了原生 css 所不具备的能力，比如变量、循环、函数等。诸如 sass&amp;less 等预处理可以解决部分 css 的局限性，但还是要学习新的语法，而且需要对其编译，其复杂的 webpack 配置也总是让开发者抵触。而 styled-componens 很好的解决了这些问题，很适合 React 技术栈的项目开发。</p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> styled-components <br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoNav</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">H1</span> = styled.<span class="hljs-property">h1</span><span class="hljs-string">`</span><br><span class="hljs-string">      background-color: #a1a;</span><br><span class="hljs-string">      text-align: center;</span><br><span class="hljs-string">      &gt;span&#123;</span><br><span class="hljs-string">        color:blue;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    `</span>;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>信息完善页面<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">InfoNav</span>;<br></code></pre></td></tr></table></figure><h2 id="代码提示和高亮"><a href="#代码提示和高亮" class="headerlink" title="代码提示和高亮"></a>代码提示和高亮</h2><p>ide 貌似没能做到代码高亮和提示<br>官网有vscode的插件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vscode-styled-components</span><br></code></pre></td></tr></table></figure><h2 id="组件样式继承"><a href="#组件样式继承" class="headerlink" title="组件样式继承"></a>组件样式继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoNav</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">H1</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">      background-color: #a1a;</span><br><span class="hljs-string">      text-align: center;</span><br><span class="hljs-string">      font-size:20px;</span><br><span class="hljs-string">    `</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SPAN</span> = <span class="hljs-variable constant_">H1</span>.<span class="hljs-property">extend</span><span class="hljs-string">`</span><br><span class="hljs-string">     color: white;</span><br><span class="hljs-string">   `</span>;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SPAN</span>&gt;</span>&#123;this.props.name&#125;信息完善页面<span class="hljs-tag">&lt;/<span class="hljs-name">SPAN</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">InfoNav</span>;<br></code></pre></td></tr></table></figure><h2 id="组件内部使用-className"><a href="#组件内部使用-className" class="headerlink" title="组件内部使用 className"></a>组件内部使用 className</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Wrapper</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Hello Word<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;detail&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Wrapper</span>&gt;<br></code></pre></td></tr></table></figure><p>对于这种 styled-components 和 className 混用，或者是一些伪类的情况同样是支持的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Wrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  display: block;</span><br><span class="hljs-string">  h4 &#123;</span><br><span class="hljs-string">    font-size: 14px;</span><br><span class="hljs-string">    &amp;:hover &#123;</span><br><span class="hljs-string">      color: #fff;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  .detail &#123;</span><br><span class="hljs-string">    color: #ccc;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>当然还可以通过 injectGlobal 的方式将通用的样式注入到全局中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> styled, &#123; injectGlobal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span>;<br>injectGlobal<span class="hljs-string">`</span><br><span class="hljs-string">  @font-face &#123;</span><br><span class="hljs-string">    font-family: &#x27;Operator Mono&#x27;;</span><br><span class="hljs-string">    src: url(&#x27;../fonts/Operator-Mono.ttf&#x27;);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  body &#123;</span><br><span class="hljs-string">    margin: 0;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="CSS-动画支持"><a href="#CSS-动画支持" class="headerlink" title="CSS 动画支持"></a>CSS 动画支持</h2><p>styled-components 同样对 css 动画中的 @keyframe 做了很好的支持。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; keyframes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span>;<br><span class="hljs-keyword">const</span> fadeIn = keyframes<span class="hljs-string">`</span><br><span class="hljs-string">  0% &#123;</span><br><span class="hljs-string">    opacity: 0;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  100% &#123;</span><br><span class="hljs-string">    opacity: 1;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FadeInButton</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`</span><br><span class="hljs-string">  animation: 1s <span class="hljs-subst">$&#123;fadeIn&#125;</span> ease-out;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>keyframes 方法会生成一个唯一的 key 作为 keyframes 的名称，保证它的作用域是在单个文件内，非全局的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面简单总结一下 styled-components 在开发中的表现：</p><ul><li>提出了 container 和 components 的概念，移除了组件和样式之间的映射关系，符合关注度分离的模式；</li><li>可以在样式定义中直接引用到 js 变量，共享变量，非常便利；</li><li>支持组件之间继承，方便代码复用，提升可维护性；</li><li>兼容现有的 className 方式，升级无痛；</li><li>在实际应用中我们完全可以将 style 和 jsx 分开维护</li></ul><blockquote><p>原文链接：<a href="https://juejin.im/entry/59a57a2b5188252445327ac1" title="Title">https://juejin.im/entry/59a57a2b5188252445327ac1</a></p></blockquote><blockquote><p>参考 ： <a href="https://www.jianshu.com/p/f188f7ea59b3">https://www.jianshu.com/p/f188f7ea59b3</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>react</tag>
      
      <tag>框架</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从面相过程的拖拽到面向对象的拖拽再到简易的组件拖拽</title>
    <link href="/2018/02/21/%E4%BB%8E%E9%9D%A2%E7%9B%B8%E8%BF%87%E7%A8%8B%E7%9A%84%E6%8B%96%E6%8B%BD%E5%88%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%96%E6%8B%BD%E5%86%8D%E5%88%B0%E7%AE%80%E6%98%93%E7%9A%84%E7%BB%84%E4%BB%B6%E6%8B%96%E6%8B%BD/"/>
    <url>/2018/02/21/%E4%BB%8E%E9%9D%A2%E7%9B%B8%E8%BF%87%E7%A8%8B%E7%9A%84%E6%8B%96%E6%8B%BD%E5%88%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%96%E6%8B%BD%E5%86%8D%E5%88%B0%E7%AE%80%E6%98%93%E7%9A%84%E7%BB%84%E4%BB%B6%E6%8B%96%E6%8B%BD/</url>
    
    <content type="html"><![CDATA[<h4 id="首先，是最基本的面向过程的拖拽代码"><a href="#首先，是最基本的面向过程的拖拽代码" class="headerlink" title="首先，是最基本的面向过程的拖拽代码"></a>首先，是最基本的面向过程的拖拽代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#box</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">position</span>: absolute;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> oDiv=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>  <span class="hljs-keyword">var</span> disX=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> disY=<span class="hljs-number">0</span>;<br>  oDiv.<span class="hljs-property">onmousedown</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>  <span class="hljs-comment">//获取事件对象</span><br>    <span class="hljs-keyword">var</span> event=event||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>    <span class="hljs-comment">// disX相当于鼠标到div左侧的距离，同理disY</span><br>    disX=event.<span class="hljs-property">clientX</span>-oDiv.<span class="hljs-property">offsetLeft</span>;<br>    disY=event.<span class="hljs-property">clientY</span>-oDiv.<span class="hljs-property">offsetTop</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>      <span class="hljs-keyword">var</span> event=event||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>      oDiv.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=event.<span class="hljs-property">clientX</span>-disX+<span class="hljs-string">&#x27;px&#x27;</span>;<br>      oDiv.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=event.<span class="hljs-property">clientY</span>-disY+<span class="hljs-string">&#x27;px&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 鼠标释放时事件清空</span><br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-literal">null</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=<span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="开始改写版本一"><a href="#开始改写版本一" class="headerlink" title="开始改写版本一"></a>开始改写版本一</h4><p>尽量不要出现函数嵌套函数</p><ul><li>可以有全局变量</li><li>把onload中不是赋值的语句放在单独函数中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oDiv=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> disX=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> disY=<span class="hljs-number">0</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  oDiv=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>  <span class="hljs-title function_">init</span>()<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>  oDiv.<span class="hljs-property">onmousedown</span>=fnDown;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fnDown</span>(<span class="hljs-params">event</span>)&#123;<br>  <span class="hljs-keyword">var</span> event=event||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>  disX=event.<span class="hljs-property">clientX</span>-oDiv.<span class="hljs-property">offsetLeft</span>;<br>  disY=event.<span class="hljs-property">clientY</span>-oDiv.<span class="hljs-property">offsetTop</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=fnMove;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=fnUp;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fnMove</span>(<span class="hljs-params">event</span>)&#123;<br>  <span class="hljs-keyword">var</span> event=event||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>  oDiv.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=event.<span class="hljs-property">clientX</span>-disX+<span class="hljs-string">&#x27;px&#x27;</span>;<br>  oDiv.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=event.<span class="hljs-property">clientY</span>-disY+<span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fnUp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="面向对象的改写-es5"><a href="#面向对象的改写-es5" class="headerlink" title="面向对象的改写 es5"></a>面向对象的改写 es5</h4><ul><li>全局变量就是属性<ul><li>函数就是方法</li><li>onload中创建对象</li><li>改this指向问题</li></ul></li></ul><blockquote><p>在ie和谷歌下，这样是可以的，但是火狐下，应为有些地方为了this指向 嵌套了一层函数，但火狐可不这样，他认为event是事件函数传递的，也就是事件后面更着的函数，这是好就需要把event当做参数传递了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> d=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drag</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>  d.<span class="hljs-title function_">init</span>();<br>&#125;<br><span class="hljs-comment">//构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Drag</span>(<span class="hljs-params">id</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span>=<span class="hljs-number">0</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span>=<span class="hljs-number">0</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-comment">// 这里的this 指向的是Drag这个类</span><br>  <span class="hljs-keyword">var</span> _this=<span class="hljs-variable language_">this</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">onmousedown</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//这里嵌套一层是为了解决若写成this.fnDown的话，下面fnDown里面的this就会变成this.oDiv，相当于this就变成div了</span><br>  <span class="hljs-comment">// 匿名函数里的this是指window,因为this指的是调用他的对象，但是匿名函数不知道是谁调用的，所以可以认为是被window调用的</span><br>    _this.<span class="hljs-title function_">fnDown</span>()<br>  &#125;;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnDown</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> event=event||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span>=event.<span class="hljs-property">clientX</span>-<span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetLeft</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span>=event.<span class="hljs-property">clientY</span>-<span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetTop</span>;<br>  <span class="hljs-keyword">var</span> _this=<span class="hljs-variable language_">this</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    _this.<span class="hljs-title function_">fnMove</span>()<br>  &#125;;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">fnUp</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnMove</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> event=event||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=event.<span class="hljs-property">clientX</span>- <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=event.<span class="hljs-property">clientY</span>- <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnUp</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>但是火狐下报错:TypeError: event is undefined</p></blockquote><h5 id="火狐的解决办法"><a href="#火狐的解决办法" class="headerlink" title="火狐的解决办法"></a>火狐的解决办法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drag</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>  d.<span class="hljs-title function_">init</span>();<br>&#125;<br><span class="hljs-comment">//构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Drag</span>(<span class="hljs-params">id</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123; <span class="hljs-comment">//嵌套是为了解决this问题</span><br>    <span class="hljs-keyword">var</span> event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>    _this.<span class="hljs-title function_">fnDown</span>(event)<br>  &#125;;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnDown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetLeft</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetTop</span>;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>    _this.<span class="hljs-title function_">fnMove</span>(event)<br>  &#125;;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fnUp</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnMove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnUp</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也可以吧init 放进构造函数里面，这样只要new 一个就可以生成拖拽了<br> ,如下所示</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> d=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drag</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Drag</span>(<span class="hljs-params">id</span>) &#123;<br>  <span class="hljs-keyword">var</span> _this=<span class="hljs-variable language_">this</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span>=<span class="hljs-number">0</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span>=<span class="hljs-number">0</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">onmousedown</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123; <span class="hljs-comment">//嵌套是为了解决this问题</span><br><span class="hljs-keyword">var</span> event=event||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>_this.<span class="hljs-title function_">fnDown</span>(event)<br>&#125;;<br>&#125;<br><br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnDown</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span>=event.<span class="hljs-property">clientX</span>-<span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetLeft</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span>=event.<span class="hljs-property">clientY</span>-<span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetTop</span>;<br>  <span class="hljs-keyword">var</span> _this=<span class="hljs-variable language_">this</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>    _this.<span class="hljs-title function_">fnMove</span>(event)<br>  &#125;;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">fnUp</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnMove</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=event.<span class="hljs-property">clientX</span>- <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=event.<span class="hljs-property">clientY</span>- <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br><span class="hljs-title class_">Drag</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fnUp</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span>=<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="es6-面向对象的改写-也可以吧init-放进构造函数里面"><a href="#es6-面向对象的改写-也可以吧init-放进构造函数里面" class="headerlink" title="es6 面向对象的改写,也可以吧init 放进构造函数里面"></a>es6 面向对象的改写,也可以吧init 放进构造函数里面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drag</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>  d.<span class="hljs-title function_">init</span>();<br>&#125;<br><span class="hljs-comment">// 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drag</span> &#123;<br>  <span class="hljs-comment">//构造函数</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);<br>  &#125;<br>  <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>      <span class="hljs-keyword">var</span> event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>      _this.<span class="hljs-title function_">fnDown</span>(event)<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">fnDown</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetLeft</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetTop</span>;<br>    <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>      _this.<span class="hljs-title function_">fnMove</span>(event)<br>    &#125;;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fnUp</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-title function_">fnMove</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>  &#125;<br>  <span class="hljs-title function_">fnUp</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="初步总结"><a href="#初步总结" class="headerlink" title="初步总结"></a>初步总结</h4><ul><li>原则<br>先写出普通的写法，然后改写成面向对象的写法<blockquote><p>普通方法变形</p></blockquote><ul><li>尽量不要出现函数嵌套函数</li><li>可以有全局变量</li><li>把onload中不是赋值的语句放在单独函数中<blockquote><p>改写面向对象</p></blockquote></li><li>全局变量就是属性</li><li>函数就是方法</li><li>onload中创建对象</li><li>改this指向问题</li></ul></li></ul><h4 id="说了这么多，我们来封装一个拖拽组件吧"><a href="#说了这么多，我们来封装一个拖拽组件吧" class="headerlink" title="说了这么多，我们来封装一个拖拽组件吧"></a>说了这么多，我们来封装一个拖拽组件吧</h4><p>组件就该可以自自定义样式吧～～～～～，data-config写入自定义的样式，有人说你怎么怎么鸡肋，不如css里面写写快，但也是可以不写的，有默认参数，js里面已经写好了，如果data-config写了的话是可以覆盖js里面的，具体看js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">data-config</span>=<span class="hljs-string">&#x27;&#123;&quot;width&quot;: &quot;100px&quot;,&quot;height&quot;: &quot;100px&quot;,&quot;backgroundColor&quot;: &quot;black&quot;,&quot;position&quot;: &quot;absolute&quot;&#125;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> div1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drag</span>(<span class="hljs-string">&#x27;box1&#x27;</span>);</span><br><span class="language-javascript">  div1.<span class="hljs-title function_">init</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>尽量让用户少写css,那你就帮他考虑周全吧</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 外层包裹防止函数被污染</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Drag 类</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Drag</span> &#123;<br>    <span class="hljs-title function_">constructor</span> (id) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);<br>      <span class="hljs-comment">// 默认设置</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span> = &#123;<br>        <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,<br>        <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,<br>        <span class="hljs-string">&#x27;backgroundColor&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>        <span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span><br>      &#125;;<br>      <span class="hljs-comment">// 若有自定义属性，那就合并</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getConfig</span>()) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getConfig</span>());<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();<br>    &#125;<br>    getConfig () &#123;<br>      <span class="hljs-keyword">var</span> config = <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-config&#x27;</span>);<br>      <span class="hljs-keyword">if</span> (config &amp;&amp; config !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(config);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;<br>    init () &#123;<br>      <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;<br>        <span class="hljs-comment">/* 传入_this,为了下面不在重复写 */</span><br>        _this.<span class="hljs-title function_">fnDown</span>(ev, _this);<br>      &#125;;<br>      <span class="hljs-comment">// 改变设置的属性</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>[i] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>[i];<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 拖拽本体 */</span><br>    fnDown (ev, _this) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = ev.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetLeft</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = ev.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetTop</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;<br>        _this.<span class="hljs-title function_">fnMove</span>(ev);<br>      &#125;;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fnUp</span>;<br>      <span class="hljs-comment">/* 阻止默认事件 */</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    fnMove (ev) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = ev.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = ev.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    &#125;;<br>    fnUp () &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">Drag</span> = <span class="hljs-title class_">Drag</span>;<br>&#125;)();<br></code></pre></td></tr></table></figure><h4 id="你说啥？？不支持手机端？？那就来支持一下吧"><a href="#你说啥？？不支持手机端？？那就来支持一下吧" class="headerlink" title="你说啥？？不支持手机端？？那就来支持一下吧"></a>你说啥？？不支持手机端？？那就来支持一下吧</h4><p>支持的不够怎么完美，见谅。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在fnDown里面先判断一下</span><br><span class="hljs-comment">// 判断是否为手机端</span><br>    <span class="hljs-keyword">var</span> touch;<br>    <span class="hljs-keyword">if</span> (ev.<span class="hljs-property">touches</span>) &#123;<br>        touch = ev.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        touch = ev;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = touch.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetLeft</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = touch.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetTop</span>;<br></code></pre></td></tr></table></figure><p>pc上的web页面鼠 标会产生onmousedown、onmouseup、onmouseout、onmouseover、onmousemove的事件，但是在移动终端如 iphone、Touch、ipad,android上的web页面触屏时会产生ontouchstart、ontouchmove、ontouchend、ontouchcancel 事件，分别对应了触屏开始、拖拽及完成触屏事件和取消。<br>当按下手指时，触发ontouchstart；<br>当移动手指时，触发ontouchmove；<br>当移走手指时，触发ontouchend。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原理还是一样的</span><br><span class="hljs-comment">// js代码如下</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Drag 类</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Drag</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">id</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);<br>      <span class="hljs-comment">// 默认设置</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span> = &#123;<br>        <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,<br>        <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,<br>        <span class="hljs-string">&#x27;backgroundColor&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>        <span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span><br>      &#125;;<br>      <span class="hljs-comment">// 若有自定义属性，那就合并</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getConfig</span>()) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getConfig</span>());<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();<br>    &#125;<br>    <span class="hljs-title function_">getConfig</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> config = <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-config&#x27;</span>);<br>      <span class="hljs-keyword">if</span> (config &amp;&amp; config !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(config);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-comment">// pc端</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;<br>        <span class="hljs-comment">/* 传入_this,为了下面不在重复写 */</span><br>        _this.<span class="hljs-title function_">fnDown</span>(ev, _this);<br>      &#125;;<br>      <span class="hljs-comment">// 移动端</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">ontouchstart</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">ev</span>)&#123;<br>        _this.<span class="hljs-title function_">fnDown</span>(ev, _this);<br>      &#125;<br>      <span class="hljs-comment">// 改变设置的属性</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>[i] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>[i];<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 拖拽本体 */</span><br>    <span class="hljs-title function_">fnDown</span>(<span class="hljs-params">ev, _this</span>) &#123;<br>      <span class="hljs-comment">// 判断是否为手机端</span><br>      <span class="hljs-keyword">var</span> touch;<br>      <span class="hljs-keyword">if</span> (ev.<span class="hljs-property">touches</span>) &#123;<br>        touch = ev.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        touch = ev;<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> = touch.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetLeft</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> = touch.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">offsetTop</span>;<br>      <span class="hljs-comment">// pc</span><br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;<br>        _this.<span class="hljs-title function_">fnMove</span>(ev);<br>      &#125;;<br>      <span class="hljs-comment">// 移动端</span><br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">ontouchmove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;<br>        _this.<span class="hljs-title function_">fnMove</span>(ev);<br>      &#125;;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fnUp</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">ontouchend</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fnUp</span>;<br>      <span class="hljs-comment">/* 阻止默认事件 */</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-title function_">fnMove</span>(<span class="hljs-params">ev</span>) &#123;<br>      <span class="hljs-keyword">var</span> touch;<br>      <span class="hljs-keyword">if</span> (ev.<span class="hljs-property">touches</span>) &#123;<br>        touch = ev.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        touch = ev;<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = touch.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disX</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">oDiv</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = touch.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">disY</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    &#125;;<br>    <span class="hljs-title function_">fnUp</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">ontouchmove</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">ontouchend</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">Drag</span> = <span class="hljs-title class_">Drag</span>;<br>&#125;)();<br><br></code></pre></td></tr></table></figure><p> 传送门：<a href="https://shoukailiang.github.io/my-component/drag/">点击查看演示</a><br> <a href="https://github.com/shoukailiang/my-component/tree/master/drag">点击查看源码</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>面向对象</tag>
      
      <tag>拖拽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js项目线上服务器部署与发布</title>
    <link href="/2018/02/18/Node-js%E9%A1%B9%E7%9B%AE%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/"/>
    <url>/2018/02/18/Node-js%E9%A1%B9%E7%9B%AE%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><blockquote><p>配置公钥 和密钥 可以登录服务器不需要密码<br>看是否已经存在公钥和密钥<br>看用户文件夹下是否存在<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281529886.png"></p></blockquote><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281529237.png"></p><p>ctrl +d 退出用户<br>sudo  rm -f  xxx 删除一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">//连接<br>ssh ubuntu@ip地址<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 先给root一个密码<br>sudo passwd root<br>// 然后切换到root su root<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">//在root下<br>sudo adduser shoukailiang<br>增加一个用户<br><br>//然后在root下给skl sudo 权限<br> gpasswd -a shoukailiang sudo<br> <br> //<br> sudo visudo<br> 增加下面的shoukailiang<br></code></pre></td></tr></table></figure><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281529012.png"></p><p>ctrl +X保存 之后shift+Y enter 退出</p><p>可以在root 下进入skl 用户 su skl<br>或者 sudo su shoukailiang </p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">//重启服务<br> sudo service ssh restart<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">//生成公钥和私钥<br> ssh-keygen -t rsa -C &quot;shoukailiang@qq.com&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">//配置文件 修改默认端口<br>sudo vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><h2 id="改过端口后-连接服务器会连不上"><a href="#改过端口后-连接服务器会连不上" class="headerlink" title="改过端口后 连接服务器会连不上"></a>改过端口后 连接服务器会连不上</h2><p>出现<br>     : ssh: connect to host ip地址 port 22: Connection refused</p><p>这时候就要虚入输入端口号了</p><ul><li>ssh -p 8888 ubuntu@ip地址<br>(8888是刚刚改过的端口)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">//更新<br>sudo apt-get update<br><br>//安装一些<br>sudo apt-get install vim openssl build-essential libssl-dev wget curl git<br><br>//找到github上的nvm <br>https://github.com/creationix/nvm<br>找到安装脚本<br></code></pre></td></tr></table></figure><p>curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh">https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh</a> | bash</p><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281529199.png"></p><p>装完后若发现nvm 不是一个命令 在来一个命令窗口</p><h3 id="安装好nvm-就可以安装nodejs了"><a href="#安装好nvm-就可以安装nodejs了" class="headerlink" title="安装好nvm 就可以安装nodejs了"></a>安装好nvm 就可以安装nodejs了</h3><blockquote><p>nvm install v8.2.1</p></blockquote><h3 id="指定一下node版本"><a href="#指定一下node版本" class="headerlink" title="指定一下node版本"></a>指定一下node版本</h3><blockquote><p>nvm use v8.2.2</p></blockquote><h3 id="设置一下默认"><a href="#设置一下默认" class="headerlink" title="设置一下默认"></a>设置一下默认</h3><blockquote><p>nvm alias default v8.2.1</p></blockquote><h3 id="设置成淘宝"><a href="#设置成淘宝" class="headerlink" title="设置成淘宝"></a>设置成淘宝</h3><p>用一个nrm 包</p><blockquote><p>npm –registry&#x3D;<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a> install -g nrm </p></blockquote><blockquote><p>nrm use taobao </p></blockquote><h3 id="安装一些包"><a href="#安装一些包" class="headerlink" title="安装一些包"></a>安装一些包</h3><blockquote><p> npm i pm2 webpack gulp grunt-cli -g</p></blockquote><h3 id="查看全局安装过的包-npm-list-g-depth-0"><a href="#查看全局安装过的包-npm-list-g-depth-0" class="headerlink" title="查看全局安装过的包 npm list -g -depth 0"></a>查看全局安装过的包 npm list -g -depth 0</h3><h4 id="创建-app-js-如下"><a href="#创建-app-js-如下" class="headerlink" title="创建 app.js  如下"></a>创建 app.js  如下</h4><blockquote><p>创建 sudo  vi app.js </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> server=http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req,res</span>) &#123;<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;)<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello SKL\n&#x27;</span>);<br>&#125;)<br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8081</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running at http://ip地址:8081&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>之后 node app.js<br>就可以在浏览器中访问 127.0.0.1:8081</p><h3 id="使用nginx-80端口"><a href="#使用nginx-80端口" class="headerlink" title="使用nginx 80端口"></a>使用nginx 80端口</h3><blockquote><p>停止apache 服务<br>   sudo service apache2 stop<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">移除Apache 2<br><br>sudo update-rc.d -f apache2 remove<br><br>sudo apt-get remove apache2<br></code></pre></td></tr></table></figure><br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">下载 nginx <br>   sudo apt-get install nginx<br></code></pre></td></tr></table></figure></p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>cd &#x2F;etc&#x2F;nginx&#x2F;</li><li>cd conf.d</li><li>sudo vi shoukailiang-cn-8081.conf<br>写入<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> blog&#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span>;<br>&#125;<br><br><span class="hljs-comment"># NGINX Server Instance,PORT 80</span><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> ip地址;<br><br><br>    <span class="hljs-comment"># Proxy to the Node instance</span><br>    <span class="hljs-section">location</span> / &#123;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-NginX-Proxy <span class="hljs-literal">true</span>;<br>      <span class="hljs-attribute">proxy_pass</span> http://blog;<br>      <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>    &#125;<br> &#125;<br><br></code></pre></td></tr></table></figure>4.sudo nginx -t  测试是否成功</li><li>sudo nginx -s reload 重启 nginx</li></ol><p>之后输入ip地址 就可以看到了 把8081 的服务都导向到Nginx的80端口</p><blockquote><p>让 Nginx的版本信息在浏览器的头信息中不那么明显</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>nginx<br>sudo vi nginx.conf<br>去掉下面配置文件前的<span class="hljs-comment"># 保存</span><br></code></pre></td></tr></table></figure><p>去掉<br><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281530769.png"><br>然后 sudo service nginx reload</p><h3 id="MongoDB-ubuntu16-04"><a href="#MongoDB-ubuntu16-04" class="headerlink" title="MongoDB ubuntu16.04"></a>MongoDB ubuntu16.04</h3><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">命令：<br>xxxx<br><br>sudo apt-get install -y mongodb-org<br>其中这一步速度很慢，改成阿里云的连接<br>cd <span class="hljs-regexp">/etc/</span>apt/sources.list.d<br>vi mongodb-org-<span class="hljs-number">3.4</span>.list  (注意看安装时的版本)<br>改成：<br>deb [ arch=amd64,arm64 ] http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/mongodb/</span>apt<span class="hljs-regexp">/ubuntu xenial/m</span>ongodb-org/<span class="hljs-number">3.6</span> multiverse<br>命令：<br><span class="hljs-regexp">//</span> 改过镜像后要upadte一下<br>xxxx<br>xxx<br>xxx<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo service mongod <span class="hljs-literal">start</span><br>之后 mongo就启动了<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">若遇到无法写入。加sudo <br><br>mongodb 默认跑在27017 端口上<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>修改<br>sudo vi <span class="hljs-regexp">/etc/m</span>ongod.conf<br>port 改成了<span class="hljs-number">19997</span> <br></code></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp ./test.html shoukailiang<span class="hljs-variable">@ip</span>地址<span class="hljs-number">0</span><span class="hljs-symbol">:/home/shoukailiang/test</span><br>scp -P <span class="hljs-number">8888</span> ant-mobile-recruit-app.tar shoukailiang<span class="hljs-variable">@ip</span>地址<span class="hljs-symbol">:/home/shoukailiang/</span><br></code></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><blockquote><p>tar</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c ： 打包</span><br><br><span class="hljs-deletion">-v ： 显示过程</span><br><br><span class="hljs-deletion">-f ： 指定打包后的文件名</span><br><br><span class="hljs-deletion">-x : 解打包</span><br><br><span class="hljs-deletion">-z：压缩为.tar.gz格式</span><br><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//压缩</span><br>tar -cvf japan<span class="hljs-selector-class">.tar</span> japan<br>tar -zcvf japan<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> japan<br><span class="hljs-comment">//解压</span><br>tar -xvf japan<span class="hljs-selector-class">.tar</span><br>tar -zxvf japan<span class="hljs-selector-class">.tar</span><br><br></code></pre></td></tr></table></figure><h3 id="配置可以让域名访问服务器"><a href="#配置可以让域名访问服务器" class="headerlink" title="配置可以让域名访问服务器"></a>配置可以让域名访问服务器</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/etc/nginx/conf.d</span><br>sudo mv shoukailiang-cn-8081.conf www-shoukailiang-cn-3000.conf<br>修改配置文件<br>upstream blog&#123;                                                      <br>        server 127.0.0.1<span class="hljs-function">:3000</span>;                                      <br>&#125;                                                                   <br><span class="hljs-comment"># NGINX Server Instance,PORT 80                                     </span><br>server &#123;                                                            <br>        listen 80;                                                  <br>        server_name www.shoukailiang.cn;                            <br><span class="hljs-comment"># Proxy to the Node instance                                        </span><br>location / &#123;                                                        <br>       proxy_<span class="hljs-keyword">set</span>_header X-Real-IP $remote_addr;                     <br>       proxy_<span class="hljs-keyword">set</span>_header X-Forwarded-For $proxy_add_x_forwarded_for; <br>       proxy_<span class="hljs-keyword">set</span>_header Host $http_host;                            <br>       proxy_<span class="hljs-keyword">set</span>_header X-NginX-Proxy <span class="hljs-literal">true</span>;                         <br>       proxy_pass http:<span class="hljs-string">//blog</span>;                                      <br>       proxy_redirect off;                                          <br>     &#125;                                                              <br>&#125;    <br><span class="hljs-string">//</span> 重启nginx<br>sudo nginx -s <span class="hljs-keyword">reload</span><br><br></code></pre></td></tr></table></figure><h3 id="配一下防火墙"><a href="#配一下防火墙" class="headerlink" title="配一下防火墙"></a>配一下防火墙</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sudo apt-get update &amp;&amp; sudo apt-get upgrade<br>sudo iptables -F <span class="hljs-string">//</span>先清掉所有的规则<br>sudo vi <span class="hljs-string">/etc/iptables.up.rules</span><br><span class="hljs-params">------------------------------------------</span>  <br>*filter<br><span class="hljs-comment"># 允许所有建立起来的连接</span><br>-A INPUT -m state <span class="hljs-params">--state</span> ESTABLISHED,RELATED -j ACCEPT<br><span class="hljs-comment"># 允许所有出去的流量</span><br>-A OUTPUT -j ACCEPT<br>-A INPUT -p tcp <span class="hljs-params">--dport</span> 443 -j ACCEPT<br>-A INPUT -p tcp <span class="hljs-params">--dport</span> 80 -j ACCEPT<br><span class="hljs-comment"># ping</span><br>-A INPUT -p icmp -m  icmp <span class="hljs-params">--icmp-type</span>  8 -j ACCEPT<br><span class="hljs-comment"># allow ssh port login</span><br>-A INPUT -p  tcp -m state <span class="hljs-params">--state</span> NEW <span class="hljs-params">--dport</span> 8888 -j ACCEPT<br><br><span class="hljs-comment"># MongoDB connection</span><br>-A INPUT -s 127.0.0.1 -p tcp <span class="hljs-params">--destination-port</span> 27017 -m state <span class="hljs-params">--state</span> NEW,ESTABLISHED -j ACCEPT<br>-A OUTPUT -d 127.0.0.1 -p tcp <span class="hljs-params">--source-port</span> 27017 -m state <span class="hljs-params">--state</span> ESTABLISHED -j ACCEPT<br><br><span class="hljs-comment"># 3000端口</span><br>-A INPUT -s 127.0.0.1 -p tcp <span class="hljs-params">--destination-port</span> 3000 -m state <span class="hljs-params">--state</span> NEW,ESTABLISHED -j ACCEPT<br>-A OUTPUT -d 127.0.0.1 -p tcp <span class="hljs-params">--source-port</span> 3000 -m state <span class="hljs-params">--state</span> ESTABLISHED -j ACCEPT<br><br><span class="hljs-comment"># 9093端口</span><br>-A INPUT -s 127.0.0.1 -p tcp <span class="hljs-params">--destination-port</span> 9093 -m state <span class="hljs-params">--state</span> NEW,ESTABLISHED -j ACCEPT<br>-A OUTPUT -d 127.0.0.1 -p tcp <span class="hljs-params">--source-port</span> 9093 -m state <span class="hljs-params">--state</span> ESTABLISHED -j ACCEPT<br><br><span class="hljs-comment"># 记录被拒绝的请求</span><br>-A INPUT -m limit <span class="hljs-params">--limit</span> 5/min -j LOG <span class="hljs-params">--log-prefix</span> <span class="hljs-string">&quot;iptables denied:&quot;</span> <span class="hljs-params">--log-level</span> 7<br><span class="hljs-comment"># drop incoming sensitive connections</span><br>-A INPUT -p tcp <span class="hljs-params">--dport</span> 80 -i eth0 -m state <span class="hljs-params">--state</span> NEW -m recent <span class="hljs-params">--set</span><br>-A INPUT -p tcp <span class="hljs-params">--dport</span> 80 -i eth0 -m state <span class="hljs-params">--state</span> NEW -m recent <span class="hljs-params">--update</span> <span class="hljs-params">--seconds</span> 60 <span class="hljs-params">--hitcount</span> 150 -j DROP<br><span class="hljs-comment"># reject all other inbound</span><br>-A INPUT -j REJECT<br>-A FORWARD -j REJECT<br><br>COMMIT  <br><span class="hljs-params">-------------------------------------------</span><br>sudo iptables-restore &lt;<span class="hljs-string">/etc/iptables.up.rules</span> <span class="hljs-string">//</span>载入规则<br>sudo ufw status <span class="hljs-string">//</span>查看防火墙状态<br>sudo ufw enable <span class="hljs-string">//</span>激活<br><br>sudo vi <span class="hljs-string">/etc/network/if-up.d/iptables</span> <span class="hljs-string">//</span>让他开机自动启动<br>·<span class="hljs-params">-----------------------------------</span><br><span class="hljs-comment">#!/bin/sh</span><br>iptables-restore <span class="hljs-string">/etc/iptables.up.rulea</span><br><span class="hljs-params">-----------------------------------------------------</span><br>sudo chmod +x <span class="hljs-string">/etc/network/if-up.d/iptables</span><br><br><br><br><span class="hljs-comment">### 出现invalid host header的问题</span><br><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">// react的话在<span class="hljs-built_in">config</span>里面的webpackDevServer.<span class="hljs-built_in">config</span>.js里面加一个<br>disableHostCheck: <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><h1 id="https配置"><a href="#https配置" class="headerlink" title="https配置"></a>https配置</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 在腾讯云上申请证书(具体详见文档：https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/document/</span>product<span class="hljs-regexp">/400/</span><span class="hljs-number">4143</span>)<br><span class="hljs-regexp">//</span> 把证书下载下来上传到服务器<br><span class="hljs-regexp">//</span> 修改配置文件<br>upstream blog&#123;<br>     server <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span>;<br>&#125;<br><span class="hljs-comment"># NGINX Server Instance,PORT 80</span><br>server &#123;<br>        listen <span class="hljs-number">80</span>;<br>        server_name www.shoukailiang.cn;<br>        <span class="hljs-comment"># rewrite ^(.*) https://$host$1 permanent;</span><br>        return <span class="hljs-number">301</span> https:<span class="hljs-regexp">//</span>www.shoukailiang.cn<span class="hljs-variable">$request_uri</span>;<br>&#125;<br>server &#123;<br>        listen <span class="hljs-number">443</span>;<br>        server_name www.shoukailiang.cn; <span class="hljs-comment">#填写绑定证书的域名</span><br>        ssl on;<br>        ssl_certificate <span class="hljs-regexp">/home/</span>shoukailiang<span class="hljs-regexp">/https-key/</span><span class="hljs-number">1</span>_www.shoukailiang.cn_bundle.crt;<br>        ssl_certificate_key  <span class="hljs-regexp">/home/</span>shoukailiang<span class="hljs-regexp">/https-key/</span><span class="hljs-number">2</span>_www.shoukailiang.cn.key;<br>        ssl_session_timeout <span class="hljs-number">5</span>m;<br>        ssl_protocols TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>; <span class="hljs-comment">#按照这个协议配置</span><br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; <span class="hljs-comment">#按照这个套件配置</span><br>        ssl_prefer_server_ciphers on;<br><br>        <span class="hljs-comment"># if($ssl_protocol = &quot;&quot;)&#123;</span><br>         <span class="hljs-comment">#  rewrite ^(.*) https://$host$1 permanent;</span><br>        <span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># Proxy to the Node instance</span><br>location / &#123;<br>       proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>       proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>       proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>       proxy_set_header X-NginX-Proxy true;<br>       proxy_pass http:<span class="hljs-regexp">//</span>blog;<br>       proxy_redirect off;<br>        &#125;<br>&#125;<br>测试nginx <br>重启nginx<br></code></pre></td></tr></table></figure><h2 id="node-后端启动"><a href="#node-后端启动" class="headerlink" title="node 后端启动"></a>node 后端启动</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">nohup npm start &amp;<br>https:<span class="hljs-regexp">//</span>segmentfault.com<span class="hljs-regexp">/q/</span><span class="hljs-number">1010000004455598</span><br>lsof -i 查看端口<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>node</tag>
      
      <tag>前端</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的一些使用和配置</title>
    <link href="/2018/02/18/hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2018/02/18/hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h4><p>在github 上的项目名称必须和自己用户名一样</p><p>自己的用户名是aaa项目名得是 aaa.github.io</p><p>安装hexo ,一些工具(git,node)  略过</p><h1 id="关联-Hexo-与-GitHub-Pages"><a href="#关联-Hexo-与-GitHub-Pages" class="headerlink" title="关联 Hexo 与 GitHub Pages"></a>关联 Hexo 与 GitHub Pages</h1><p>我们如何让本地git项目与远程的github建立联系呢？用 SSH keys</p><h2 id="生成SSH-keys"><a href="#生成SSH-keys" class="headerlink" title="生成SSH keys"></a>生成SSH keys</h2><p>输入你自己的邮箱地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;435072096@qq.com&quot;<br></code></pre></td></tr></table></figure><p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。</p><h2 id="添加-SSH-Key-到-GitHub"><a href="#添加-SSH-Key-到-GitHub" class="headerlink" title="添加 SSH Key 到 GitHub"></a>添加 SSH Key 到 GitHub</h2><p>打开 C:\Users\shouk \ .ssh\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到 <a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a> 的 new SSH key 中</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a>的部分不要修改：    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com   <br></code></pre></td></tr></table></figure><p>如果是下面的反馈：</p><blockquote><p> The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes&#x2F;no)?</p></blockquote><p>不要紧张，输入yes就好，然后会看到：</p><blockquote><p>Hi shoukailiang! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><h2 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h2><p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。<br>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;shoukailiang&quot;<br>git config --global user.email &quot;shoukailiang@qq.com&quot;<br></code></pre></td></tr></table></figure><h2 id="配置-Deployment"><a href="#配置-Deployment" class="headerlink" title="配置 Deployment"></a>配置 Deployment</h2><p>在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：</p><p>需要注意的是：冒号后面记得空一格！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:shoukailiang/shoukailiang.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="本地文件提交到-GitHub-Pages"><a href="#本地文件提交到-GitHub-Pages" class="headerlink" title="本地文件提交到 GitHub Pages"></a>本地文件提交到 GitHub Pages</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 删除旧的 public 文件<br>hexo clean<br><br>// 生成新的 public 文件<br>hexo generate<br>或者<br>hexo g<br><br>// 开始部署<br>hexo deploye<br>或者<br>hexo d<br>在浏览器中输入 https://shoukailiang.github.io （用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了<br></code></pre></td></tr></table></figure><h4 id="注意1："><a href="#注意1：" class="headerlink" title="注意1："></a>注意1：</h4><p>若上面操作失败，则需要提前安装一个扩展：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>写一篇文章,默认是以post作为模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new first(文章名)<br><br></code></pre></td></tr></table></figure><p>tags里面写标签</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span><br>- 前端<br>- 后端<br><br>分类<br>categories:<br>- 技术<br></code></pre></td></tr></table></figure><h5 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about  <span class="hljs-comment">//以page 作为模版,会自动生成里面的index.md</span><br></code></pre></td></tr></table></figure><h5 id="搜索功能的实现"><a href="#搜索功能的实现" class="headerlink" title="搜索功能的实现"></a>搜索功能的实现</h5><blockquote><p><a href="https://github.com/alexbruno/hexo-generator-json-content">https://github.com/alexbruno/hexo-generator-json-content</a></p></blockquote><p><img src="https://shoukailiang-blog.oss-cn-hangzhou.aliyuncs.com/article/202211281526714.png"></p><blockquote><p>部分学习自：<a href="http://www.jianshu.com/p/39562a0d8eb6">http://www.jianshu.com/p/39562a0d8eb6</a></p></blockquote><h1 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h1><h2 id="部署出错"><a href="#部署出错" class="headerlink" title="部署出错"></a>部署出错</h2><p>Error: Host key verification failed.<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p><p>解决方法：条件SSHkey<br>$ ssh-keygen -t rsa -C “<a href="mailto:&#105;&#x6d;&#x73;&#111;&#x66;&#x74;&#101;&#x72;&#x40;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#x6d;">&#105;&#x6d;&#x73;&#111;&#x66;&#x74;&#101;&#x72;&#x40;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#x6d;</a>“<br>三次回车，即可设置密码为空</p><p>将生成的C:\Users\用户名.ssh目录下的id_rsa.pub添加到github上</p><p>再测试是否可以连接到github上，<br>$ ssh <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#109;</a><br>Hi imsofter! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
